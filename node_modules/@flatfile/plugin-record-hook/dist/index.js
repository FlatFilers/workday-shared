"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  recordHook: () => recordHook
});
module.exports = __toCommonJS(src_exports);

// src/record.translater.ts
var import_hooks = require("@flatfile/hooks");
var RecordTranslater = class {
  constructor(records) {
    this.records = records;
    this.toFlatFileRecords = () => {
      if (this.records instanceof import_hooks.FlatfileRecords) {
        return this.records;
      } else {
        const XRecords = this.records;
        const FFRecords = new import_hooks.FlatfileRecords(
          XRecords.map((record) => {
            let rawData = {};
            for (let [k, v] of Object.entries(record.values)) {
              if (!!v.links?.length && v.value) {
                const links = v.links.map((link) => {
                  let linkedRawData = {};
                  for (let [lk, lv] of Object.entries(link.values)) {
                    linkedRawData[lk] = lv.value;
                  }
                  return linkedRawData;
                });
                rawData[k] = {
                  value: v.value,
                  links
                };
              } else {
                rawData[k] = v.value;
              }
            }
            const metadata = record.metadata;
            const rawRecord = {
              rowId: record.id,
              rawData,
              metadata
            };
            return rawRecord;
          })
        );
        return FFRecords;
      }
    };
    this.toXRecords = () => {
      if (this.records[0] instanceof import_hooks.FlatfileRecord) {
        const FFRecords = this.records;
        return FFRecords.map((record) => {
          const recordWithInfo = record.toJSON();
          let values = {};
          for (let [k, v] of Object.entries(recordWithInfo.row.rawData)) {
            const messages = recordWithInfo.info.filter((info) => info.field === k).map((info) => ({ message: info.message, type: info.level }));
            values[k] = {
              value: v !== null && typeof v === "object" ? v.value : v,
              messages,
              valid: true
            };
          }
          const metadata = recordWithInfo.row.metadata;
          return {
            id: String(record.rowId),
            values,
            metadata
          };
        });
      } else {
        return this.records;
      }
    };
    this.records = records;
  }
};

// src/RecordHook.ts
var import_api = __toESM(require("@flatfile/api"));
var RecordHook = async (event, handler) => {
  const { sheetId } = event.context;
  try {
    const records = await event.cache.init(
      "records",
      async () => (await event.data).records
    );
    if (!records)
      return;
    const batch = await prepareXRecords(records);
    for (const x of batch.records) {
      await handler(x);
    }
    const recordsUpdates = new RecordTranslater(
      batch.records
    ).toXRecords();
    await event.cache.set("records", async () => recordsUpdates);
    event.afterAll(async () => {
      const records2 = event.cache.get("records");
      try {
        return await import_api.default.records.update(sheetId, records2);
      } catch (e) {
        console.log(`Error putting records: ${e}`);
      }
    });
  } catch (e) {
    console.log(`Error getting records: ${e}`);
  }
  return handler;
};
var prepareXRecords = async (records) => {
  const clearedMessages = records.map(
    (record) => {
      Object.keys(record.values).forEach((k) => {
        record.values[k].messages = [];
      });
      return record;
    }
  );
  const fromX = new RecordTranslater(clearedMessages);
  return fromX.toFlatFileRecords();
};

// src/index.ts
var recordHook = (sheetSlug, callback) => {
  return (client) => {
    client.on(
      "records:*",
      {
        // todo: fix this filter
        context: {
          // @ts-ignore
          sheetSlug
        }
      },
      (event) => {
        return RecordHook(event, callback);
      }
    );
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  recordHook
});
