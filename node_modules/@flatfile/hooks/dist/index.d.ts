type TPrimitive = string | boolean | number | null;
type TRecordDataWithLinks<T extends TPrimitive | undefined = TPrimitive> = {
    [key: string]: T | {
        value: T;
        links: TRecordData<TPrimitive>[];
    };
};
type TRecordData<T extends TPrimitive | undefined = TPrimitive> = {
    [key: string]: T;
};
interface IRawRecord {
    metadata?: Object;
    rawData: TRecordDataWithLinks;
    rowId: number | string;
}
type TRecordInfoLevel = 'error' | 'warn' | 'info';
type TRecordStageLevel = 'cast' | 'empty' | 'required' | 'compute' | 'validate' | 'apply' | 'other';
interface IRecordInfo<M extends TRecordDataWithLinks = TRecordDataWithLinks, K = keyof M> {
    level: TRecordInfoLevel;
    field: K;
    message: string;
    stage: TRecordStageLevel;
}
interface IRawRecordWithInfo<M extends TRecordDataWithLinks = TRecordDataWithLinks> {
    row: IRawRecord;
    info: IRecordInfo<M>[];
}
interface IPayload {
    workspaceId: string;
    workbookId: string;
    schemaId: number;
    schemaSlug: string;
    uploads: string[];
    endUser?: any;
    env?: Record<string, string | boolean | number>;
    envSignature?: string;
    rows: IRawRecord[];
}
declare class FlatfileRecord<M extends TRecordDataWithLinks = TRecordDataWithLinks> {
    private readonly data;
    private readonly metadata;
    private readonly mutated;
    private readonly _rowId;
    private _info;
    constructor(raw: IRawRecord);
    get rowId(): string | number;
    get originalValue(): M;
    get value(): M;
    private verifyField;
    private isLinkedField;
    set(field: string, value: TPrimitive): this | undefined;
    setMetadata(data: Object): this;
    setLinkedValue(linkedFieldKey: string, childKey: string, value: TPrimitive): this;
    get(field: string): null | TPrimitive;
    getMetadata(): Object;
    getLinks(field: string): any;
    getLinkedValue(linkedFieldKey: string, childKey: string): string | number | boolean | {
        value: TPrimitive;
        links: TRecordData<TPrimitive>[];
    } | null;
    addInfo(fields: string | string[], message: string): this;
    /**
     * @alias addInfo
     */
    addComment(fields: string | string[], message: string): this;
    addError(fields: string | string[], message: string): this;
    addWarning(fields: string | string[], message: string): this;
    pushInfoMessage(fields: string | string[], message: string, level: IRecordInfo['level'], stage: TRecordStageLevel): this;
    compute(field: string, transformation: (value: TPrimitive, record: FlatfileRecord<M>) => TPrimitive, message?: string): this;
    computeIfPresent(field: string, transformation: (value: TPrimitive, record: FlatfileRecord<M>) => TPrimitive, message?: string): this;
    validate(field: string, validator: (value: TPrimitive, record: FlatfileRecord<M>) => boolean, message: string): this;
    toJSON(): IRawRecordWithInfo<M>;
}

declare class FlatfileRecords<M extends TRecordDataWithLinks> {
    private readonly _records;
    constructor(rawRecords: IRawRecord[]);
    get records(): FlatfileRecord<M>[];
    toJSON(): IRawRecordWithInfo<M>[];
}

declare class FlatfileSession {
    private payload;
    constructor(payload: IPayload);
    get workspaceId(): string;
    get workbookId(): string;
    get schemaId(): number;
    get schemaSlug(): string;
    get uploads(): string[];
    get endUser(): any;
    get rows(): IRawRecord[];
    get env(): Record<string, string | number | boolean> | undefined;
    get envSignature(): string | undefined;
}

export { FlatfileRecord, FlatfileRecords, FlatfileSession, IPayload, IRawRecord, IRawRecordWithInfo, IRecordInfo, TPrimitive, TRecordData, TRecordDataWithLinks, TRecordInfoLevel, TRecordStageLevel };
