/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Records {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Records {
    protected readonly _options: Records.Options;
    constructor(_options: Records.Options);
    /**
     * Returns records from a sheet in a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    get(sheetId: Flatfile.SheetId, request?: Flatfile.GetRecordsRequest, requestOptions?: Records.RequestOptions): Promise<Flatfile.GetRecordsResponse>;
    /**
     * Updates existing records in a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    update(sheetId: Flatfile.SheetId, request: Flatfile.Records, requestOptions?: Records.RequestOptions): Promise<Flatfile.VersionResponse>;
    /**
     * Adds records to a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    insert(sheetId: Flatfile.SheetId, request: Flatfile.RecordData[], requestOptions?: Records.RequestOptions): Promise<Flatfile.RecordsResponse>;
    /**
     * Deletes records from a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(sheetId: Flatfile.SheetId, request?: Flatfile.DeleteRecordsRequest, requestOptions?: Records.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Searches for the given searchValue in a field and replaces all instances of that value with replaceValue
     */
    findAndReplaceDeprecated(sheetId: Flatfile.SheetId, request: Flatfile.FindAndReplaceRecordRequestDeprecated, requestOptions?: Records.RequestOptions): Promise<Flatfile.RecordsResponse>;
    /**
     * Searches for all values that match the 'find' value (globally or for a specific field via 'fieldKey') and replaces them with the 'replace' value. Wrap 'find' value in double quotes for exact match (""). Returns a versionId for the updated records
     */
    findAndReplace(sheetId: Flatfile.SheetId, request: Flatfile.FindAndReplaceRecordRequest, requestOptions?: Records.RequestOptions): Promise<Flatfile.VersionResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
