/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Sheets {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
}
export declare class Sheets {
    protected readonly options: Sheets.Options;
    constructor(options: Sheets.Options);
    /**
     * Returns sheets in a workbook
     */
    list(request: Flatfile.ListSheetsRequest): Promise<Flatfile.ListSheetsResponse>;
    /**
     * Returns a sheet in a workbook
     */
    get(sheetId: Flatfile.SheetId): Promise<Flatfile.SheetResponse>;
    /**
     * Deletes a specific sheet from a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(sheetId: Flatfile.SheetId): Promise<Flatfile.Success>;
    /**
     * Trigger data hooks and validation to run on a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    validate(sheetId: Flatfile.SheetId): Promise<Flatfile.Success>;
    /**
     * Returns records from a sheet in a workbook as a csv file
     */
    getRecordsAsCsv(sheetId: Flatfile.SheetId, request?: Flatfile.GetRecordsCsvRequest): Promise<string>;
    /**
     * Returns counts of records from a sheet
     */
    getRecordCounts(sheetId: Flatfile.SheetId, request?: Flatfile.GetRecordCountsRequest): Promise<Flatfile.RecordCountsResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
