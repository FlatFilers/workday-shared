/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
import * as stream from "stream";
export declare namespace Sheets {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class Sheets {
    protected readonly _options: Sheets.Options;
    constructor(_options: Sheets.Options);
    /**
     * Returns sheets in a workbook
     */
    list(request: Flatfile.ListSheetsRequest, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.ListSheetsResponse>;
    /**
     * Returns a sheet in a workbook
     */
    get(sheetId: Flatfile.SheetId, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.SheetResponse>;
    /**
     * Deletes a specific sheet from a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(sheetId: Flatfile.SheetId, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Trigger data hooks and validation to run on a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    validate(sheetId: Flatfile.SheetId, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Returns records from a sheet in a workbook as a csv file
     */
    getRecordsAsCsv(sheetId: Flatfile.SheetId, request?: Flatfile.GetRecordsCsvRequest, requestOptions?: Sheets.RequestOptions): Promise<stream.Readable>;
    /**
     * Returns counts of records from a sheet
     */
    getRecordCounts(sheetId: Flatfile.SheetId, request?: Flatfile.GetRecordCountsRequest, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.RecordCountsResponse>;
    /**
     * Creates a snapshot of a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    createSnapshot(sheetId: Flatfile.SheetId, request?: Flatfile.CreateSnapshotRequest, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.SnapshotResponse>;
    /**
     * List all snapshots of a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    listSnapshots(sheetId: Flatfile.SheetId, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.SnapshotsResponse>;
    /**
     * Adds a new field to a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    addField(sheetId: Flatfile.SheetId, request: Flatfile.Property, requestOptions?: Sheets.RequestOptions): Promise<Flatfile.FieldConfigResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
