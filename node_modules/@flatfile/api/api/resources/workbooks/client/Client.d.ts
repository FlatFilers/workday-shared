/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Workbooks {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Workbooks {
    protected readonly _options: Workbooks.Options;
    constructor(_options: Workbooks.Options);
    /**
     * Returns all workbooks matching a filter for an account or space
     * @throws {@link Flatfile.BadRequestError}
     */
    list(request?: Flatfile.ListWorkbooksRequest, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.ListWorkbooksResponse>;
    /**
     * Creates a workbook and adds it to a space
     * @throws {@link Flatfile.BadRequestError}
     */
    create(request: Flatfile.CreateWorkbookConfig, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.WorkbookResponse>;
    /**
     * Returns a single workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    get(workbookId: Flatfile.WorkbookId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.WorkbookResponse>;
    /**
     * Deletes a workbook and all of its record data permanently
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(workbookId: Flatfile.WorkbookId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Updates a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    update(workbookId: Flatfile.WorkbookId, request: Flatfile.WorkbookUpdate, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.WorkbookResponse>;
    /**
     * Clones a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    clone(workbookId: Flatfile.WorkbookId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.WorkbookResponse>;
    /**
     * Returns sheets from a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    getSheetsDeprecated(workbookId: Flatfile.WorkbookId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.ListSheetsResponse>;
    /**
     * Rebuild a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    rebuildWorkbook(workbookId: Flatfile.WorkbookId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Returns records from a sheet in a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    getRecordsDeprecated(workbookId: Flatfile.WorkbookId, sheetId: Flatfile.SheetId, request?: Flatfile.ListRecordsRequest, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.RecordsResponse>;
    /**
     * Updates existing records in a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    updateRecordsDeprecated(workbookId: Flatfile.WorkbookId, sheetId: Flatfile.SheetId, request: Flatfile.Records, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.VersionResponse>;
    /**
     * Adds records to a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    addRecordsDeprecated(workbookId: Flatfile.WorkbookId, sheetId: Flatfile.SheetId, request: Flatfile.RecordData[], requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.RecordsResponse>;
    /**
     * Deletes records from a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    deleteRecordsDeprecated(workbookId: Flatfile.WorkbookId, sheetId: Flatfile.SheetId, request?: Flatfile.DeleteRecordsRequestDeprecated, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Trigger data hooks and validation to run on a sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    validateSheetDeprecated(workbookId: Flatfile.WorkbookId, sheetId: Flatfile.SheetId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Creates a new version of a workbook sheet
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    createVersionDeprecated(workbookId: Flatfile.WorkbookId, sheetId: Flatfile.SheetId, requestOptions?: Workbooks.RequestOptions): Promise<Flatfile.VersionResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
