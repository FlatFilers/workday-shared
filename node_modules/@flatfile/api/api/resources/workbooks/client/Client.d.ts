/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Workbooks {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
}
export declare class Workbooks {
    protected readonly options: Workbooks.Options;
    constructor(options: Workbooks.Options);
    /**
     * Returns all workbooks matching a filter for an account or space
     */
    list(request?: Flatfile.ListWorkbooksRequest): Promise<Flatfile.ListWorkbooksResponse>;
    /**
     * Creates a workbook and adds it to a space
     */
    create(request: Flatfile.CreateWorkbookConfig): Promise<Flatfile.WorkbookResponse>;
    /**
     * Returns a single workbook
     */
    get(workbookId: Flatfile.WorkbookId): Promise<Flatfile.WorkbookResponse>;
    /**
     * Delete a workbook
     */
    delete(workbookId: Flatfile.WorkbookId): Promise<Flatfile.Success>;
    /**
     * Updates a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    update(workbookId: Flatfile.WorkbookId, request: Flatfile.UpdateWorkbookConfig): Promise<Flatfile.WorkbookResponse>;
    /**
     * Clones a workbook
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    clone(workbookId: Flatfile.WorkbookId): Promise<Flatfile.WorkbookResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
