/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Environments {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
}
export declare class Environments {
    protected readonly options: Environments.Options;
    constructor(options: Environments.Options);
    /**
     * Get all environments
     */
    list(request?: Flatfile.ListEnvironmentsRequest): Promise<Flatfile.ListEnvironmentsResponse>;
    /**
     * Create a new environment
     */
    create(request: Flatfile.EnvironmentConfig): Promise<Flatfile.EnvironmentResponse>;
    /**
     * Returns a single environment
     */
    get(environmentId: string): Promise<Flatfile.Environment>;
    /**
     * Updates a single environment, to change the name for example
     */
    update(environmentId: string, request: Flatfile.EnvironmentConfig): Promise<Flatfile.Environment>;
    /**
     * Deletes a single environment
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(environmentId: string): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string>;
}
