"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jobs = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const url_search_params_1 = __importDefault(require("@ungap/url-search-params"));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("../../../../serialization"));
const errors = __importStar(require("../../../../errors"));
class Jobs {
    constructor(options) {
        this.options = options;
    }
    list(request = {}) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { environmentId, spaceId, workbookId, fileId, pageSize, pageNumber, sortDirection } = request;
            const _queryParams = new url_search_params_1.default();
            if (environmentId != null) {
                _queryParams.append("environmentId", environmentId);
            }
            if (spaceId != null) {
                _queryParams.append("spaceId", spaceId);
            }
            if (workbookId != null) {
                _queryParams.append("workbookId", workbookId);
            }
            if (fileId != null) {
                _queryParams.append("fileId", fileId);
            }
            if (pageSize != null) {
                _queryParams.append("pageSize", pageSize.toString());
            }
            if (pageNumber != null) {
                _queryParams.append("pageNumber", pageNumber.toString());
            }
            if (sortDirection != null) {
                _queryParams.append("sortDirection", sortDirection);
            }
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, "/jobs"),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.ListJobsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    create(request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, "/jobs"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                body: yield serializers.JobConfig.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.JobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    get(jobId) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${yield serializers.JobId.jsonOrThrow(jobId)}`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.JobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    update(jobId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${yield serializers.JobId.jsonOrThrow(jobId)}`),
                method: "PATCH",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                body: yield serializers.JobUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.JobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    delete(jobId) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${yield serializers.JobId.jsonOrThrow(jobId)}`),
                method: "DELETE",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Execute a job and return the job
     */
    execute(jobId) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${jobId}/execute`),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Returns a single job's execution plan
     */
    getExecutionPlan(jobId) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${yield serializers.JobId.jsonOrThrow(jobId)}/plan`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.JobPlan.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Update a job's entire execution plan
     */
    updateExecutionPlan(jobId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${yield serializers.JobId.jsonOrThrow(jobId)}/plan`),
                method: "PUT",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                body: yield serializers.JobExecutionPlanConfig.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.JobPlan.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Update a one or more individual fields on a job's execution plan
     */
    updateExecutionPlanFields(jobId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${jobId}/plan`),
                method: "PATCH",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                body: yield serializers.JobExecutionPlanConfig.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.JobPlan.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Acknowledge a job and return the job
     */
    ack(jobId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${yield serializers.JobId.jsonOrThrow(jobId)}/ack`),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                body: request != null
                    ? yield serializers.jobs.ack.Request.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" })
                    : undefined,
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.Job.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Acknowledge a job outcome and return the job
     */
    ackOutcome(jobId) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${yield serializers.JobId.jsonOrThrow(jobId)}/ack-outcome`),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.Job.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Complete a job and return the job
     */
    complete(jobId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${yield serializers.JobId.jsonOrThrow(jobId)}/complete`),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                body: request != null
                    ? yield serializers.jobs.complete.Request.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" })
                    : undefined,
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.Job.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Fail a job and return the job
     */
    fail(jobId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/jobs/${yield serializers.JobId.jsonOrThrow(jobId)}/fail`),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.0",
                },
                contentType: "application/json",
                body: request != null
                    ? yield serializers.jobs.fail.Request.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" })
                    : undefined,
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.Job.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            return `Bearer ${yield core.Supplier.get(this.options.token)}`;
        });
    }
}
exports.Jobs = Jobs;
