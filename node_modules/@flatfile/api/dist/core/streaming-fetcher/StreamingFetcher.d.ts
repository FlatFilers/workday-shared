/// <reference types="node" />
import { AxiosAdapter } from "axios";
import { Readable } from "stream";
export declare type StreamingFetchFunction = (args: StreamingFetcher.Args) => Promise<StreamingFetcher.Response>;
export declare namespace StreamingFetcher {
    interface Args {
        url: string;
        method: string;
        headers?: Record<string, string | undefined>;
        queryParameters?: Record<string, string>;
        body?: unknown;
        timeoutMs?: number;
        withCredentials?: boolean;
        adapter?: AxiosAdapter;
        onUploadProgress?: (event: ProgressEvent) => void;
        onDownloadProgress?: (event: ProgressEvent) => void;
        onData?: (data: unknown) => void;
        onError?: (err: unknown) => void;
        onFinish?: () => void;
        abortController?: AbortController;
        responseChunkPrefix?: string;
        terminator?: string;
    }
    interface Response {
        data: Readable;
        headers: Record<string, any>;
    }
}
export declare const streamingFetcher: StreamingFetchFunction;
