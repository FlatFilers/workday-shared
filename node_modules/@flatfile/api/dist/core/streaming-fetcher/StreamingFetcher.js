"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamingFetcher = void 0;
const axios_1 = __importDefault(require("axios"));
const streamingFetcher = (args) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const headers = {};
    if (args.body !== undefined) {
        headers["Content-Type"] = "application/json";
    }
    if (args.headers != null) {
        for (const [key, value] of Object.entries(args.headers)) {
            if (value != null) {
                headers[key] = value;
            }
        }
    }
    let response;
    try {
        response = yield (0, axios_1.default)({
            url: args.url,
            params: args.queryParameters,
            method: args.method,
            headers,
            data: args.body,
            timeout: args.timeoutMs,
            transitional: {
                clarifyTimeoutError: true,
            },
            withCredentials: args.withCredentials,
            maxBodyLength: Infinity,
            maxContentLength: Infinity,
            onUploadProgress: args.onUploadProgress,
            onDownloadProgress: args.onDownloadProgress,
            signal: (_a = args.abortController) === null || _a === void 0 ? void 0 : _a.signal,
            responseType: "stream",
            adapter: args.adapter,
        });
    }
    catch (error) {
        (_b = args.onError) === null || _b === void 0 ? void 0 : _b.call(args, error);
        return;
    }
    if (args.onData != null) {
        const { onData } = args;
        response.data.on("data", (data) => {
            var _a;
            for (const line of data.toString().split("\n")) {
                let data = line;
                if (args.responseChunkPrefix != null) {
                    if (!data.startsWith(args.responseChunkPrefix)) {
                        continue;
                    }
                    data = data.substring(args.responseChunkPrefix.length);
                }
                try {
                    const parsed = JSON.parse(data);
                    onData(parsed);
                }
                catch (error) {
                    (_a = args.onError) === null || _a === void 0 ? void 0 : _a.call(args, error);
                }
            }
        });
    }
    if (args.onFinish != null) {
        response.data.on("end", args.onFinish);
    }
    return response.data;
});
exports.streamingFetcher = streamingFetcher;
