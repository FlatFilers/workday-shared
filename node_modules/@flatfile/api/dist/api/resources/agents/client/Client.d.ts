/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Agents {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
}
export declare class Agents {
    protected readonly options: Agents.Options;
    constructor(options: Agents.Options);
    list(request: Flatfile.ListAgentsRequest): Promise<Flatfile.ListAgentsResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     */
    create(request: Flatfile.CreateAgentsRequest): Promise<Flatfile.AgentResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    get(agentId: Flatfile.AgentId, request: Flatfile.GetAgentRequest): Promise<Flatfile.AgentResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    getAgentLogs(agentId: Flatfile.AgentId, request: Flatfile.GetAgentLogsRequest): Promise<Flatfile.GetAgentLogsResponse>;
    /**
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    getEnvironmentAgentLogs(request: Flatfile.GetEnvironmentAgentLogsRequest): Promise<Flatfile.GetAgentLogsResponse>;
    /**
     * Deletes a single agent
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(agentId: Flatfile.AgentId): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string>;
}
