/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Users {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class Users {
    protected readonly _options: Users.Options;
    constructor(_options: Users.Options);
    /**
     * Gets a list of users
     */
    list(request?: Flatfile.ListUsersRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.ListUsersResponse>;
    /**
     * A user is a privileged user that logs in with a username and password.
     */
    create(request: Flatfile.UserConfig, requestOptions?: Users.RequestOptions): Promise<Flatfile.UserResponse>;
    /**
     * Gets a user
     */
    get(userId: Flatfile.UserId, requestOptions?: Users.RequestOptions): Promise<Flatfile.UserResponse>;
    /**
     * Gets all the api tokens for a user.
     */
    listApiTokens(userId: Flatfile.UserId, request: Flatfile.ListApiTokensRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.ListApiTokensResponse>;
    /**
     * Creates an api token for authenticating against Flatfile APIs.
     */
    createApiToken(userId: Flatfile.UserId, request: Flatfile.CreateApiTokenRequest, requestOptions?: Users.RequestOptions): Promise<void>;
    /**
     * Exchange an invitation for an access token
     */
    exchangeToken(request?: Flatfile.ExchangeTokenRequest, requestOptions?: Users.RequestOptions): Promise<Flatfile.ExchangeTokenResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
