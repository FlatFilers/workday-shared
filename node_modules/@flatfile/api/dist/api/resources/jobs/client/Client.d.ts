/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Jobs {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class Jobs {
    protected readonly _options: Jobs.Options;
    constructor(_options: Jobs.Options);
    list(request?: Flatfile.ListJobsRequest, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.ListJobsResponse>;
    create(request: Flatfile.JobConfig, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    get(jobId: Flatfile.JobId, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    update(jobId: Flatfile.JobId, request: Flatfile.JobUpdate, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    delete(jobId: Flatfile.JobId, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Execute a job and return the job
     */
    execute(jobId: string, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Returns a single job's execution plan
     */
    getExecutionPlan(jobId: Flatfile.JobId, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobPlanResponse>;
    /**
     * Update a job's entire execution plan
     */
    updateExecutionPlan(jobId: Flatfile.JobId, request: Flatfile.JobExecutionPlanRequest, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobPlanResponse>;
    /**
     * Update one or more individual fields on a job's execution plan
     */
    updateExecutionPlanFields(jobId: string, request: Flatfile.JobExecutionPlanConfigRequest, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobPlanResponse>;
    /**
     * Acknowledge a job and return the job
     */
    ack(jobId: Flatfile.JobId, request?: Flatfile.JobAckDetails, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Acknowledge a job outcome and return the job
     */
    ackOutcome(jobId: Flatfile.JobId, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Complete a job and return the job
     */
    complete(jobId: Flatfile.JobId, request?: Flatfile.JobOutcome, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Fail a job and return the job
     */
    fail(jobId: Flatfile.JobId, request?: Flatfile.JobOutcome, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    /**
     * Cancel a job and return the job
     */
    cancel(jobId: Flatfile.JobId, request?: Flatfile.JobCancelDetails, requestOptions?: Jobs.RequestOptions): Promise<Flatfile.JobResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
