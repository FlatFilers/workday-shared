/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Spaces {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Spaces {
    protected readonly _options: Spaces.Options;
    constructor(_options: Spaces.Options);
    /**
     * Returns all spaces for an account or environment
     * @throws {@link Flatfile.BadRequestError}
     */
    list(request?: Flatfile.ListSpacesRequest, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.ListSpacesResponse>;
    /**
     * Creates a new space based on an existing Space Config
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    create(request: Flatfile.SpaceConfig, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.SpaceResponse>;
    /**
     * Returns a single space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    get(spaceId: Flatfile.SpaceId, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.SpaceResponse>;
    /**
     * Delete a space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    delete(spaceId: Flatfile.SpaceId, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.Success>;
    /**
     * Update a space, to change the name for example
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    update(spaceId: Flatfile.SpaceId, request: Flatfile.SpaceConfig, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.SpaceResponse>;
    /**
     * Sets archivedAt timestamp on a space
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    archiveSpace(spaceId: Flatfile.SpaceId, requestOptions?: Spaces.RequestOptions): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string>;
}
