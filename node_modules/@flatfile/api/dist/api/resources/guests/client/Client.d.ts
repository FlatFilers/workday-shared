/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Guests {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
}
export declare class Guests {
    protected readonly options: Guests.Options;
    constructor(options: Guests.Options);
    /**
     * Returns all guests
     */
    list(request: Flatfile.ListGuestsRequest): Promise<Flatfile.ListGuestsResponse>;
    /**
     * Guests are only there to upload, edit, and download files and perform their tasks in a specific Space.
     */
    create(request: Flatfile.GuestConfig[]): Promise<Flatfile.CreateGuestResponse>;
    /**
     * Returns a single guest
     */
    get(guestId: Flatfile.GuestId): Promise<Flatfile.Guest>;
    /**
     * Deletes a single guest
     */
    delete(guestId: Flatfile.GuestId): Promise<Flatfile.Success>;
    /**
     * Updates a single guest, for example to change name or email
     */
    update(guestId: Flatfile.GuestId, request: Flatfile.GuestConfig): Promise<Flatfile.Guest>;
    /**
     * Guests can be created as a named guest on the Space or thereâ€™s a global link that will let anonymous guests into the space.
     */
    invite(request: Flatfile.Invite[]): Promise<Flatfile.Success>;
    protected _getAuthorizationHeader(): Promise<string>;
}
