"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Records = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const url_search_params_1 = __importDefault(require("@ungap/url-search-params"));
const serializers = __importStar(require("../../../../serialization"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors"));
class Records {
    constructor(options) {
        this.options = options;
    }
    /**
     * Returns records from a sheet in a workbook
     */
    get(sheetId, request = {}) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { versionId, untilVersionId, sinceVersionId, sortField, sortDirection, filter, filterField, searchValue, searchField, ids, pageSize, pageNumber, includeCounts, includeLinks, includeLMessages, for: for_, q, } = request;
            const _queryParams = new url_search_params_1.default();
            if (versionId != null) {
                _queryParams.append("versionId", versionId);
            }
            if (untilVersionId != null) {
                _queryParams.append("untilVersionId", untilVersionId);
            }
            if (sinceVersionId != null) {
                _queryParams.append("sinceVersionId", sinceVersionId);
            }
            if (sortField != null) {
                _queryParams.append("sortField", sortField);
            }
            if (sortDirection != null) {
                _queryParams.append("sortDirection", sortDirection);
            }
            if (filter != null) {
                _queryParams.append("filter", filter);
            }
            if (filterField != null) {
                _queryParams.append("filterField", filterField);
            }
            if (searchValue != null) {
                _queryParams.append("searchValue", searchValue);
            }
            if (searchField != null) {
                _queryParams.append("searchField", searchField);
            }
            if (ids != null) {
                if (Array.isArray(ids)) {
                    for (const _item of ids) {
                        _queryParams.append("ids", _item);
                    }
                }
                else {
                    _queryParams.append("ids", ids);
                }
            }
            if (pageSize != null) {
                _queryParams.append("pageSize", pageSize.toString());
            }
            if (pageNumber != null) {
                _queryParams.append("pageNumber", pageNumber.toString());
            }
            if (includeCounts != null) {
                _queryParams.append("includeCounts", includeCounts.toString());
            }
            if (includeLinks != null) {
                _queryParams.append("includeLinks", includeLinks.toString());
            }
            if (includeLMessages != null) {
                _queryParams.append("includeLMessages", includeLMessages.toString());
            }
            if (for_ != null) {
                _queryParams.append("for", for_);
            }
            if (q != null) {
                _queryParams.append("q", q);
            }
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/sheets/${yield serializers.SheetId.jsonOrThrow(sheetId)}/records`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.11",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.RecordsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Updates existing records in a workbook sheet
     */
    update(sheetId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/sheets/${yield serializers.SheetId.jsonOrThrow(sheetId)}/records`),
                method: "PUT",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.11",
                },
                contentType: "application/json",
                body: yield serializers.Records.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.VersionResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Adds records to a workbook sheet
     */
    insert(sheetId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/sheets/${yield serializers.SheetId.jsonOrThrow(sheetId)}/records`),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.11",
                },
                contentType: "application/json",
                body: yield serializers.records.insert.Request.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.RecordsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Deletes records from a workbook sheet
     */
    delete(sheetId, request = {}) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { ids } = request;
            const _queryParams = new url_search_params_1.default();
            if (ids != null) {
                if (Array.isArray(ids)) {
                    for (const _item of ids) {
                        _queryParams.append("ids", _item);
                    }
                }
                else {
                    _queryParams.append("ids", ids);
                }
            }
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/sheets/${yield serializers.SheetId.jsonOrThrow(sheetId)}/records`),
                method: "DELETE",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.11",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Searches for the given value in a field and returns the records that match the search criteria
     */
    find(sheetId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { fieldKey, searchValue, pageSize, pageNumber } = request;
            const _queryParams = new url_search_params_1.default();
            _queryParams.append("fieldKey", fieldKey);
            _queryParams.append("searchValue", searchValue);
            if (pageSize != null) {
                _queryParams.append("pageSize", pageSize.toString());
            }
            if (pageNumber != null) {
                _queryParams.append("pageNumber", pageNumber.toString());
            }
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/sheets/${yield serializers.SheetId.jsonOrThrow(sheetId)}/find`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.11",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.RecordsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Searches for the given searchValue in a field and replaces all instances of that value with replaceValue
     */
    findAndReplaceDeprecated(sheetId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { fieldKey, searchValue, filter, pageSize, pageNumber } = request, _body = __rest(request, ["fieldKey", "searchValue", "filter", "pageSize", "pageNumber"]);
            const _queryParams = new url_search_params_1.default();
            _queryParams.append("fieldKey", fieldKey);
            _queryParams.append("searchValue", searchValue);
            if (filter != null) {
                _queryParams.append("filter", filter);
            }
            if (pageSize != null) {
                _queryParams.append("pageSize", pageSize.toString());
            }
            if (pageNumber != null) {
                _queryParams.append("pageNumber", pageNumber.toString());
            }
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/sheets/${yield serializers.SheetId.jsonOrThrow(sheetId)}/replace`),
                method: "PUT",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.11",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                body: yield serializers.FindAndReplaceRecordRequestDeprecated.jsonOrThrow(_body, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.RecordsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Searches for all values that match the 'find' value (globally or for a specific field via 'fieldKey') and replaces them with the 'replace' value. Wrap 'find' value in double quotes for exact match (""). Returns a versionId for the updated records
     */
    findAndReplace(sheetId, request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { filter, filterField, searchValue, searchField, ids } = request, _body = __rest(request, ["filter", "filterField", "searchValue", "searchField", "ids"]);
            const _queryParams = new url_search_params_1.default();
            if (filter != null) {
                _queryParams.append("filter", filter);
            }
            if (filterField != null) {
                _queryParams.append("filterField", filterField);
            }
            if (searchValue != null) {
                _queryParams.append("searchValue", searchValue);
            }
            if (searchField != null) {
                _queryParams.append("searchField", searchField);
            }
            if (ids != null) {
                if (Array.isArray(ids)) {
                    for (const _item of ids) {
                        _queryParams.append("ids", _item);
                    }
                }
                else {
                    _queryParams.append("ids", ids);
                }
            }
            const _response = yield ((_a = this.options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_b = (yield core.Supplier.get(this.options.environment))) !== null && _b !== void 0 ? _b : environments.FlatfileEnvironment.Production, `/sheets/${yield serializers.SheetId.jsonOrThrow(sheetId)}/find-replace`),
                method: "PUT",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Disable-Hooks": "true",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@flatfile/api",
                    "X-Fern-SDK-Version": "1.5.11",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                body: yield serializers.FindAndReplaceRecordRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: 60000,
            });
            if (_response.ok) {
                return yield serializers.VersionResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.FlatfileTimeoutError();
                case "unknown":
                    throw new errors.FlatfileError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            return `Bearer ${yield core.Supplier.get(this.options.token)}`;
        });
    }
}
exports.Records = Records;
