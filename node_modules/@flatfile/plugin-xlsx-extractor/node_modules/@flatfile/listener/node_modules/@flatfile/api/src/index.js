"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// build/index.ts
var build_exports = {};
__export(build_exports, {
  AccessTokenFromJSON: () => AccessTokenFromJSON,
  AccessTokenFromJSONTyped: () => AccessTokenFromJSONTyped,
  AccessTokenResponseFromJSON: () => AccessTokenResponseFromJSON,
  AccessTokenResponseFromJSONTyped: () => AccessTokenResponseFromJSONTyped,
  AccessTokenResponseToJSON: () => AccessTokenResponseToJSON,
  AccessTokenToJSON: () => AccessTokenToJSON,
  ActionFromJSON: () => ActionFromJSON,
  ActionFromJSONTyped: () => ActionFromJSONTyped,
  ActionToJSON: () => ActionToJSON,
  AgentCompilerEnum: () => AgentCompilerEnum,
  AgentConfigCompilerEnum: () => AgentConfigCompilerEnum,
  AgentConfigFromJSON: () => AgentConfigFromJSON,
  AgentConfigFromJSONTyped: () => AgentConfigFromJSONTyped,
  AgentConfigToJSON: () => AgentConfigToJSON,
  AgentFromJSON: () => AgentFromJSON,
  AgentFromJSONTyped: () => AgentFromJSONTyped,
  AgentLogFromJSON: () => AgentLogFromJSON,
  AgentLogFromJSONTyped: () => AgentLogFromJSONTyped,
  AgentLogToJSON: () => AgentLogToJSON,
  AgentLogsResponseFromJSON: () => AgentLogsResponseFromJSON,
  AgentLogsResponseFromJSONTyped: () => AgentLogsResponseFromJSONTyped,
  AgentLogsResponseToJSON: () => AgentLogsResponseToJSON,
  AgentResponseFromJSON: () => AgentResponseFromJSON,
  AgentResponseFromJSONTyped: () => AgentResponseFromJSONTyped,
  AgentResponseToJSON: () => AgentResponseToJSON,
  AgentStatsFromJSON: () => AgentStatsFromJSON,
  AgentStatsFromJSONTyped: () => AgentStatsFromJSONTyped,
  AgentStatsToJSON: () => AgentStatsToJSON,
  AgentToJSON: () => AgentToJSON,
  AgentsResponseFromJSON: () => AgentsResponseFromJSON,
  AgentsResponseFromJSONTyped: () => AgentsResponseFromJSONTyped,
  AgentsResponseToJSON: () => AgentsResponseToJSON,
  ApiCredentialsFromJSON: () => ApiCredentialsFromJSON,
  ApiCredentialsFromJSONTyped: () => ApiCredentialsFromJSONTyped,
  ApiCredentialsToJSON: () => ApiCredentialsToJSON,
  ApiKeyFromJSON: () => ApiKeyFromJSON,
  ApiKeyFromJSONTyped: () => ApiKeyFromJSONTyped,
  ApiKeyOperationsInnerFromJSON: () => ApiKeyOperationsInnerFromJSON,
  ApiKeyOperationsInnerFromJSONTyped: () => ApiKeyOperationsInnerFromJSONTyped,
  ApiKeyOperationsInnerToJSON: () => ApiKeyOperationsInnerToJSON,
  ApiKeyToJSON: () => ApiKeyToJSON,
  ApiKeyTypeEnum: () => ApiKeyTypeEnum,
  ApiKeysResponseFromJSON: () => ApiKeysResponseFromJSON,
  ApiKeysResponseFromJSONTyped: () => ApiKeysResponseFromJSONTyped,
  ApiKeysResponseToJSON: () => ApiKeysResponseToJSON,
  ApiTokenFromJSON: () => ApiTokenFromJSON,
  ApiTokenFromJSONTyped: () => ApiTokenFromJSONTyped,
  ApiTokenResponseFromJSON: () => ApiTokenResponseFromJSON,
  ApiTokenResponseFromJSONTyped: () => ApiTokenResponseFromJSONTyped,
  ApiTokenResponseToJSON: () => ApiTokenResponseToJSON,
  ApiTokenToJSON: () => ApiTokenToJSON,
  ApiTokensResponseFromJSON: () => ApiTokensResponseFromJSON,
  ApiTokensResponseFromJSONTyped: () => ApiTokensResponseFromJSONTyped,
  ApiTokensResponseToJSON: () => ApiTokensResponseToJSON,
  AppVersionResponseFromJSON: () => AppVersionResponseFromJSON,
  AppVersionResponseFromJSONTyped: () => AppVersionResponseFromJSONTyped,
  AppVersionResponseToJSON: () => AppVersionResponseToJSON,
  ArrayablePropertyFromJSON: () => ArrayablePropertyFromJSON,
  ArrayablePropertyFromJSONTyped: () => ArrayablePropertyFromJSONTyped,
  ArrayablePropertyToJSON: () => ArrayablePropertyToJSON,
  BASE_PATH: () => BASE_PATH,
  BaseAPI: () => BaseAPI,
  BaseConstraintFromJSON: () => BaseConstraintFromJSON,
  BaseConstraintFromJSONTyped: () => BaseConstraintFromJSONTyped,
  BaseConstraintToJSON: () => BaseConstraintToJSON,
  BaseConstraintTypeEnum: () => BaseConstraintTypeEnum,
  BasePropertyFromJSON: () => BasePropertyFromJSON,
  BasePropertyFromJSONTyped: () => BasePropertyFromJSONTyped,
  BasePropertyToJSON: () => BasePropertyToJSON,
  BasePropertyTypeEnum: () => BasePropertyTypeEnum,
  BaseSideBarConfigFromJSON: () => BaseSideBarConfigFromJSON,
  BaseSideBarConfigFromJSONTyped: () => BaseSideBarConfigFromJSONTyped,
  BaseSideBarConfigToJSON: () => BaseSideBarConfigToJSON,
  BaseSideBarConfigTypeEnum: () => BaseSideBarConfigTypeEnum,
  BlobApiResponse: () => BlobApiResponse,
  BlueprintFromJSON: () => BlueprintFromJSON,
  BlueprintFromJSONTyped: () => BlueprintFromJSONTyped,
  BlueprintToJSON: () => BlueprintToJSON,
  BooleanPropertyAllOfConfigFromJSON: () => BooleanPropertyAllOfConfigFromJSON,
  BooleanPropertyAllOfConfigFromJSONTyped: () => BooleanPropertyAllOfConfigFromJSONTyped,
  BooleanPropertyAllOfConfigToJSON: () => BooleanPropertyAllOfConfigToJSON,
  BooleanPropertyAllOfFromJSON: () => BooleanPropertyAllOfFromJSON,
  BooleanPropertyAllOfFromJSONTyped: () => BooleanPropertyAllOfFromJSONTyped,
  BooleanPropertyAllOfToJSON: () => BooleanPropertyAllOfToJSON,
  BooleanPropertyAllOfTypeEnum: () => BooleanPropertyAllOfTypeEnum,
  BooleanPropertyFromJSON: () => BooleanPropertyFromJSON,
  BooleanPropertyFromJSONTyped: () => BooleanPropertyFromJSONTyped,
  BooleanPropertyToJSON: () => BooleanPropertyToJSON,
  BooleanPropertyTypeEnum: () => BooleanPropertyTypeEnum,
  COLLECTION_FORMATS: () => COLLECTION_FORMATS,
  CellValueFromJSON: () => CellValueFromJSON,
  CellValueFromJSONTyped: () => CellValueFromJSONTyped,
  CellValueToJSON: () => CellValueToJSON,
  CellValueValueFromJSON: () => CellValueValueFromJSON,
  CellValueValueFromJSONTyped: () => CellValueValueFromJSONTyped,
  CellValueValueToJSON: () => CellValueValueToJSON,
  CellValueWithCountsFromJSON: () => CellValueWithCountsFromJSON,
  CellValueWithCountsFromJSONTyped: () => CellValueWithCountsFromJSONTyped,
  CellValueWithCountsToJSON: () => CellValueWithCountsToJSON,
  CellValueWithLinksFromJSON: () => CellValueWithLinksFromJSON,
  CellValueWithLinksFromJSONTyped: () => CellValueWithLinksFromJSONTyped,
  CellValueWithLinksToJSON: () => CellValueWithLinksToJSON,
  CellsResponseDataFromJSON: () => CellsResponseDataFromJSON,
  CellsResponseDataFromJSONTyped: () => CellsResponseDataFromJSONTyped,
  CellsResponseDataToJSON: () => CellsResponseDataToJSON,
  CellsResponseFromJSON: () => CellsResponseFromJSON,
  CellsResponseFromJSONTyped: () => CellsResponseFromJSONTyped,
  CellsResponseToJSON: () => CellsResponseToJSON,
  ComputedConstraintAllOfFromJSON: () => ComputedConstraintAllOfFromJSON,
  ComputedConstraintAllOfFromJSONTyped: () => ComputedConstraintAllOfFromJSONTyped,
  ComputedConstraintAllOfToJSON: () => ComputedConstraintAllOfToJSON,
  ComputedConstraintAllOfTypeEnum: () => ComputedConstraintAllOfTypeEnum,
  ComputedConstraintFromJSON: () => ComputedConstraintFromJSON,
  ComputedConstraintFromJSONTyped: () => ComputedConstraintFromJSONTyped,
  ComputedConstraintToJSON: () => ComputedConstraintToJSON,
  ComputedConstraintTypeEnum: () => ComputedConstraintTypeEnum,
  Configuration: () => Configuration,
  ConstraintFromJSON: () => ConstraintFromJSON,
  ConstraintFromJSONTyped: () => ConstraintFromJSONTyped,
  ConstraintToJSON: () => ConstraintToJSON,
  CreateAccessTokenRequestFromJSON: () => CreateAccessTokenRequestFromJSON,
  CreateAccessTokenRequestFromJSONTyped: () => CreateAccessTokenRequestFromJSONTyped,
  CreateAccessTokenRequestToJSON: () => CreateAccessTokenRequestToJSON,
  CreateFileRequestFromJSON: () => CreateFileRequestFromJSON,
  CreateFileRequestFromJSONTyped: () => CreateFileRequestFromJSONTyped,
  CreateFileRequestToJSON: () => CreateFileRequestToJSON,
  DatePropertyAllOfFromJSON: () => DatePropertyAllOfFromJSON,
  DatePropertyAllOfFromJSONTyped: () => DatePropertyAllOfFromJSONTyped,
  DatePropertyAllOfToJSON: () => DatePropertyAllOfToJSON,
  DatePropertyAllOfTypeEnum: () => DatePropertyAllOfTypeEnum,
  DatePropertyFromJSON: () => DatePropertyFromJSON,
  DatePropertyFromJSONTyped: () => DatePropertyFromJSONTyped,
  DatePropertyToJSON: () => DatePropertyToJSON,
  DatePropertyTypeEnum: () => DatePropertyTypeEnum,
  DefaultApi: () => DefaultApi,
  DefaultConfig: () => DefaultConfig,
  DeleteJobConfigFromJSON: () => DeleteJobConfigFromJSON,
  DeleteJobConfigFromJSONTyped: () => DeleteJobConfigFromJSONTyped,
  DeleteJobConfigToJSON: () => DeleteJobConfigToJSON,
  DestinationFieldFromJSON: () => DestinationFieldFromJSON,
  DestinationFieldFromJSONTyped: () => DestinationFieldFromJSONTyped,
  DestinationFieldToJSON: () => DestinationFieldToJSON,
  DocumentConfigFromJSON: () => DocumentConfigFromJSON,
  DocumentConfigFromJSONTyped: () => DocumentConfigFromJSONTyped,
  DocumentConfigToJSON: () => DocumentConfigToJSON,
  DocumentFromJSON: () => DocumentFromJSON,
  DocumentFromJSONTyped: () => DocumentFromJSONTyped,
  DocumentResponseFromJSON: () => DocumentResponseFromJSON,
  DocumentResponseFromJSONTyped: () => DocumentResponseFromJSONTyped,
  DocumentResponseToJSON: () => DocumentResponseToJSON,
  DocumentSidebarConfigAllOfFromJSON: () => DocumentSidebarConfigAllOfFromJSON,
  DocumentSidebarConfigAllOfFromJSONTyped: () => DocumentSidebarConfigAllOfFromJSONTyped,
  DocumentSidebarConfigAllOfToJSON: () => DocumentSidebarConfigAllOfToJSON,
  DocumentSidebarConfigFromJSON: () => DocumentSidebarConfigFromJSON,
  DocumentSidebarConfigFromJSONTyped: () => DocumentSidebarConfigFromJSONTyped,
  DocumentSidebarConfigToJSON: () => DocumentSidebarConfigToJSON,
  DocumentSidebarConfigTypeEnum: () => DocumentSidebarConfigTypeEnum,
  DocumentToJSON: () => DocumentToJSON,
  DocumentsResponseFromJSON: () => DocumentsResponseFromJSON,
  DocumentsResponseFromJSONTyped: () => DocumentsResponseFromJSONTyped,
  DocumentsResponseToJSON: () => DocumentsResponseToJSON,
  EdgeFromJSON: () => EdgeFromJSON,
  EdgeFromJSONTyped: () => EdgeFromJSONTyped,
  EdgeMetadataCertaintyEnum: () => EdgeMetadataCertaintyEnum,
  EdgeMetadataFromJSON: () => EdgeMetadataFromJSON,
  EdgeMetadataFromJSONTyped: () => EdgeMetadataFromJSONTyped,
  EdgeMetadataToJSON: () => EdgeMetadataToJSON,
  EdgeToJSON: () => EdgeToJSON,
  EnumDetails1FromJSON: () => EnumDetails1FromJSON,
  EnumDetails1FromJSONTyped: () => EnumDetails1FromJSONTyped,
  EnumDetails1ToJSON: () => EnumDetails1ToJSON,
  EnumDetailsFromJSON: () => EnumDetailsFromJSON,
  EnumDetailsFromJSONTyped: () => EnumDetailsFromJSONTyped,
  EnumDetailsToJSON: () => EnumDetailsToJSON,
  EnumMappingField1FromJSON: () => EnumMappingField1FromJSON,
  EnumMappingField1FromJSONTyped: () => EnumMappingField1FromJSONTyped,
  EnumMappingField1ToJSON: () => EnumMappingField1ToJSON,
  EnumMappingFieldFromJSON: () => EnumMappingFieldFromJSON,
  EnumMappingFieldFromJSONTyped: () => EnumMappingFieldFromJSONTyped,
  EnumMappingFieldToJSON: () => EnumMappingFieldToJSON,
  EnumPropertyAllOfConfigFromJSON: () => EnumPropertyAllOfConfigFromJSON,
  EnumPropertyAllOfConfigFromJSONTyped: () => EnumPropertyAllOfConfigFromJSONTyped,
  EnumPropertyAllOfConfigToJSON: () => EnumPropertyAllOfConfigToJSON,
  EnumPropertyAllOfFromJSON: () => EnumPropertyAllOfFromJSON,
  EnumPropertyAllOfFromJSONTyped: () => EnumPropertyAllOfFromJSONTyped,
  EnumPropertyAllOfToJSON: () => EnumPropertyAllOfToJSON,
  EnumPropertyAllOfTypeEnum: () => EnumPropertyAllOfTypeEnum,
  EnumPropertyFromJSON: () => EnumPropertyFromJSON,
  EnumPropertyFromJSONTyped: () => EnumPropertyFromJSONTyped,
  EnumPropertyOptionFromJSON: () => EnumPropertyOptionFromJSON,
  EnumPropertyOptionFromJSONTyped: () => EnumPropertyOptionFromJSONTyped,
  EnumPropertyOptionToJSON: () => EnumPropertyOptionToJSON,
  EnumPropertyOptionValueFromJSON: () => EnumPropertyOptionValueFromJSON,
  EnumPropertyOptionValueFromJSONTyped: () => EnumPropertyOptionValueFromJSONTyped,
  EnumPropertyOptionValueToJSON: () => EnumPropertyOptionValueToJSON,
  EnumPropertyToJSON: () => EnumPropertyToJSON,
  EnumPropertyTypeEnum: () => EnumPropertyTypeEnum,
  EnvironmentConfigFromJSON: () => EnvironmentConfigFromJSON,
  EnvironmentConfigFromJSONTyped: () => EnvironmentConfigFromJSONTyped,
  EnvironmentConfigToJSON: () => EnvironmentConfigToJSON,
  EnvironmentFromJSON: () => EnvironmentFromJSON,
  EnvironmentFromJSONTyped: () => EnvironmentFromJSONTyped,
  EnvironmentResponseFromJSON: () => EnvironmentResponseFromJSON,
  EnvironmentResponseFromJSONTyped: () => EnvironmentResponseFromJSONTyped,
  EnvironmentResponseToJSON: () => EnvironmentResponseToJSON,
  EnvironmentStatsResponseDataFromJSON: () => EnvironmentStatsResponseDataFromJSON,
  EnvironmentStatsResponseDataFromJSONTyped: () => EnvironmentStatsResponseDataFromJSONTyped,
  EnvironmentStatsResponseDataToJSON: () => EnvironmentStatsResponseDataToJSON,
  EnvironmentStatsResponseFromJSON: () => EnvironmentStatsResponseFromJSON,
  EnvironmentStatsResponseFromJSONTyped: () => EnvironmentStatsResponseFromJSONTyped,
  EnvironmentStatsResponseToJSON: () => EnvironmentStatsResponseToJSON,
  EnvironmentToJSON: () => EnvironmentToJSON,
  EnvironmentsResponseFromJSON: () => EnvironmentsResponseFromJSON,
  EnvironmentsResponseFromJSONTyped: () => EnvironmentsResponseFromJSONTyped,
  EnvironmentsResponseToJSON: () => EnvironmentsResponseToJSON,
  ErrorResponseErrorsInnerFromJSON: () => ErrorResponseErrorsInnerFromJSON,
  ErrorResponseErrorsInnerFromJSONTyped: () => ErrorResponseErrorsInnerFromJSONTyped,
  ErrorResponseErrorsInnerToJSON: () => ErrorResponseErrorsInnerToJSON,
  ErrorResponseFromJSON: () => ErrorResponseFromJSON,
  ErrorResponseFromJSONTyped: () => ErrorResponseFromJSONTyped,
  ErrorResponseToJSON: () => ErrorResponseToJSON,
  EventConfigAttributesFromJSON: () => EventConfigAttributesFromJSON,
  EventConfigAttributesFromJSONTyped: () => EventConfigAttributesFromJSONTyped,
  EventConfigAttributesProgressFromJSON: () => EventConfigAttributesProgressFromJSON,
  EventConfigAttributesProgressFromJSONTyped: () => EventConfigAttributesProgressFromJSONTyped,
  EventConfigAttributesProgressToJSON: () => EventConfigAttributesProgressToJSON,
  EventConfigAttributesToJSON: () => EventConfigAttributesToJSON,
  EventConfigContextActorIdFromJSON: () => EventConfigContextActorIdFromJSON,
  EventConfigContextActorIdFromJSONTyped: () => EventConfigContextActorIdFromJSONTyped,
  EventConfigContextActorIdToJSON: () => EventConfigContextActorIdToJSON,
  EventConfigContextFromJSON: () => EventConfigContextFromJSON,
  EventConfigContextFromJSONTyped: () => EventConfigContextFromJSONTyped,
  EventConfigContextToJSON: () => EventConfigContextToJSON,
  EventConfigDomainEnum: () => EventConfigDomainEnum,
  EventConfigFromJSON: () => EventConfigFromJSON,
  EventConfigFromJSONTyped: () => EventConfigFromJSONTyped,
  EventConfigToJSON: () => EventConfigToJSON,
  EventDomainEnum: () => EventDomainEnum,
  EventFromJSON: () => EventFromJSON,
  EventFromJSONTyped: () => EventFromJSONTyped,
  EventResponseFromJSON: () => EventResponseFromJSON,
  EventResponseFromJSONTyped: () => EventResponseFromJSONTyped,
  EventResponseToJSON: () => EventResponseToJSON,
  EventToJSON: () => EventToJSON,
  EventTokenFromJSON: () => EventTokenFromJSON,
  EventTokenFromJSONTyped: () => EventTokenFromJSONTyped,
  EventTokenResponseFromJSON: () => EventTokenResponseFromJSON,
  EventTokenResponseFromJSONTyped: () => EventTokenResponseFromJSONTyped,
  EventTokenResponseToJSON: () => EventTokenResponseToJSON,
  EventTokenToJSON: () => EventTokenToJSON,
  EventTopic: () => EventTopic,
  EventTopicFromJSON: () => EventTopicFromJSON,
  EventTopicFromJSONTyped: () => EventTopicFromJSONTyped,
  EventTopicToJSON: () => EventTopicToJSON,
  EventsResponseFromJSON: () => EventsResponseFromJSON,
  EventsResponseFromJSONTyped: () => EventsResponseFromJSONTyped,
  EventsResponseToJSON: () => EventsResponseToJSON,
  ExchangeInvitationRequestFromJSON: () => ExchangeInvitationRequestFromJSON,
  ExchangeInvitationRequestFromJSONTyped: () => ExchangeInvitationRequestFromJSONTyped,
  ExchangeInvitationRequestToJSON: () => ExchangeInvitationRequestToJSON,
  ExchangeTokenResponseDataFromJSON: () => ExchangeTokenResponseDataFromJSON,
  ExchangeTokenResponseDataFromJSONTyped: () => ExchangeTokenResponseDataFromJSONTyped,
  ExchangeTokenResponseDataToJSON: () => ExchangeTokenResponseDataToJSON,
  ExchangeTokenResponseFromJSON: () => ExchangeTokenResponseFromJSON,
  ExchangeTokenResponseFromJSONTyped: () => ExchangeTokenResponseFromJSONTyped,
  ExchangeTokenResponseToJSON: () => ExchangeTokenResponseToJSON,
  ExportJobConfigFromJSON: () => ExportJobConfigFromJSON,
  ExportJobConfigFromJSONTyped: () => ExportJobConfigFromJSONTyped,
  ExportJobConfigToJSON: () => ExportJobConfigToJSON,
  ExportOptionsFromJSON: () => ExportOptionsFromJSON,
  ExportOptionsFromJSONTyped: () => ExportOptionsFromJSONTyped,
  ExportOptionsToJSON: () => ExportOptionsToJSON,
  FetchError: () => FetchError,
  FieldConfigFromJSON: () => FieldConfigFromJSON,
  FieldConfigFromJSONTyped: () => FieldConfigFromJSONTyped,
  FieldConfigToJSON: () => FieldConfigToJSON,
  FileConfigFromJSON: () => FileConfigFromJSON,
  FileConfigFromJSONTyped: () => FileConfigFromJSONTyped,
  FileConfigToJSON: () => FileConfigToJSON,
  FileJobConfigDriverEnum: () => FileJobConfigDriverEnum,
  FileJobConfigFromJSON: () => FileJobConfigFromJSON,
  FileJobConfigFromJSONTyped: () => FileJobConfigFromJSONTyped,
  FileJobConfigToJSON: () => FileJobConfigToJSON,
  FileResponseFromJSON: () => FileResponseFromJSON,
  FileResponseFromJSONTyped: () => FileResponseFromJSONTyped,
  FileResponseToJSON: () => FileResponseToJSON,
  FilesResponseFromJSON: () => FilesResponseFromJSON,
  FilesResponseFromJSONTyped: () => FilesResponseFromJSONTyped,
  FilesResponseToJSON: () => FilesResponseToJSON,
  Filter: () => Filter,
  FilterFromJSON: () => FilterFromJSON,
  FilterFromJSONTyped: () => FilterFromJSONTyped,
  FilterToJSON: () => FilterToJSON,
  FronteggUserFromJSON: () => FronteggUserFromJSON,
  FronteggUserFromJSONTyped: () => FronteggUserFromJSONTyped,
  FronteggUserToJSON: () => FronteggUserToJSON,
  GetFilesModeEnum: () => GetFilesModeEnum,
  GetSpacesSortField: () => GetSpacesSortField,
  GetSpacesSortFieldFromJSON: () => GetSpacesSortFieldFromJSON,
  GetSpacesSortFieldFromJSONTyped: () => GetSpacesSortFieldFromJSONTyped,
  GetSpacesSortFieldToJSON: () => GetSpacesSortFieldToJSON,
  GuestAuthenticationEnum: () => GuestAuthenticationEnum,
  GuestAuthenticationEnumFromJSON: () => GuestAuthenticationEnumFromJSON,
  GuestAuthenticationEnumFromJSONTyped: () => GuestAuthenticationEnumFromJSONTyped,
  GuestAuthenticationEnumToJSON: () => GuestAuthenticationEnumToJSON,
  GuestConfigFromJSON: () => GuestConfigFromJSON,
  GuestConfigFromJSONTyped: () => GuestConfigFromJSONTyped,
  GuestConfigSpacesInnerFromJSON: () => GuestConfigSpacesInnerFromJSON,
  GuestConfigSpacesInnerFromJSONTyped: () => GuestConfigSpacesInnerFromJSONTyped,
  GuestConfigSpacesInnerToJSON: () => GuestConfigSpacesInnerToJSON,
  GuestConfigSpacesInnerWorkbooksInnerFromJSON: () => GuestConfigSpacesInnerWorkbooksInnerFromJSON,
  GuestConfigSpacesInnerWorkbooksInnerFromJSONTyped: () => GuestConfigSpacesInnerWorkbooksInnerFromJSONTyped,
  GuestConfigSpacesInnerWorkbooksInnerToJSON: () => GuestConfigSpacesInnerWorkbooksInnerToJSON,
  GuestConfigToJSON: () => GuestConfigToJSON,
  GuestFromJSON: () => GuestFromJSON,
  GuestFromJSONTyped: () => GuestFromJSONTyped,
  GuestResponseFromJSON: () => GuestResponseFromJSON,
  GuestResponseFromJSONTyped: () => GuestResponseFromJSONTyped,
  GuestResponseToJSON: () => GuestResponseToJSON,
  GuestToJSON: () => GuestToJSON,
  GuestsResponseFromJSON: () => GuestsResponseFromJSON,
  GuestsResponseFromJSONTyped: () => GuestsResponseFromJSONTyped,
  GuestsResponseToJSON: () => GuestsResponseToJSON,
  HealthResponseFromJSON: () => HealthResponseFromJSON,
  HealthResponseFromJSONTyped: () => HealthResponseFromJSONTyped,
  HealthResponseToJSON: () => HealthResponseToJSON,
  InviteGuestsRequestInnerFromJSON: () => InviteGuestsRequestInnerFromJSON,
  InviteGuestsRequestInnerFromJSONTyped: () => InviteGuestsRequestInnerFromJSONTyped,
  InviteGuestsRequestInnerToJSON: () => InviteGuestsRequestInnerToJSON,
  JSONApiResponse: () => JSONApiResponse,
  JobConfigFromJSON: () => JobConfigFromJSON,
  JobConfigFromJSONTyped: () => JobConfigFromJSONTyped,
  JobConfigStatusEnum: () => JobConfigStatusEnum,
  JobConfigToJSON: () => JobConfigToJSON,
  JobConfigTriggerEnum: () => JobConfigTriggerEnum,
  JobConfigTypeEnum: () => JobConfigTypeEnum,
  JobFromJSON: () => JobFromJSON,
  JobFromJSONTyped: () => JobFromJSONTyped,
  JobPlanFromJSON: () => JobPlanFromJSON,
  JobPlanFromJSONTyped: () => JobPlanFromJSONTyped,
  JobPlanResponseFromJSON: () => JobPlanResponseFromJSON,
  JobPlanResponseFromJSONTyped: () => JobPlanResponseFromJSONTyped,
  JobPlanResponseToJSON: () => JobPlanResponseToJSON,
  JobPlanToJSON: () => JobPlanToJSON,
  JobResponseFromJSON: () => JobResponseFromJSON,
  JobResponseFromJSONTyped: () => JobResponseFromJSONTyped,
  JobResponseToJSON: () => JobResponseToJSON,
  JobStatsAccountsFromJSON: () => JobStatsAccountsFromJSON,
  JobStatsAccountsFromJSONTyped: () => JobStatsAccountsFromJSONTyped,
  JobStatsAccountsToJSON: () => JobStatsAccountsToJSON,
  JobStatsFromJSON: () => JobStatsFromJSON,
  JobStatsFromJSONTyped: () => JobStatsFromJSONTyped,
  JobStatsJobsFromJSON: () => JobStatsJobsFromJSON,
  JobStatsJobsFromJSONTyped: () => JobStatsJobsFromJSONTyped,
  JobStatsJobsMapFromJSON: () => JobStatsJobsMapFromJSON,
  JobStatsJobsMapFromJSONTyped: () => JobStatsJobsMapFromJSONTyped,
  JobStatsJobsMapToJSON: () => JobStatsJobsMapToJSON,
  JobStatsJobsToJSON: () => JobStatsJobsToJSON,
  JobStatsResponseFromJSON: () => JobStatsResponseFromJSON,
  JobStatsResponseFromJSONTyped: () => JobStatsResponseFromJSONTyped,
  JobStatsResponseToJSON: () => JobStatsResponseToJSON,
  JobStatsToJSON: () => JobStatsToJSON,
  JobStatusEnum: () => JobStatusEnum,
  JobToJSON: () => JobToJSON,
  JobTriggerEnum: () => JobTriggerEnum,
  JobTypeEnum: () => JobTypeEnum,
  JobUpdateConfigFromJSON: () => JobUpdateConfigFromJSON,
  JobUpdateConfigFromJSONTyped: () => JobUpdateConfigFromJSONTyped,
  JobUpdateConfigToJSON: () => JobUpdateConfigToJSON,
  JobUpdateFromJSON: () => JobUpdateFromJSON,
  JobUpdateFromJSONTyped: () => JobUpdateFromJSONTyped,
  JobUpdateStatusEnum: () => JobUpdateStatusEnum,
  JobUpdateToJSON: () => JobUpdateToJSON,
  JobsResponseFromJSON: () => JobsResponseFromJSON,
  JobsResponseFromJSONTyped: () => JobsResponseFromJSONTyped,
  JobsResponseToJSON: () => JobsResponseToJSON,
  LinkSidebarConfigAllOfFromJSON: () => LinkSidebarConfigAllOfFromJSON,
  LinkSidebarConfigAllOfFromJSONTyped: () => LinkSidebarConfigAllOfFromJSONTyped,
  LinkSidebarConfigAllOfToJSON: () => LinkSidebarConfigAllOfToJSON,
  LinkSidebarConfigFromJSON: () => LinkSidebarConfigFromJSON,
  LinkSidebarConfigFromJSONTyped: () => LinkSidebarConfigFromJSONTyped,
  LinkSidebarConfigToJSON: () => LinkSidebarConfigToJSON,
  LinkSidebarConfigTypeEnum: () => LinkSidebarConfigTypeEnum,
  ModelFileFromJSON: () => ModelFileFromJSON,
  ModelFileFromJSONTyped: () => ModelFileFromJSONTyped,
  ModelFileStatusEnum: () => ModelFileStatusEnum,
  ModelFileStatusEnumFromJSON: () => ModelFileStatusEnumFromJSON,
  ModelFileStatusEnumFromJSONTyped: () => ModelFileStatusEnumFromJSONTyped,
  ModelFileStatusEnumToJSON: () => ModelFileStatusEnumToJSON,
  ModelFileToJSON: () => ModelFileToJSON,
  NumberPropertyAllOfConfigFromJSON: () => NumberPropertyAllOfConfigFromJSON,
  NumberPropertyAllOfConfigFromJSONTyped: () => NumberPropertyAllOfConfigFromJSONTyped,
  NumberPropertyAllOfConfigToJSON: () => NumberPropertyAllOfConfigToJSON,
  NumberPropertyAllOfFromJSON: () => NumberPropertyAllOfFromJSON,
  NumberPropertyAllOfFromJSONTyped: () => NumberPropertyAllOfFromJSONTyped,
  NumberPropertyAllOfToJSON: () => NumberPropertyAllOfToJSON,
  NumberPropertyAllOfTypeEnum: () => NumberPropertyAllOfTypeEnum,
  NumberPropertyFromJSON: () => NumberPropertyFromJSON,
  NumberPropertyFromJSONTyped: () => NumberPropertyFromJSONTyped,
  NumberPropertyToJSON: () => NumberPropertyToJSON,
  NumberPropertyTypeEnum: () => NumberPropertyTypeEnum,
  PaginationFromJSON: () => PaginationFromJSON,
  PaginationFromJSONTyped: () => PaginationFromJSONTyped,
  PaginationToJSON: () => PaginationToJSON,
  PipelineJobConfigFromJSON: () => PipelineJobConfigFromJSON,
  PipelineJobConfigFromJSONTyped: () => PipelineJobConfigFromJSONTyped,
  PipelineJobConfigToJSON: () => PipelineJobConfigToJSON,
  PlanFromJSON: () => PlanFromJSON,
  PlanFromJSONTyped: () => PlanFromJSONTyped,
  PlanToJSON: () => PlanToJSON,
  PropertyFromJSON: () => PropertyFromJSON,
  PropertyFromJSONTyped: () => PropertyFromJSONTyped,
  PropertyToJSON: () => PropertyToJSON,
  RecordCountsFromJSON: () => RecordCountsFromJSON,
  RecordCountsFromJSONTyped: () => RecordCountsFromJSONTyped,
  RecordCountsResponseDataAllOfFromJSON: () => RecordCountsResponseDataAllOfFromJSON,
  RecordCountsResponseDataAllOfFromJSONTyped: () => RecordCountsResponseDataAllOfFromJSONTyped,
  RecordCountsResponseDataAllOfToJSON: () => RecordCountsResponseDataAllOfToJSON,
  RecordCountsResponseDataFromJSON: () => RecordCountsResponseDataFromJSON,
  RecordCountsResponseDataFromJSONTyped: () => RecordCountsResponseDataFromJSONTyped,
  RecordCountsResponseDataToJSON: () => RecordCountsResponseDataToJSON,
  RecordCountsResponseFromJSON: () => RecordCountsResponseFromJSON,
  RecordCountsResponseFromJSONTyped: () => RecordCountsResponseFromJSONTyped,
  RecordCountsResponseToJSON: () => RecordCountsResponseToJSON,
  RecordCountsToJSON: () => RecordCountsToJSON,
  RecordDataFromJSON: () => RecordDataFromJSON,
  RecordDataFromJSONTyped: () => RecordDataFromJSONTyped,
  RecordDataToJSON: () => RecordDataToJSON,
  RecordDataWithLinksFromJSON: () => RecordDataWithLinksFromJSON,
  RecordDataWithLinksFromJSONTyped: () => RecordDataWithLinksFromJSONTyped,
  RecordDataWithLinksToJSON: () => RecordDataWithLinksToJSON,
  RecordFromJSON: () => RecordFromJSON,
  RecordFromJSONTyped: () => RecordFromJSONTyped,
  RecordToJSON: () => RecordToJSON,
  RecordUpdatesAllOfFromJSON: () => RecordUpdatesAllOfFromJSON,
  RecordUpdatesAllOfFromJSONTyped: () => RecordUpdatesAllOfFromJSONTyped,
  RecordUpdatesAllOfToJSON: () => RecordUpdatesAllOfToJSON,
  RecordUpdatesFromJSON: () => RecordUpdatesFromJSON,
  RecordUpdatesFromJSONTyped: () => RecordUpdatesFromJSONTyped,
  RecordUpdatesToJSON: () => RecordUpdatesToJSON,
  RecordWithLinksFromJSON: () => RecordWithLinksFromJSON,
  RecordWithLinksFromJSONTyped: () => RecordWithLinksFromJSONTyped,
  RecordWithLinksToJSON: () => RecordWithLinksToJSON,
  RecordsDataFromJSON: () => RecordsDataFromJSON,
  RecordsDataFromJSONTyped: () => RecordsDataFromJSONTyped,
  RecordsDataToJSON: () => RecordsDataToJSON,
  RecordsFromJSON: () => RecordsFromJSON,
  RecordsFromJSONTyped: () => RecordsFromJSONTyped,
  RecordsResponseDataAllOfFromJSON: () => RecordsResponseDataAllOfFromJSON,
  RecordsResponseDataAllOfFromJSONTyped: () => RecordsResponseDataAllOfFromJSONTyped,
  RecordsResponseDataAllOfToJSON: () => RecordsResponseDataAllOfToJSON,
  RecordsResponseDataFromJSON: () => RecordsResponseDataFromJSON,
  RecordsResponseDataFromJSONTyped: () => RecordsResponseDataFromJSONTyped,
  RecordsResponseDataToJSON: () => RecordsResponseDataToJSON,
  RecordsResponseFromJSON: () => RecordsResponseFromJSON,
  RecordsResponseFromJSONTyped: () => RecordsResponseFromJSONTyped,
  RecordsResponseToJSON: () => RecordsResponseToJSON,
  RecordsToJSON: () => RecordsToJSON,
  RecordsUpdatesFromJSON: () => RecordsUpdatesFromJSON,
  RecordsUpdatesFromJSONTyped: () => RecordsUpdatesFromJSONTyped,
  RecordsUpdatesToJSON: () => RecordsUpdatesToJSON,
  RecordsWithLinksFromJSON: () => RecordsWithLinksFromJSON,
  RecordsWithLinksFromJSONTyped: () => RecordsWithLinksFromJSONTyped,
  RecordsWithLinksToJSON: () => RecordsWithLinksToJSON,
  ReferencePropertyAllOfConfigFromJSON: () => ReferencePropertyAllOfConfigFromJSON,
  ReferencePropertyAllOfConfigFromJSONTyped: () => ReferencePropertyAllOfConfigFromJSONTyped,
  ReferencePropertyAllOfConfigRelationshipEnum: () => ReferencePropertyAllOfConfigRelationshipEnum,
  ReferencePropertyAllOfConfigToJSON: () => ReferencePropertyAllOfConfigToJSON,
  ReferencePropertyAllOfFromJSON: () => ReferencePropertyAllOfFromJSON,
  ReferencePropertyAllOfFromJSONTyped: () => ReferencePropertyAllOfFromJSONTyped,
  ReferencePropertyAllOfToJSON: () => ReferencePropertyAllOfToJSON,
  ReferencePropertyAllOfTypeEnum: () => ReferencePropertyAllOfTypeEnum,
  ReferencePropertyFromJSON: () => ReferencePropertyFromJSON,
  ReferencePropertyFromJSONTyped: () => ReferencePropertyFromJSONTyped,
  ReferencePropertyToJSON: () => ReferencePropertyToJSON,
  ReferencePropertyTypeEnum: () => ReferencePropertyTypeEnum,
  ReplaceRequestFromJSON: () => ReplaceRequestFromJSON,
  ReplaceRequestFromJSONTyped: () => ReplaceRequestFromJSONTyped,
  ReplaceRequestReplaceValueFromJSON: () => ReplaceRequestReplaceValueFromJSON,
  ReplaceRequestReplaceValueFromJSONTyped: () => ReplaceRequestReplaceValueFromJSONTyped,
  ReplaceRequestReplaceValueToJSON: () => ReplaceRequestReplaceValueToJSON,
  ReplaceRequestToJSON: () => ReplaceRequestToJSON,
  RequiredConstraintAllOfFromJSON: () => RequiredConstraintAllOfFromJSON,
  RequiredConstraintAllOfFromJSONTyped: () => RequiredConstraintAllOfFromJSONTyped,
  RequiredConstraintAllOfToJSON: () => RequiredConstraintAllOfToJSON,
  RequiredConstraintAllOfTypeEnum: () => RequiredConstraintAllOfTypeEnum,
  RequiredConstraintFromJSON: () => RequiredConstraintFromJSON,
  RequiredConstraintFromJSONTyped: () => RequiredConstraintFromJSONTyped,
  RequiredConstraintToJSON: () => RequiredConstraintToJSON,
  RequiredConstraintTypeEnum: () => RequiredConstraintTypeEnum,
  RequiredError: () => RequiredError,
  ResponseError: () => ResponseError,
  SheetAccess: () => SheetAccess,
  SheetAccessFromJSON: () => SheetAccessFromJSON,
  SheetAccessFromJSONTyped: () => SheetAccessFromJSONTyped,
  SheetAccessToJSON: () => SheetAccessToJSON,
  SheetConfigFromJSON: () => SheetConfigFromJSON,
  SheetConfigFromJSONTyped: () => SheetConfigFromJSONTyped,
  SheetConfigToJSON: () => SheetConfigToJSON,
  SheetFromJSON: () => SheetFromJSON,
  SheetFromJSONTyped: () => SheetFromJSONTyped,
  SheetResponseFromJSON: () => SheetResponseFromJSON,
  SheetResponseFromJSONTyped: () => SheetResponseFromJSONTyped,
  SheetResponseToJSON: () => SheetResponseToJSON,
  SheetToJSON: () => SheetToJSON,
  SheetsResponseFromJSON: () => SheetsResponseFromJSON,
  SheetsResponseFromJSONTyped: () => SheetsResponseFromJSONTyped,
  SheetsResponseToJSON: () => SheetsResponseToJSON,
  SidebarConfigFromJSON: () => SidebarConfigFromJSON,
  SidebarConfigFromJSONTyped: () => SidebarConfigFromJSONTyped,
  SidebarConfigToJSON: () => SidebarConfigToJSON,
  SortDirection: () => SortDirection,
  SortDirectionFromJSON: () => SortDirectionFromJSON,
  SortDirectionFromJSONTyped: () => SortDirectionFromJSONTyped,
  SortDirectionToJSON: () => SortDirectionToJSON,
  SourceFieldFromJSON: () => SourceFieldFromJSON,
  SourceFieldFromJSONTyped: () => SourceFieldFromJSONTyped,
  SourceFieldToJSON: () => SourceFieldToJSON,
  SpaceAccess: () => SpaceAccess,
  SpaceAccessFromJSON: () => SpaceAccessFromJSON,
  SpaceAccessFromJSONTyped: () => SpaceAccessFromJSONTyped,
  SpaceAccessToJSON: () => SpaceAccessToJSON,
  SpaceConfigFromJSON: () => SpaceConfigFromJSON,
  SpaceConfigFromJSONTyped: () => SpaceConfigFromJSONTyped,
  SpaceConfigResponseFromJSON: () => SpaceConfigResponseFromJSON,
  SpaceConfigResponseFromJSONTyped: () => SpaceConfigResponseFromJSONTyped,
  SpaceConfigResponseToJSON: () => SpaceConfigResponseToJSON,
  SpaceConfigToJSON: () => SpaceConfigToJSON,
  SpaceConfigsResponseFromJSON: () => SpaceConfigsResponseFromJSON,
  SpaceConfigsResponseFromJSONTyped: () => SpaceConfigsResponseFromJSONTyped,
  SpaceConfigsResponseToJSON: () => SpaceConfigsResponseToJSON,
  SpaceFromJSON: () => SpaceFromJSON,
  SpaceFromJSONTyped: () => SpaceFromJSONTyped,
  SpacePatternConfigFromJSON: () => SpacePatternConfigFromJSON,
  SpacePatternConfigFromJSONTyped: () => SpacePatternConfigFromJSONTyped,
  SpacePatternConfigToJSON: () => SpacePatternConfigToJSON,
  SpacePatternFromJSON: () => SpacePatternFromJSON,
  SpacePatternFromJSONTyped: () => SpacePatternFromJSONTyped,
  SpacePatternToJSON: () => SpacePatternToJSON,
  SpaceResponseFromJSON: () => SpaceResponseFromJSON,
  SpaceResponseFromJSONTyped: () => SpaceResponseFromJSONTyped,
  SpaceResponseToJSON: () => SpaceResponseToJSON,
  SpaceToJSON: () => SpaceToJSON,
  SpacesResponseFromJSON: () => SpacesResponseFromJSON,
  SpacesResponseFromJSONTyped: () => SpacesResponseFromJSONTyped,
  SpacesResponseToJSON: () => SpacesResponseToJSON,
  StringPropertyAllOfFromJSON: () => StringPropertyAllOfFromJSON,
  StringPropertyAllOfFromJSONTyped: () => StringPropertyAllOfFromJSONTyped,
  StringPropertyAllOfToJSON: () => StringPropertyAllOfToJSON,
  StringPropertyAllOfTypeEnum: () => StringPropertyAllOfTypeEnum,
  StringPropertyFromJSON: () => StringPropertyFromJSON,
  StringPropertyFromJSONTyped: () => StringPropertyFromJSONTyped,
  StringPropertyToJSON: () => StringPropertyToJSON,
  StringPropertyTypeEnum: () => StringPropertyTypeEnum,
  SuccessFromJSON: () => SuccessFromJSON,
  SuccessFromJSONTyped: () => SuccessFromJSONTyped,
  SuccessResponseFromJSON: () => SuccessResponseFromJSON,
  SuccessResponseFromJSONTyped: () => SuccessResponseFromJSONTyped,
  SuccessResponseToJSON: () => SuccessResponseToJSON,
  SuccessToJSON: () => SuccessToJSON,
  TextApiResponse: () => TextApiResponse,
  UniqueConstraintAllOfConfigFromJSON: () => UniqueConstraintAllOfConfigFromJSON,
  UniqueConstraintAllOfConfigFromJSONTyped: () => UniqueConstraintAllOfConfigFromJSONTyped,
  UniqueConstraintAllOfConfigToJSON: () => UniqueConstraintAllOfConfigToJSON,
  UniqueConstraintAllOfFromJSON: () => UniqueConstraintAllOfFromJSON,
  UniqueConstraintAllOfFromJSONTyped: () => UniqueConstraintAllOfFromJSONTyped,
  UniqueConstraintAllOfToJSON: () => UniqueConstraintAllOfToJSON,
  UniqueConstraintAllOfTypeEnum: () => UniqueConstraintAllOfTypeEnum,
  UniqueConstraintFromJSON: () => UniqueConstraintFromJSON,
  UniqueConstraintFromJSONTyped: () => UniqueConstraintFromJSONTyped,
  UniqueConstraintToJSON: () => UniqueConstraintToJSON,
  UniqueConstraintTypeEnum: () => UniqueConstraintTypeEnum,
  UpdateJobExecutionPlanByIdRequestFromJSON: () => UpdateJobExecutionPlanByIdRequestFromJSON,
  UpdateJobExecutionPlanByIdRequestFromJSONTyped: () => UpdateJobExecutionPlanByIdRequestFromJSONTyped,
  UpdateJobExecutionPlanByIdRequestToJSON: () => UpdateJobExecutionPlanByIdRequestToJSON,
  UserConfigFromJSON: () => UserConfigFromJSON,
  UserConfigFromJSONTyped: () => UserConfigFromJSONTyped,
  UserConfigToJSON: () => UserConfigToJSON,
  UserCredentialsFromJSON: () => UserCredentialsFromJSON,
  UserCredentialsFromJSONTyped: () => UserCredentialsFromJSONTyped,
  UserCredentialsToJSON: () => UserCredentialsToJSON,
  UserFromJSON: () => UserFromJSON,
  UserFromJSONTyped: () => UserFromJSONTyped,
  UserResponseFromJSON: () => UserResponseFromJSON,
  UserResponseFromJSONTyped: () => UserResponseFromJSONTyped,
  UserResponseToJSON: () => UserResponseToJSON,
  UserToJSON: () => UserToJSON,
  UsersResponseFromJSON: () => UsersResponseFromJSON,
  UsersResponseFromJSONTyped: () => UsersResponseFromJSONTyped,
  UsersResponseToJSON: () => UsersResponseToJSON,
  ValidationFromJSON: () => ValidationFromJSON,
  ValidationFromJSONTyped: () => ValidationFromJSONTyped,
  ValidationMessageFromJSON: () => ValidationMessageFromJSON,
  ValidationMessageFromJSONTyped: () => ValidationMessageFromJSONTyped,
  ValidationMessageSourceEnum: () => ValidationMessageSourceEnum,
  ValidationMessageToJSON: () => ValidationMessageToJSON,
  ValidationMessageTypeEnum: () => ValidationMessageTypeEnum,
  ValidationToJSON: () => ValidationToJSON,
  VersionResponseDataFromJSON: () => VersionResponseDataFromJSON,
  VersionResponseDataFromJSONTyped: () => VersionResponseDataFromJSONTyped,
  VersionResponseDataToJSON: () => VersionResponseDataToJSON,
  VersionResponseFromJSON: () => VersionResponseFromJSON,
  VersionResponseFromJSONTyped: () => VersionResponseFromJSONTyped,
  VersionResponseToJSON: () => VersionResponseToJSON,
  VoidApiResponse: () => VoidApiResponse,
  WorkbookConfigFromJSON: () => WorkbookConfigFromJSON,
  WorkbookConfigFromJSONTyped: () => WorkbookConfigFromJSONTyped,
  WorkbookConfigToJSON: () => WorkbookConfigToJSON,
  WorkbookFromJSON: () => WorkbookFromJSON,
  WorkbookFromJSONTyped: () => WorkbookFromJSONTyped,
  WorkbookResponseFromJSON: () => WorkbookResponseFromJSON,
  WorkbookResponseFromJSONTyped: () => WorkbookResponseFromJSONTyped,
  WorkbookResponseToJSON: () => WorkbookResponseToJSON,
  WorkbookSidebarConfigAllOfFromJSON: () => WorkbookSidebarConfigAllOfFromJSON,
  WorkbookSidebarConfigAllOfFromJSONTyped: () => WorkbookSidebarConfigAllOfFromJSONTyped,
  WorkbookSidebarConfigAllOfToJSON: () => WorkbookSidebarConfigAllOfToJSON,
  WorkbookSidebarConfigFromJSON: () => WorkbookSidebarConfigFromJSON,
  WorkbookSidebarConfigFromJSONTyped: () => WorkbookSidebarConfigFromJSONTyped,
  WorkbookSidebarConfigToJSON: () => WorkbookSidebarConfigToJSON,
  WorkbookSidebarConfigTypeEnum: () => WorkbookSidebarConfigTypeEnum,
  WorkbookToJSON: () => WorkbookToJSON,
  WorkbooksResponseFromJSON: () => WorkbooksResponseFromJSON,
  WorkbooksResponseFromJSONTyped: () => WorkbooksResponseFromJSONTyped,
  WorkbooksResponseToJSON: () => WorkbooksResponseToJSON,
  canConsumeForm: () => canConsumeForm,
  exists: () => exists,
  instanceOfAccessToken: () => instanceOfAccessToken,
  instanceOfAccessTokenResponse: () => instanceOfAccessTokenResponse,
  instanceOfAction: () => instanceOfAction,
  instanceOfAgent: () => instanceOfAgent,
  instanceOfAgentConfig: () => instanceOfAgentConfig,
  instanceOfAgentLog: () => instanceOfAgentLog,
  instanceOfAgentLogsResponse: () => instanceOfAgentLogsResponse,
  instanceOfAgentResponse: () => instanceOfAgentResponse,
  instanceOfAgentStats: () => instanceOfAgentStats,
  instanceOfAgentsResponse: () => instanceOfAgentsResponse,
  instanceOfApiCredentials: () => instanceOfApiCredentials,
  instanceOfApiKey: () => instanceOfApiKey,
  instanceOfApiKeyOperationsInner: () => instanceOfApiKeyOperationsInner,
  instanceOfApiKeysResponse: () => instanceOfApiKeysResponse,
  instanceOfApiToken: () => instanceOfApiToken,
  instanceOfApiTokenResponse: () => instanceOfApiTokenResponse,
  instanceOfApiTokensResponse: () => instanceOfApiTokensResponse,
  instanceOfAppVersionResponse: () => instanceOfAppVersionResponse,
  instanceOfArrayableProperty: () => instanceOfArrayableProperty,
  instanceOfBaseConstraint: () => instanceOfBaseConstraint,
  instanceOfBaseProperty: () => instanceOfBaseProperty,
  instanceOfBaseSideBarConfig: () => instanceOfBaseSideBarConfig,
  instanceOfBlueprint: () => instanceOfBlueprint,
  instanceOfBooleanProperty: () => instanceOfBooleanProperty,
  instanceOfBooleanPropertyAllOf: () => instanceOfBooleanPropertyAllOf,
  instanceOfBooleanPropertyAllOfConfig: () => instanceOfBooleanPropertyAllOfConfig,
  instanceOfCellValue: () => instanceOfCellValue,
  instanceOfCellValueValue: () => instanceOfCellValueValue,
  instanceOfCellValueWithCounts: () => instanceOfCellValueWithCounts,
  instanceOfCellValueWithLinks: () => instanceOfCellValueWithLinks,
  instanceOfCellsResponse: () => instanceOfCellsResponse,
  instanceOfCellsResponseData: () => instanceOfCellsResponseData,
  instanceOfComputedConstraint: () => instanceOfComputedConstraint,
  instanceOfComputedConstraintAllOf: () => instanceOfComputedConstraintAllOf,
  instanceOfCreateFileRequest: () => instanceOfCreateFileRequest,
  instanceOfDateProperty: () => instanceOfDateProperty,
  instanceOfDatePropertyAllOf: () => instanceOfDatePropertyAllOf,
  instanceOfDeleteJobConfig: () => instanceOfDeleteJobConfig,
  instanceOfDestinationField: () => instanceOfDestinationField,
  instanceOfDocument: () => instanceOfDocument,
  instanceOfDocumentConfig: () => instanceOfDocumentConfig,
  instanceOfDocumentResponse: () => instanceOfDocumentResponse,
  instanceOfDocumentSidebarConfig: () => instanceOfDocumentSidebarConfig,
  instanceOfDocumentSidebarConfigAllOf: () => instanceOfDocumentSidebarConfigAllOf,
  instanceOfDocumentsResponse: () => instanceOfDocumentsResponse,
  instanceOfEdge: () => instanceOfEdge,
  instanceOfEdgeMetadata: () => instanceOfEdgeMetadata,
  instanceOfEnumDetails: () => instanceOfEnumDetails,
  instanceOfEnumDetails1: () => instanceOfEnumDetails1,
  instanceOfEnumMappingField: () => instanceOfEnumMappingField,
  instanceOfEnumMappingField1: () => instanceOfEnumMappingField1,
  instanceOfEnumProperty: () => instanceOfEnumProperty,
  instanceOfEnumPropertyAllOf: () => instanceOfEnumPropertyAllOf,
  instanceOfEnumPropertyAllOfConfig: () => instanceOfEnumPropertyAllOfConfig,
  instanceOfEnumPropertyOption: () => instanceOfEnumPropertyOption,
  instanceOfEnumPropertyOptionValue: () => instanceOfEnumPropertyOptionValue,
  instanceOfEnvironment: () => instanceOfEnvironment,
  instanceOfEnvironmentConfig: () => instanceOfEnvironmentConfig,
  instanceOfEnvironmentResponse: () => instanceOfEnvironmentResponse,
  instanceOfEnvironmentStatsResponse: () => instanceOfEnvironmentStatsResponse,
  instanceOfEnvironmentStatsResponseData: () => instanceOfEnvironmentStatsResponseData,
  instanceOfEnvironmentsResponse: () => instanceOfEnvironmentsResponse,
  instanceOfErrorResponse: () => instanceOfErrorResponse,
  instanceOfErrorResponseErrorsInner: () => instanceOfErrorResponseErrorsInner,
  instanceOfEvent: () => instanceOfEvent,
  instanceOfEventConfig: () => instanceOfEventConfig,
  instanceOfEventConfigAttributes: () => instanceOfEventConfigAttributes,
  instanceOfEventConfigAttributesProgress: () => instanceOfEventConfigAttributesProgress,
  instanceOfEventConfigContext: () => instanceOfEventConfigContext,
  instanceOfEventConfigContextActorId: () => instanceOfEventConfigContextActorId,
  instanceOfEventResponse: () => instanceOfEventResponse,
  instanceOfEventToken: () => instanceOfEventToken,
  instanceOfEventTokenResponse: () => instanceOfEventTokenResponse,
  instanceOfEventsResponse: () => instanceOfEventsResponse,
  instanceOfExchangeInvitationRequest: () => instanceOfExchangeInvitationRequest,
  instanceOfExchangeTokenResponse: () => instanceOfExchangeTokenResponse,
  instanceOfExchangeTokenResponseData: () => instanceOfExchangeTokenResponseData,
  instanceOfExportJobConfig: () => instanceOfExportJobConfig,
  instanceOfExportOptions: () => instanceOfExportOptions,
  instanceOfFileConfig: () => instanceOfFileConfig,
  instanceOfFileJobConfig: () => instanceOfFileJobConfig,
  instanceOfFileResponse: () => instanceOfFileResponse,
  instanceOfFilesResponse: () => instanceOfFilesResponse,
  instanceOfFronteggUser: () => instanceOfFronteggUser,
  instanceOfGuest: () => instanceOfGuest,
  instanceOfGuestConfig: () => instanceOfGuestConfig,
  instanceOfGuestConfigSpacesInner: () => instanceOfGuestConfigSpacesInner,
  instanceOfGuestConfigSpacesInnerWorkbooksInner: () => instanceOfGuestConfigSpacesInnerWorkbooksInner,
  instanceOfGuestResponse: () => instanceOfGuestResponse,
  instanceOfGuestsResponse: () => instanceOfGuestsResponse,
  instanceOfHealthResponse: () => instanceOfHealthResponse,
  instanceOfInviteGuestsRequestInner: () => instanceOfInviteGuestsRequestInner,
  instanceOfJob: () => instanceOfJob,
  instanceOfJobConfig: () => instanceOfJobConfig,
  instanceOfJobPlan: () => instanceOfJobPlan,
  instanceOfJobPlanResponse: () => instanceOfJobPlanResponse,
  instanceOfJobResponse: () => instanceOfJobResponse,
  instanceOfJobStats: () => instanceOfJobStats,
  instanceOfJobStatsAccounts: () => instanceOfJobStatsAccounts,
  instanceOfJobStatsJobs: () => instanceOfJobStatsJobs,
  instanceOfJobStatsJobsMap: () => instanceOfJobStatsJobsMap,
  instanceOfJobStatsResponse: () => instanceOfJobStatsResponse,
  instanceOfJobUpdate: () => instanceOfJobUpdate,
  instanceOfJobsResponse: () => instanceOfJobsResponse,
  instanceOfLinkSidebarConfig: () => instanceOfLinkSidebarConfig,
  instanceOfLinkSidebarConfigAllOf: () => instanceOfLinkSidebarConfigAllOf,
  instanceOfModelFile: () => instanceOfModelFile,
  instanceOfNumberProperty: () => instanceOfNumberProperty,
  instanceOfNumberPropertyAllOf: () => instanceOfNumberPropertyAllOf,
  instanceOfNumberPropertyAllOfConfig: () => instanceOfNumberPropertyAllOfConfig,
  instanceOfPagination: () => instanceOfPagination,
  instanceOfPipelineJobConfig: () => instanceOfPipelineJobConfig,
  instanceOfPlan: () => instanceOfPlan,
  instanceOfRecord: () => instanceOfRecord,
  instanceOfRecordCounts: () => instanceOfRecordCounts,
  instanceOfRecordCountsResponse: () => instanceOfRecordCountsResponse,
  instanceOfRecordCountsResponseData: () => instanceOfRecordCountsResponseData,
  instanceOfRecordCountsResponseDataAllOf: () => instanceOfRecordCountsResponseDataAllOf,
  instanceOfRecordData: () => instanceOfRecordData,
  instanceOfRecordDataWithLinks: () => instanceOfRecordDataWithLinks,
  instanceOfRecordUpdates: () => instanceOfRecordUpdates,
  instanceOfRecordUpdatesAllOf: () => instanceOfRecordUpdatesAllOf,
  instanceOfRecordWithLinks: () => instanceOfRecordWithLinks,
  instanceOfRecords: () => instanceOfRecords,
  instanceOfRecordsData: () => instanceOfRecordsData,
  instanceOfRecordsResponse: () => instanceOfRecordsResponse,
  instanceOfRecordsResponseData: () => instanceOfRecordsResponseData,
  instanceOfRecordsResponseDataAllOf: () => instanceOfRecordsResponseDataAllOf,
  instanceOfRecordsUpdates: () => instanceOfRecordsUpdates,
  instanceOfRecordsWithLinks: () => instanceOfRecordsWithLinks,
  instanceOfReferenceProperty: () => instanceOfReferenceProperty,
  instanceOfReferencePropertyAllOf: () => instanceOfReferencePropertyAllOf,
  instanceOfReferencePropertyAllOfConfig: () => instanceOfReferencePropertyAllOfConfig,
  instanceOfReplaceRequest: () => instanceOfReplaceRequest,
  instanceOfReplaceRequestReplaceValue: () => instanceOfReplaceRequestReplaceValue,
  instanceOfRequiredConstraint: () => instanceOfRequiredConstraint,
  instanceOfRequiredConstraintAllOf: () => instanceOfRequiredConstraintAllOf,
  instanceOfSheet: () => instanceOfSheet,
  instanceOfSheetConfig: () => instanceOfSheetConfig,
  instanceOfSheetResponse: () => instanceOfSheetResponse,
  instanceOfSheetsResponse: () => instanceOfSheetsResponse,
  instanceOfSourceField: () => instanceOfSourceField,
  instanceOfSpace: () => instanceOfSpace,
  instanceOfSpaceConfig: () => instanceOfSpaceConfig,
  instanceOfSpaceConfigResponse: () => instanceOfSpaceConfigResponse,
  instanceOfSpaceConfigsResponse: () => instanceOfSpaceConfigsResponse,
  instanceOfSpacePattern: () => instanceOfSpacePattern,
  instanceOfSpacePatternConfig: () => instanceOfSpacePatternConfig,
  instanceOfSpaceResponse: () => instanceOfSpaceResponse,
  instanceOfSpacesResponse: () => instanceOfSpacesResponse,
  instanceOfStringProperty: () => instanceOfStringProperty,
  instanceOfStringPropertyAllOf: () => instanceOfStringPropertyAllOf,
  instanceOfSuccess: () => instanceOfSuccess,
  instanceOfSuccessResponse: () => instanceOfSuccessResponse,
  instanceOfUniqueConstraint: () => instanceOfUniqueConstraint,
  instanceOfUniqueConstraintAllOf: () => instanceOfUniqueConstraintAllOf,
  instanceOfUniqueConstraintAllOfConfig: () => instanceOfUniqueConstraintAllOfConfig,
  instanceOfUpdateJobExecutionPlanByIdRequest: () => instanceOfUpdateJobExecutionPlanByIdRequest,
  instanceOfUser: () => instanceOfUser,
  instanceOfUserConfig: () => instanceOfUserConfig,
  instanceOfUserCredentials: () => instanceOfUserCredentials,
  instanceOfUserResponse: () => instanceOfUserResponse,
  instanceOfUsersResponse: () => instanceOfUsersResponse,
  instanceOfValidation: () => instanceOfValidation,
  instanceOfValidationMessage: () => instanceOfValidationMessage,
  instanceOfVersionResponse: () => instanceOfVersionResponse,
  instanceOfVersionResponseData: () => instanceOfVersionResponseData,
  instanceOfWorkbook: () => instanceOfWorkbook,
  instanceOfWorkbookConfig: () => instanceOfWorkbookConfig,
  instanceOfWorkbookResponse: () => instanceOfWorkbookResponse,
  instanceOfWorkbookSidebarConfig: () => instanceOfWorkbookSidebarConfig,
  instanceOfWorkbookSidebarConfigAllOf: () => instanceOfWorkbookSidebarConfigAllOf,
  instanceOfWorkbooksResponse: () => instanceOfWorkbooksResponse,
  mapValues: () => mapValues,
  querystring: () => querystring
});
module.exports = __toCommonJS(build_exports);

// build/runtime.ts
var BASE_PATH = "https://api.x.flatfile.com/v1".replace(/\/+$/, "");
var Configuration = class {
  constructor(configuration = {}) {
    this.configuration = configuration;
  }
  set config(configuration) {
    this.configuration = configuration;
  }
  get basePath() {
    return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;
  }
  get fetchApi() {
    return this.configuration.fetchApi;
  }
  get middleware() {
    return this.configuration.middleware || [];
  }
  get queryParamsStringify() {
    return this.configuration.queryParamsStringify || querystring;
  }
  get username() {
    return this.configuration.username;
  }
  get password() {
    return this.configuration.password;
  }
  get apiKey() {
    const apiKey = this.configuration.apiKey;
    if (apiKey) {
      return typeof apiKey === "function" ? apiKey : () => apiKey;
    }
    return void 0;
  }
  get accessToken() {
    const accessToken = this.configuration.accessToken;
    if (accessToken) {
      return typeof accessToken === "function" ? accessToken : async () => accessToken;
    }
    return void 0;
  }
  get headers() {
    return this.configuration.headers;
  }
  get credentials() {
    return this.configuration.credentials;
  }
};
var DefaultConfig = new Configuration();
var BaseAPI = class {
  constructor(configuration = DefaultConfig) {
    this.configuration = configuration;
    this.middleware = configuration.middleware;
  }
  middleware;
  withMiddleware(...middlewares) {
    const next = this.clone();
    next.middleware = next.middleware.concat(...middlewares);
    return next;
  }
  withPreMiddleware(...preMiddlewares) {
    const middlewares = preMiddlewares.map((pre) => ({ pre }));
    return this.withMiddleware(...middlewares);
  }
  withPostMiddleware(...postMiddlewares) {
    const middlewares = postMiddlewares.map((post) => ({ post }));
    return this.withMiddleware(...middlewares);
  }
  async request(context, initOverrides) {
    const { url, init } = await this.createFetchParams(context, initOverrides);
    const response = await this.fetchApi(url, init);
    if (response && (response.status >= 200 && response.status < 300)) {
      return response;
    }
    throw new ResponseError(response, "Response returned an error code");
  }
  async createFetchParams(context, initOverrides) {
    let url = this.configuration.basePath + context.path;
    if (context.query !== void 0 && Object.keys(context.query).length !== 0) {
      url += "?" + this.configuration.queryParamsStringify(context.query);
    }
    const headers = Object.assign({}, this.configuration.headers, context.headers);
    Object.keys(headers).forEach((key) => headers[key] === void 0 ? delete headers[key] : {});
    const initOverrideFn = typeof initOverrides === "function" ? initOverrides : async () => initOverrides;
    const initParams = {
      method: context.method,
      headers,
      body: context.body,
      credentials: this.configuration.credentials
    };
    const overridedInit = {
      ...initParams,
      ...await initOverrideFn({
        init: initParams,
        context
      })
    };
    const init = {
      ...overridedInit,
      body: isFormData(overridedInit.body) || overridedInit.body instanceof URLSearchParams || isBlob(overridedInit.body) ? overridedInit.body : JSON.stringify(overridedInit.body)
    };
    return { url, init };
  }
  fetchApi = async (url, init) => {
    let fetchParams = { url, init };
    for (const middleware of this.middleware) {
      if (middleware.pre) {
        fetchParams = await middleware.pre({
          fetch: this.fetchApi,
          ...fetchParams
        }) || fetchParams;
      }
    }
    let response = void 0;
    try {
      response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);
    } catch (e) {
      for (const middleware of this.middleware) {
        if (middleware.onError) {
          response = await middleware.onError({
            fetch: this.fetchApi,
            url: fetchParams.url,
            init: fetchParams.init,
            error: e,
            response: response ? response.clone() : void 0
          }) || response;
        }
      }
      if (response === void 0) {
        if (e instanceof Error) {
          throw new FetchError(e, "The request failed and the interceptors did not return an alternative response");
        } else {
          throw e;
        }
      }
    }
    for (const middleware of this.middleware) {
      if (middleware.post) {
        response = await middleware.post({
          fetch: this.fetchApi,
          url: fetchParams.url,
          init: fetchParams.init,
          response: response.clone()
        }) || response;
      }
    }
    return response;
  };
  clone() {
    const constructor = this.constructor;
    const next = new constructor(this.configuration);
    next.middleware = this.middleware.slice();
    return next;
  }
};
function isBlob(value) {
  return typeof Blob !== "undefined" && value instanceof Blob;
}
function isFormData(value) {
  return typeof FormData !== "undefined" && value instanceof FormData;
}
var ResponseError = class extends Error {
  constructor(response, msg) {
    super(msg);
    this.response = response;
  }
  name = "ResponseError";
};
var FetchError = class extends Error {
  constructor(cause, msg) {
    super(msg);
    this.cause = cause;
  }
  name = "FetchError";
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
  }
  name = "RequiredError";
};
var COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "	",
  pipes: "|"
};
function exists(json, key) {
  const value = json[key];
  return value !== null && value !== void 0;
}
function querystring(params, prefix = "") {
  return Object.keys(params).map((key) => querystringSingleKey(key, params[key], prefix)).filter((part) => part.length > 0).join("&");
}
function querystringSingleKey(key, value, keyPrefix = "") {
  const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);
  if (value instanceof Array) {
    const multiValue = value.map((singleValue) => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);
    return `${encodeURIComponent(fullKey)}=${multiValue}`;
  }
  if (value instanceof Set) {
    const valueAsArray = Array.from(value);
    return querystringSingleKey(key, valueAsArray, keyPrefix);
  }
  if (value instanceof Date) {
    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;
  }
  if (value instanceof Object) {
    return querystring(value, fullKey);
  }
  return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
}
function mapValues(data, fn) {
  return Object.keys(data).reduce(
    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),
    {}
  );
}
function canConsumeForm(consumes) {
  for (const consume of consumes) {
    if ("multipart/form-data" === consume.contentType) {
      return true;
    }
  }
  return false;
}
var JSONApiResponse = class {
  constructor(raw, transformer = (jsonValue) => jsonValue) {
    this.raw = raw;
    this.transformer = transformer;
  }
  async value() {
    return this.transformer(await this.raw.json());
  }
};
var VoidApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return void 0;
  }
};
var BlobApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return await this.raw.blob();
  }
};
var TextApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return await this.raw.text();
  }
};

// build/models/AccessToken.ts
function instanceOfAccessToken(value) {
  let isInstance = true;
  isInstance = isInstance && "accessToken" in value;
  isInstance = isInstance && "expiresIn" in value;
  isInstance = isInstance && "expires" in value;
  return isInstance;
}
function AccessTokenFromJSON(json) {
  return AccessTokenFromJSONTyped(json, false);
}
function AccessTokenFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "accessToken": json["accessToken"],
    "expiresIn": json["expiresIn"],
    "expires": json["expires"],
    "email": !exists(json, "email") ? void 0 : json["email"],
    "userId": !exists(json, "userId") ? void 0 : json["userId"],
    "accountId": !exists(json, "accountId") ? void 0 : json["accountId"]
  };
}
function AccessTokenToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "accessToken": value.accessToken,
    "expiresIn": value.expiresIn,
    "expires": value.expires,
    "email": value.email,
    "userId": value.userId,
    "accountId": value.accountId
  };
}

// build/models/AccessTokenResponse.ts
function instanceOfAccessTokenResponse(value) {
  let isInstance = true;
  return isInstance;
}
function AccessTokenResponseFromJSON(json) {
  return AccessTokenResponseFromJSONTyped(json, false);
}
function AccessTokenResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : AccessTokenFromJSON(json["data"])
  };
}
function AccessTokenResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": AccessTokenToJSON(value.data)
  };
}

// build/models/Action.ts
function instanceOfAction(value) {
  let isInstance = true;
  isInstance = isInstance && "slug" in value;
  isInstance = isInstance && "label" in value;
  return isInstance;
}
function ActionFromJSON(json) {
  return ActionFromJSONTyped(json, false);
}
function ActionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "slug": json["slug"],
    "label": json["label"],
    "type": !exists(json, "type") ? void 0 : json["type"],
    "description": !exists(json, "description") ? void 0 : json["description"],
    "primary": !exists(json, "primary") ? void 0 : json["primary"]
  };
}
function ActionToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "slug": value.slug,
    "label": value.label,
    "type": value.type,
    "description": value.description,
    "primary": value.primary
  };
}

// build/models/EventTopic.ts
var EventTopic = {
  Spaceadded: "space:added",
  Spaceremoved: "space:removed",
  Workbookadded: "workbook:added",
  Workbookremoved: "workbook:removed",
  Useradded: "user:added",
  Userremoved: "user:removed",
  Useronline: "user:online",
  Useroffline: "user:offline",
  Uploadstarted: "upload:started",
  Uploadfailed: "upload:failed",
  Uploadcompleted: "upload:completed",
  Jobstarted: "job:started",
  Jobwaiting: "job:waiting",
  Jobupdated: "job:updated",
  Jobfailed: "job:failed",
  Jobcompleted: "job:completed",
  Jobdeleted: "job:deleted",
  Recordscreated: "records:created",
  Recordsupdated: "records:updated",
  Recordsdeleted: "records:deleted",
  Sheetvalidated: "sheet:validated",
  Filedeleted: "file:deleted",
  Actiontriggered: "action:triggered",
  Clientinit: "client:init"
};
function EventTopicFromJSON(json) {
  return EventTopicFromJSONTyped(json, false);
}
function EventTopicFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function EventTopicToJSON(value) {
  return value;
}

// build/models/Agent.ts
var AgentCompilerEnum = {
  Js: "js"
};
function instanceOfAgent(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  return isInstance;
}
function AgentFromJSON(json) {
  return AgentFromJSONTyped(json, false);
}
function AgentFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "topics": !exists(json, "topics") ? void 0 : json["topics"].map(EventTopicFromJSON),
    "compiler": !exists(json, "compiler") ? void 0 : json["compiler"],
    "source": !exists(json, "source") ? void 0 : json["source"]
  };
}
function AgentToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "topics": value.topics === void 0 ? void 0 : value.topics.map(EventTopicToJSON),
    "compiler": value.compiler,
    "source": value.source
  };
}

// build/models/AgentConfig.ts
var AgentConfigCompilerEnum = {
  Js: "js"
};
function instanceOfAgentConfig(value) {
  let isInstance = true;
  return isInstance;
}
function AgentConfigFromJSON(json) {
  return AgentConfigFromJSONTyped(json, false);
}
function AgentConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "topics": !exists(json, "topics") ? void 0 : json["topics"].map(EventTopicFromJSON),
    "compiler": !exists(json, "compiler") ? void 0 : json["compiler"],
    "source": !exists(json, "source") ? void 0 : json["source"]
  };
}
function AgentConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "topics": value.topics === void 0 ? void 0 : value.topics.map(EventTopicToJSON),
    "compiler": value.compiler,
    "source": value.source
  };
}

// build/models/AgentLog.ts
function instanceOfAgentLog(value) {
  let isInstance = true;
  isInstance = isInstance && "eventId" in value;
  isInstance = isInstance && "success" in value;
  isInstance = isInstance && "createdAt" in value;
  isInstance = isInstance && "completedAt" in value;
  return isInstance;
}
function AgentLogFromJSON(json) {
  return AgentLogFromJSONTyped(json, false);
}
function AgentLogFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "eventId": json["eventId"],
    "success": json["success"],
    "createdAt": json["createdAt"],
    "completedAt": json["completedAt"],
    "log": !exists(json, "log") ? void 0 : json["log"]
  };
}
function AgentLogToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "eventId": value.eventId,
    "success": value.success,
    "createdAt": value.createdAt,
    "completedAt": value.completedAt,
    "log": value.log
  };
}

// build/models/Pagination.ts
function instanceOfPagination(value) {
  let isInstance = true;
  isInstance = isInstance && "currentPage" in value;
  isInstance = isInstance && "pageCount" in value;
  isInstance = isInstance && "totalCount" in value;
  return isInstance;
}
function PaginationFromJSON(json) {
  return PaginationFromJSONTyped(json, false);
}
function PaginationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "currentPage": json["currentPage"],
    "pageCount": json["pageCount"],
    "totalCount": json["totalCount"]
  };
}
function PaginationToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "currentPage": value.currentPage,
    "pageCount": value.pageCount,
    "totalCount": value.totalCount
  };
}

// build/models/AgentLogsResponse.ts
function instanceOfAgentLogsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function AgentLogsResponseFromJSON(json) {
  return AgentLogsResponseFromJSONTyped(json, false);
}
function AgentLogsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "pagination": !exists(json, "pagination") ? void 0 : PaginationFromJSON(json["pagination"]),
    "data": !exists(json, "data") ? void 0 : json["data"].map(AgentLogFromJSON)
  };
}
function AgentLogsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "pagination": PaginationToJSON(value.pagination),
    "data": value.data === void 0 ? void 0 : value.data.map(AgentLogToJSON)
  };
}

// build/models/AgentResponse.ts
function instanceOfAgentResponse(value) {
  let isInstance = true;
  return isInstance;
}
function AgentResponseFromJSON(json) {
  return AgentResponseFromJSONTyped(json, false);
}
function AgentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : AgentFromJSON(json["data"])
  };
}
function AgentResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": AgentToJSON(value.data)
  };
}

// build/models/AgentStats.ts
function instanceOfAgentStats(value) {
  let isInstance = true;
  return isInstance;
}
function AgentStatsFromJSON(json) {
  return AgentStatsFromJSONTyped(json, false);
}
function AgentStatsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "start": !exists(json, "start") ? void 0 : new Date(json["start"]),
    "end": !exists(json, "end") ? void 0 : new Date(json["end"]),
    "executions": !exists(json, "executions") ? void 0 : json["executions"],
    "succeeded": !exists(json, "succeeded") ? void 0 : json["succeeded"],
    "failed": !exists(json, "failed") ? void 0 : json["failed"]
  };
}
function AgentStatsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "start": value.start === void 0 ? void 0 : value.start.toISOString(),
    "end": value.end === void 0 ? void 0 : value.end.toISOString(),
    "executions": value.executions,
    "succeeded": value.succeeded,
    "failed": value.failed
  };
}

// build/models/AgentsResponse.ts
function instanceOfAgentsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function AgentsResponseFromJSON(json) {
  return AgentsResponseFromJSONTyped(json, false);
}
function AgentsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(AgentFromJSON)
  };
}
function AgentsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(AgentToJSON)
  };
}

// build/models/ApiCredentials.ts
function instanceOfApiCredentials(value) {
  let isInstance = true;
  isInstance = isInstance && "clientId" in value;
  isInstance = isInstance && "secret" in value;
  return isInstance;
}
function ApiCredentialsFromJSON(json) {
  return ApiCredentialsFromJSONTyped(json, false);
}
function ApiCredentialsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "clientId": json["clientId"],
    "secret": json["secret"]
  };
}
function ApiCredentialsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "clientId": value.clientId,
    "secret": value.secret
  };
}

// build/models/ApiKeyOperationsInner.ts
function instanceOfApiKeyOperationsInner(value) {
  let isInstance = true;
  isInstance = isInstance && "path" in value;
  isInstance = isInstance && "method" in value;
  return isInstance;
}
function ApiKeyOperationsInnerFromJSON(json) {
  return ApiKeyOperationsInnerFromJSONTyped(json, false);
}
function ApiKeyOperationsInnerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "path": json["path"],
    "method": json["method"]
  };
}
function ApiKeyOperationsInnerToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "path": value.path,
    "method": value.method
  };
}

// build/models/ApiKey.ts
var ApiKeyTypeEnum = {
  Publishable: "PUBLISHABLE",
  Secret: "SECRET"
};
function instanceOfApiKey(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "rawKey" in value;
  isInstance = isInstance && "type" in value;
  isInstance = isInstance && "createdAt" in value;
  isInstance = isInstance && "expireAt" in value;
  return isInstance;
}
function ApiKeyFromJSON(json) {
  return ApiKeyFromJSONTyped(json, false);
}
function ApiKeyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "rawKey": json["rawKey"],
    "type": json["type"],
    "environmentId": !exists(json, "environmentId") ? void 0 : json["environmentId"],
    "accountId": !exists(json, "accountId") ? void 0 : json["accountId"],
    "operations": !exists(json, "operations") ? void 0 : json["operations"].map(ApiKeyOperationsInnerFromJSON),
    "createdAt": new Date(json["createdAt"]),
    "updatedAt": !exists(json, "updatedAt") ? void 0 : new Date(json["updatedAt"]),
    "expireAt": new Date(json["expireAt"]),
    "secret": !exists(json, "secret") ? void 0 : json["secret"]
  };
}
function ApiKeyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "rawKey": value.rawKey,
    "type": value.type,
    "environmentId": value.environmentId,
    "accountId": value.accountId,
    "operations": value.operations === void 0 ? void 0 : value.operations.map(ApiKeyOperationsInnerToJSON),
    "createdAt": value.createdAt.toISOString(),
    "updatedAt": value.updatedAt === void 0 ? void 0 : value.updatedAt.toISOString(),
    "expireAt": value.expireAt.toISOString(),
    "secret": value.secret
  };
}

// build/models/ApiKeysResponse.ts
function instanceOfApiKeysResponse(value) {
  let isInstance = true;
  return isInstance;
}
function ApiKeysResponseFromJSON(json) {
  return ApiKeysResponseFromJSONTyped(json, false);
}
function ApiKeysResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(ApiKeyFromJSON)
  };
}
function ApiKeysResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(ApiKeyToJSON)
  };
}

// build/models/ApiToken.ts
function instanceOfApiToken(value) {
  let isInstance = true;
  isInstance = isInstance && "clientId" in value;
  isInstance = isInstance && "description" in value;
  isInstance = isInstance && "metadata" in value;
  isInstance = isInstance && "createdAt" in value;
  return isInstance;
}
function ApiTokenFromJSON(json) {
  return ApiTokenFromJSONTyped(json, false);
}
function ApiTokenFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "clientId": json["clientId"],
    "description": json["description"],
    "metadata": json["metadata"],
    "createdAt": json["createdAt"],
    "secret": !exists(json, "secret") ? void 0 : json["secret"]
  };
}
function ApiTokenToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "clientId": value.clientId,
    "description": value.description,
    "metadata": value.metadata,
    "createdAt": value.createdAt,
    "secret": value.secret
  };
}

// build/models/ApiTokenResponse.ts
function instanceOfApiTokenResponse(value) {
  let isInstance = true;
  return isInstance;
}
function ApiTokenResponseFromJSON(json) {
  return ApiTokenResponseFromJSONTyped(json, false);
}
function ApiTokenResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : ApiTokenFromJSON(json["data"])
  };
}
function ApiTokenResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": ApiTokenToJSON(value.data)
  };
}

// build/models/ApiTokensResponse.ts
function instanceOfApiTokensResponse(value) {
  let isInstance = true;
  return isInstance;
}
function ApiTokensResponseFromJSON(json) {
  return ApiTokensResponseFromJSONTyped(json, false);
}
function ApiTokensResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "pagination": !exists(json, "pagination") ? void 0 : PaginationFromJSON(json["pagination"]),
    "data": !exists(json, "data") ? void 0 : json["data"].map(ApiTokenFromJSON)
  };
}
function ApiTokensResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "pagination": PaginationToJSON(value.pagination),
    "data": value.data === void 0 ? void 0 : value.data.map(ApiTokenToJSON)
  };
}

// build/models/AppVersionResponse.ts
function instanceOfAppVersionResponse(value) {
  let isInstance = true;
  return isInstance;
}
function AppVersionResponseFromJSON(json) {
  return AppVersionResponseFromJSONTyped(json, false);
}
function AppVersionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "commit": !exists(json, "commit") ? void 0 : json["commit"],
    "version": !exists(json, "version") ? void 0 : json["version"]
  };
}
function AppVersionResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "commit": value.commit,
    "version": value.version
  };
}

// build/models/ArrayableProperty.ts
function instanceOfArrayableProperty(value) {
  let isInstance = true;
  return isInstance;
}
function ArrayablePropertyFromJSON(json) {
  return ArrayablePropertyFromJSONTyped(json, false);
}
function ArrayablePropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "isArray": !exists(json, "is_array") ? void 0 : json["is_array"]
  };
}
function ArrayablePropertyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "is_array": value.isArray
  };
}

// build/models/BaseConstraint.ts
var BaseConstraintTypeEnum = {
  Required: "required",
  Unique: "unique",
  Computed: "computed"
};
function instanceOfBaseConstraint(value) {
  let isInstance = true;
  isInstance = isInstance && "type" in value;
  return isInstance;
}
function BaseConstraintFromJSON(json) {
  return BaseConstraintFromJSONTyped(json, false);
}
function BaseConstraintFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": json["type"]
  };
}
function BaseConstraintToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type
  };
}

// build/models/ComputedConstraint.ts
var ComputedConstraintTypeEnum = {
  Computed: "computed"
};
function instanceOfComputedConstraint(value) {
  let isInstance = true;
  isInstance = isInstance && "type" in value;
  return isInstance;
}
function ComputedConstraintFromJSON(json) {
  return ComputedConstraintFromJSONTyped(json, false);
}
function ComputedConstraintFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": json["type"]
  };
}
function ComputedConstraintToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type
  };
}

// build/models/RequiredConstraint.ts
var RequiredConstraintTypeEnum = {
  Required: "required"
};
function instanceOfRequiredConstraint(value) {
  let isInstance = true;
  isInstance = isInstance && "type" in value;
  return isInstance;
}
function RequiredConstraintFromJSON(json) {
  return RequiredConstraintFromJSONTyped(json, false);
}
function RequiredConstraintFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": json["type"]
  };
}
function RequiredConstraintToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type
  };
}

// build/models/UniqueConstraintAllOfConfig.ts
function instanceOfUniqueConstraintAllOfConfig(value) {
  let isInstance = true;
  return isInstance;
}
function UniqueConstraintAllOfConfigFromJSON(json) {
  return UniqueConstraintAllOfConfigFromJSONTyped(json, false);
}
function UniqueConstraintAllOfConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "caseSensitive": !exists(json, "case_sensitive") ? void 0 : json["case_sensitive"],
    "ignoreEmpty": !exists(json, "ignore_empty") ? void 0 : json["ignore_empty"]
  };
}
function UniqueConstraintAllOfConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "case_sensitive": value.caseSensitive,
    "ignore_empty": value.ignoreEmpty
  };
}

// build/models/UniqueConstraint.ts
var UniqueConstraintTypeEnum = {
  Unique: "unique"
};
function instanceOfUniqueConstraint(value) {
  let isInstance = true;
  isInstance = isInstance && "type" in value;
  return isInstance;
}
function UniqueConstraintFromJSON(json) {
  return UniqueConstraintFromJSONTyped(json, false);
}
function UniqueConstraintFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": json["type"],
    "config": !exists(json, "config") ? void 0 : UniqueConstraintAllOfConfigFromJSON(json["config"])
  };
}
function UniqueConstraintToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "config": UniqueConstraintAllOfConfigToJSON(value.config)
  };
}

// build/models/Constraint.ts
function ConstraintFromJSON(json) {
  return ConstraintFromJSONTyped(json, false);
}
function ConstraintFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  switch (json["type"]) {
    case "computed":
      return { ...ComputedConstraintFromJSONTyped(json, true), type: "computed" };
    case "required":
      return { ...RequiredConstraintFromJSONTyped(json, true), type: "required" };
    case "unique":
      return { ...UniqueConstraintFromJSONTyped(json, true), type: "unique" };
    default:
      throw new Error(`No variant of Constraint exists with 'type=${json["type"]}'`);
  }
}
function ConstraintToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  switch (value["type"]) {
    case "computed":
      return ComputedConstraintToJSON(value);
    case "required":
      return RequiredConstraintToJSON(value);
    case "unique":
      return UniqueConstraintToJSON(value);
    default:
      throw new Error(`No variant of Constraint exists with 'type=${value["type"]}'`);
  }
}

// build/models/BaseProperty.ts
var BasePropertyTypeEnum = {
  String: "string",
  Number: "number",
  Boolean: "boolean",
  Date: "date",
  Enum: "enum",
  Reference: "reference"
};
function instanceOfBaseProperty(value) {
  let isInstance = true;
  isInstance = isInstance && "key" in value;
  return isInstance;
}
function BasePropertyFromJSON(json) {
  return BasePropertyFromJSONTyped(json, false);
}
function BasePropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "key": json["key"],
    "type": !exists(json, "type") ? void 0 : json["type"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "description": !exists(json, "description") ? void 0 : json["description"],
    "constraints": !exists(json, "constraints") ? void 0 : json["constraints"].map(ConstraintFromJSON),
    "readonly": !exists(json, "readonly") ? void 0 : json["readonly"]
  };
}
function BasePropertyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "key": value.key,
    "type": value.type,
    "label": value.label,
    "description": value.description,
    "constraints": value.constraints === void 0 ? void 0 : value.constraints.map(ConstraintToJSON),
    "readonly": value.readonly
  };
}

// build/models/BaseSideBarConfig.ts
var BaseSideBarConfigTypeEnum = {
  Workbook: "workbook",
  Document: "document",
  Link: "link"
};
function instanceOfBaseSideBarConfig(value) {
  let isInstance = true;
  return isInstance;
}
function BaseSideBarConfigFromJSON(json) {
  return BaseSideBarConfigFromJSONTyped(json, false);
}
function BaseSideBarConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"]
  };
}
function BaseSideBarConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type
  };
}

// build/models/BooleanPropertyAllOfConfig.ts
function instanceOfBooleanPropertyAllOfConfig(value) {
  let isInstance = true;
  return isInstance;
}
function BooleanPropertyAllOfConfigFromJSON(json) {
  return BooleanPropertyAllOfConfigFromJSONTyped(json, false);
}
function BooleanPropertyAllOfConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "allowIndeterminate": !exists(json, "allow_indeterminate") ? void 0 : json["allow_indeterminate"]
  };
}
function BooleanPropertyAllOfConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "allow_indeterminate": value.allowIndeterminate
  };
}

// build/models/BooleanProperty.ts
var BooleanPropertyTypeEnum = {
  Boolean: "boolean"
};
function instanceOfBooleanProperty(value) {
  let isInstance = true;
  isInstance = isInstance && "key" in value;
  return isInstance;
}
function BooleanPropertyFromJSON(json) {
  return BooleanPropertyFromJSONTyped(json, false);
}
function BooleanPropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "key": json["key"],
    "type": !exists(json, "type") ? void 0 : json["type"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "description": !exists(json, "description") ? void 0 : json["description"],
    "constraints": !exists(json, "constraints") ? void 0 : json["constraints"].map(ConstraintFromJSON),
    "readonly": !exists(json, "readonly") ? void 0 : json["readonly"],
    "config": !exists(json, "config") ? void 0 : BooleanPropertyAllOfConfigFromJSON(json["config"])
  };
}
function BooleanPropertyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "key": value.key,
    "type": value.type,
    "label": value.label,
    "description": value.description,
    "constraints": value.constraints === void 0 ? void 0 : value.constraints.map(ConstraintToJSON),
    "readonly": value.readonly,
    "config": BooleanPropertyAllOfConfigToJSON(value.config)
  };
}

// build/models/DateProperty.ts
var DatePropertyTypeEnum = {
  Date: "date"
};
function instanceOfDateProperty(value) {
  let isInstance = true;
  isInstance = isInstance && "key" in value;
  return isInstance;
}
function DatePropertyFromJSON(json) {
  return DatePropertyFromJSONTyped(json, false);
}
function DatePropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "key": json["key"],
    "type": !exists(json, "type") ? void 0 : json["type"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "description": !exists(json, "description") ? void 0 : json["description"],
    "constraints": !exists(json, "constraints") ? void 0 : json["constraints"].map(ConstraintFromJSON),
    "readonly": !exists(json, "readonly") ? void 0 : json["readonly"]
  };
}
function DatePropertyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "key": value.key,
    "type": value.type,
    "label": value.label,
    "description": value.description,
    "constraints": value.constraints === void 0 ? void 0 : value.constraints.map(ConstraintToJSON),
    "readonly": value.readonly
  };
}

// build/models/EnumPropertyOptionValue.ts
function instanceOfEnumPropertyOptionValue(value) {
  let isInstance = true;
  return isInstance;
}
function EnumPropertyOptionValueFromJSON(json) {
  return EnumPropertyOptionValueFromJSONTyped(json, false);
}
function EnumPropertyOptionValueFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function EnumPropertyOptionValueToJSON(value) {
  return value;
}

// build/models/EnumPropertyOption.ts
function instanceOfEnumPropertyOption(value) {
  let isInstance = true;
  isInstance = isInstance && "value" in value;
  return isInstance;
}
function EnumPropertyOptionFromJSON(json) {
  return EnumPropertyOptionFromJSONTyped(json, false);
}
function EnumPropertyOptionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "value": EnumPropertyOptionValueFromJSON(json["value"]),
    "label": !exists(json, "label") ? void 0 : json["label"],
    "color": !exists(json, "color") ? void 0 : json["color"],
    "icon": !exists(json, "icon") ? void 0 : json["icon"],
    "meta": !exists(json, "meta") ? void 0 : json["meta"]
  };
}
function EnumPropertyOptionToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "value": EnumPropertyOptionValueToJSON(value.value),
    "label": value.label,
    "color": value.color,
    "icon": value.icon,
    "meta": value.meta
  };
}

// build/models/EnumPropertyAllOfConfig.ts
function instanceOfEnumPropertyAllOfConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "options" in value;
  return isInstance;
}
function EnumPropertyAllOfConfigFromJSON(json) {
  return EnumPropertyAllOfConfigFromJSONTyped(json, false);
}
function EnumPropertyAllOfConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "allowCustom": !exists(json, "allow_custom") ? void 0 : json["allow_custom"],
    "options": json["options"].map(EnumPropertyOptionFromJSON)
  };
}
function EnumPropertyAllOfConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "allow_custom": value.allowCustom,
    "options": value.options.map(EnumPropertyOptionToJSON)
  };
}

// build/models/EnumProperty.ts
var EnumPropertyTypeEnum = {
  Enum: "enum"
};
function instanceOfEnumProperty(value) {
  let isInstance = true;
  isInstance = isInstance && "key" in value;
  isInstance = isInstance && "config" in value;
  return isInstance;
}
function EnumPropertyFromJSON(json) {
  return EnumPropertyFromJSONTyped(json, false);
}
function EnumPropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "key": json["key"],
    "type": !exists(json, "type") ? void 0 : json["type"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "description": !exists(json, "description") ? void 0 : json["description"],
    "constraints": !exists(json, "constraints") ? void 0 : json["constraints"].map(ConstraintFromJSON),
    "readonly": !exists(json, "readonly") ? void 0 : json["readonly"],
    "isArray": !exists(json, "is_array") ? void 0 : json["is_array"],
    "config": EnumPropertyAllOfConfigFromJSON(json["config"])
  };
}
function EnumPropertyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "key": value.key,
    "type": value.type,
    "label": value.label,
    "description": value.description,
    "constraints": value.constraints === void 0 ? void 0 : value.constraints.map(ConstraintToJSON),
    "readonly": value.readonly,
    "is_array": value.isArray,
    "config": EnumPropertyAllOfConfigToJSON(value.config)
  };
}

// build/models/NumberPropertyAllOfConfig.ts
function instanceOfNumberPropertyAllOfConfig(value) {
  let isInstance = true;
  return isInstance;
}
function NumberPropertyAllOfConfigFromJSON(json) {
  return NumberPropertyAllOfConfigFromJSONTyped(json, false);
}
function NumberPropertyAllOfConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "decimalPlaces": !exists(json, "decimal_places") ? void 0 : json["decimal_places"]
  };
}
function NumberPropertyAllOfConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "decimal_places": value.decimalPlaces
  };
}

// build/models/NumberProperty.ts
var NumberPropertyTypeEnum = {
  Number: "number"
};
function instanceOfNumberProperty(value) {
  let isInstance = true;
  isInstance = isInstance && "key" in value;
  return isInstance;
}
function NumberPropertyFromJSON(json) {
  return NumberPropertyFromJSONTyped(json, false);
}
function NumberPropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "key": json["key"],
    "type": !exists(json, "type") ? void 0 : json["type"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "description": !exists(json, "description") ? void 0 : json["description"],
    "constraints": !exists(json, "constraints") ? void 0 : json["constraints"].map(ConstraintFromJSON),
    "readonly": !exists(json, "readonly") ? void 0 : json["readonly"],
    "isArray": !exists(json, "is_array") ? void 0 : json["is_array"],
    "config": !exists(json, "config") ? void 0 : NumberPropertyAllOfConfigFromJSON(json["config"])
  };
}
function NumberPropertyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "key": value.key,
    "type": value.type,
    "label": value.label,
    "description": value.description,
    "constraints": value.constraints === void 0 ? void 0 : value.constraints.map(ConstraintToJSON),
    "readonly": value.readonly,
    "is_array": value.isArray,
    "config": NumberPropertyAllOfConfigToJSON(value.config)
  };
}

// build/models/ReferencePropertyAllOfConfig.ts
var ReferencePropertyAllOfConfigRelationshipEnum = {
  One: "has-one",
  Many: "has-many"
};
function instanceOfReferencePropertyAllOfConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "ref" in value;
  isInstance = isInstance && "relationship" in value;
  return isInstance;
}
function ReferencePropertyAllOfConfigFromJSON(json) {
  return ReferencePropertyAllOfConfigFromJSONTyped(json, false);
}
function ReferencePropertyAllOfConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "ref": json["ref"],
    "key": !exists(json, "key") ? void 0 : json["key"],
    "relationship": json["relationship"]
  };
}
function ReferencePropertyAllOfConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "ref": value.ref,
    "key": value.key,
    "relationship": value.relationship
  };
}

// build/models/ReferenceProperty.ts
var ReferencePropertyTypeEnum = {
  Reference: "reference"
};
function instanceOfReferenceProperty(value) {
  let isInstance = true;
  isInstance = isInstance && "key" in value;
  isInstance = isInstance && "config" in value;
  return isInstance;
}
function ReferencePropertyFromJSON(json) {
  return ReferencePropertyFromJSONTyped(json, false);
}
function ReferencePropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "key": json["key"],
    "type": !exists(json, "type") ? void 0 : json["type"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "description": !exists(json, "description") ? void 0 : json["description"],
    "constraints": !exists(json, "constraints") ? void 0 : json["constraints"].map(ConstraintFromJSON),
    "readonly": !exists(json, "readonly") ? void 0 : json["readonly"],
    "isArray": !exists(json, "is_array") ? void 0 : json["is_array"],
    "config": ReferencePropertyAllOfConfigFromJSON(json["config"])
  };
}
function ReferencePropertyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "key": value.key,
    "type": value.type,
    "label": value.label,
    "description": value.description,
    "constraints": value.constraints === void 0 ? void 0 : value.constraints.map(ConstraintToJSON),
    "readonly": value.readonly,
    "is_array": value.isArray,
    "config": ReferencePropertyAllOfConfigToJSON(value.config)
  };
}

// build/models/StringProperty.ts
var StringPropertyTypeEnum = {
  String: "string"
};
function instanceOfStringProperty(value) {
  let isInstance = true;
  isInstance = isInstance && "key" in value;
  return isInstance;
}
function StringPropertyFromJSON(json) {
  return StringPropertyFromJSONTyped(json, false);
}
function StringPropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "key": json["key"],
    "type": !exists(json, "type") ? void 0 : json["type"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "description": !exists(json, "description") ? void 0 : json["description"],
    "constraints": !exists(json, "constraints") ? void 0 : json["constraints"].map(ConstraintFromJSON),
    "readonly": !exists(json, "readonly") ? void 0 : json["readonly"]
  };
}
function StringPropertyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "key": value.key,
    "type": value.type,
    "label": value.label,
    "description": value.description,
    "constraints": value.constraints === void 0 ? void 0 : value.constraints.map(ConstraintToJSON),
    "readonly": value.readonly
  };
}

// build/models/Property.ts
function PropertyFromJSON(json) {
  return PropertyFromJSONTyped(json, false);
}
function PropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  switch (json["type"]) {
    case "boolean":
      return { ...BooleanPropertyFromJSONTyped(json, true), type: "boolean" };
    case "date":
      return { ...DatePropertyFromJSONTyped(json, true), type: "date" };
    case "enum":
      return { ...EnumPropertyFromJSONTyped(json, true), type: "enum" };
    case "number":
      return { ...NumberPropertyFromJSONTyped(json, true), type: "number" };
    case "reference":
      return { ...ReferencePropertyFromJSONTyped(json, true), type: "reference" };
    case "string":
      return { ...StringPropertyFromJSONTyped(json, true), type: "string" };
    default:
      throw new Error(`No variant of Property exists with 'type=${json["type"]}'`);
  }
}
function PropertyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  switch (value["type"]) {
    case "boolean":
      return BooleanPropertyToJSON(value);
    case "date":
      return DatePropertyToJSON(value);
    case "enum":
      return EnumPropertyToJSON(value);
    case "number":
      return NumberPropertyToJSON(value);
    case "reference":
      return ReferencePropertyToJSON(value);
    case "string":
      return StringPropertyToJSON(value);
    default:
      throw new Error(`No variant of Property exists with 'type=${value["type"]}'`);
  }
}

// build/models/SheetAccess.ts
var SheetAccess = {
  Star: "*",
  Add: "add",
  Edit: "edit",
  Delete: "delete",
  Import: "import"
};
function SheetAccessFromJSON(json) {
  return SheetAccessFromJSONTyped(json, false);
}
function SheetAccessFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function SheetAccessToJSON(value) {
  return value;
}

// build/models/SheetConfig.ts
function instanceOfSheetConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "fields" in value;
  return isInstance;
}
function SheetConfigFromJSON(json) {
  return SheetConfigFromJSONTyped(json, false);
}
function SheetConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "name": json["name"],
    "description": !exists(json, "description") ? void 0 : json["description"],
    "slug": !exists(json, "slug") ? void 0 : json["slug"],
    "readonly": !exists(json, "readonly") ? void 0 : json["readonly"],
    "access": !exists(json, "access") ? void 0 : json["access"].map(SheetAccessFromJSON),
    "fields": json["fields"].map(PropertyFromJSON),
    "actions": !exists(json, "actions") ? void 0 : json["actions"].map(ActionFromJSON)
  };
}
function SheetConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "name": value.name,
    "description": value.description,
    "slug": value.slug,
    "readonly": value.readonly,
    "access": value.access === void 0 ? void 0 : value.access.map(SheetAccessToJSON),
    "fields": value.fields.map(PropertyToJSON),
    "actions": value.actions === void 0 ? void 0 : value.actions.map(ActionToJSON)
  };
}

// build/models/Blueprint.ts
function instanceOfBlueprint(value) {
  let isInstance = true;
  isInstance = isInstance && "slug" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "sheets" in value;
  return isInstance;
}
function BlueprintFromJSON(json) {
  return BlueprintFromJSONTyped(json, false);
}
function BlueprintFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "slug": json["slug"],
    "name": json["name"],
    "primary": !exists(json, "primary") ? void 0 : json["primary"],
    "sheets": json["sheets"].map(SheetConfigFromJSON)
  };
}
function BlueprintToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "slug": value.slug,
    "name": value.name,
    "primary": value.primary,
    "sheets": value.sheets.map(SheetConfigToJSON)
  };
}

// build/models/BooleanPropertyAllOf.ts
var BooleanPropertyAllOfTypeEnum = {
  Boolean: "boolean"
};
function instanceOfBooleanPropertyAllOf(value) {
  let isInstance = true;
  return isInstance;
}
function BooleanPropertyAllOfFromJSON(json) {
  return BooleanPropertyAllOfFromJSONTyped(json, false);
}
function BooleanPropertyAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"],
    "config": !exists(json, "config") ? void 0 : BooleanPropertyAllOfConfigFromJSON(json["config"])
  };
}
function BooleanPropertyAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "config": BooleanPropertyAllOfConfigToJSON(value.config)
  };
}

// build/models/CellValueValue.ts
function instanceOfCellValueValue(value) {
  let isInstance = true;
  return isInstance;
}
function CellValueValueFromJSON(json) {
  return CellValueValueFromJSONTyped(json, false);
}
function CellValueValueFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function CellValueValueToJSON(value) {
  return value;
}

// build/models/ValidationMessage.ts
var ValidationMessageTypeEnum = {
  Error: "error",
  Warn: "warn",
  Info: "info"
};
var ValidationMessageSourceEnum = {
  RequiredConstraint: "required-constraint",
  UniqueConstraint: "unique-constraint",
  CustomLogic: "custom-logic",
  Unlinked: "unlinked",
  InvalidOption: "invalid-option"
};
function instanceOfValidationMessage(value) {
  let isInstance = true;
  return isInstance;
}
function ValidationMessageFromJSON(json) {
  return ValidationMessageFromJSONTyped(json, false);
}
function ValidationMessageFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"],
    "source": !exists(json, "source") ? void 0 : json["source"],
    "message": !exists(json, "message") ? void 0 : json["message"]
  };
}
function ValidationMessageToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "source": value.source,
    "message": value.message
  };
}

// build/models/CellValue.ts
function instanceOfCellValue(value) {
  let isInstance = true;
  return isInstance;
}
function CellValueFromJSON(json) {
  return CellValueFromJSONTyped(json, false);
}
function CellValueFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "value": !exists(json, "value") ? void 0 : CellValueValueFromJSON(json["value"]),
    "valid": !exists(json, "valid") ? void 0 : json["valid"],
    "messages": !exists(json, "messages") ? void 0 : json["messages"].map(ValidationMessageFromJSON)
  };
}
function CellValueToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "value": CellValueValueToJSON(value.value),
    "valid": value.valid,
    "messages": value.messages === void 0 ? void 0 : value.messages.map(ValidationMessageToJSON)
  };
}

// build/models/RecordCounts.ts
function instanceOfRecordCounts(value) {
  let isInstance = true;
  return isInstance;
}
function RecordCountsFromJSON(json) {
  return RecordCountsFromJSONTyped(json, false);
}
function RecordCountsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "total": !exists(json, "total") ? void 0 : json["total"],
    "valid": !exists(json, "valid") ? void 0 : json["valid"],
    "error": !exists(json, "error") ? void 0 : json["error"],
    "filtered": !exists(json, "filtered") ? void 0 : json["filtered"]
  };
}
function RecordCountsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "total": value.total,
    "valid": value.valid,
    "error": value.error,
    "filtered": value.filtered
  };
}

// build/models/CellValueWithCounts.ts
function instanceOfCellValueWithCounts(value) {
  let isInstance = true;
  return isInstance;
}
function CellValueWithCountsFromJSON(json) {
  return CellValueWithCountsFromJSONTyped(json, false);
}
function CellValueWithCountsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "value": !exists(json, "value") ? void 0 : CellValueValueFromJSON(json["value"]),
    "valid": !exists(json, "valid") ? void 0 : json["valid"],
    "messages": !exists(json, "messages") ? void 0 : json["messages"].map(ValidationMessageFromJSON),
    "counts": !exists(json, "counts") ? void 0 : RecordCountsFromJSON(json["counts"])
  };
}
function CellValueWithCountsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "value": CellValueValueToJSON(value.value),
    "valid": value.valid,
    "messages": value.messages === void 0 ? void 0 : value.messages.map(ValidationMessageToJSON),
    "counts": RecordCountsToJSON(value.counts)
  };
}

// build/models/Records.ts
function instanceOfRecords(value) {
  let isInstance = true;
  return isInstance;
}
function RecordsFromJSON(json) {
  return RecordsFromJSONTyped(json, false);
}
function RecordsFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function RecordsToJSON(value) {
  return value;
}

// build/models/CellValueWithLinks.ts
function instanceOfCellValueWithLinks(value) {
  let isInstance = true;
  return isInstance;
}
function CellValueWithLinksFromJSON(json) {
  return CellValueWithLinksFromJSONTyped(json, false);
}
function CellValueWithLinksFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "links": !exists(json, "links") ? void 0 : RecordsFromJSON(json["links"]),
    "value": !exists(json, "value") ? void 0 : CellValueValueFromJSON(json["value"]),
    "valid": !exists(json, "valid") ? void 0 : json["valid"],
    "messages": !exists(json, "messages") ? void 0 : json["messages"].map(ValidationMessageFromJSON)
  };
}
function CellValueWithLinksToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "links": RecordsToJSON(value.links),
    "value": CellValueValueToJSON(value.value),
    "valid": value.valid,
    "messages": value.messages === void 0 ? void 0 : value.messages.map(ValidationMessageToJSON)
  };
}

// build/models/CellsResponseData.ts
function instanceOfCellsResponseData(value) {
  let isInstance = true;
  return isInstance;
}
function CellsResponseDataFromJSON(json) {
  return CellsResponseDataFromJSONTyped(json, false);
}
function CellsResponseDataFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function CellsResponseDataToJSON(value) {
  return value;
}

// build/models/CellsResponse.ts
function instanceOfCellsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function CellsResponseFromJSON(json) {
  return CellsResponseFromJSONTyped(json, false);
}
function CellsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : CellsResponseDataFromJSON(json["data"])
  };
}
function CellsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": CellsResponseDataToJSON(value.data)
  };
}

// build/models/ComputedConstraintAllOf.ts
var ComputedConstraintAllOfTypeEnum = {
  Computed: "computed"
};
function instanceOfComputedConstraintAllOf(value) {
  let isInstance = true;
  return isInstance;
}
function ComputedConstraintAllOfFromJSON(json) {
  return ComputedConstraintAllOfFromJSONTyped(json, false);
}
function ComputedConstraintAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"]
  };
}
function ComputedConstraintAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type
  };
}

// build/models/UserCredentials.ts
function instanceOfUserCredentials(value) {
  let isInstance = true;
  isInstance = isInstance && "email" in value;
  isInstance = isInstance && "password" in value;
  return isInstance;
}
function UserCredentialsFromJSON(json) {
  return UserCredentialsFromJSONTyped(json, false);
}
function UserCredentialsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "email": json["email"],
    "password": json["password"]
  };
}
function UserCredentialsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "email": value.email,
    "password": value.password
  };
}

// build/models/CreateAccessTokenRequest.ts
function CreateAccessTokenRequestFromJSON(json) {
  return CreateAccessTokenRequestFromJSONTyped(json, false);
}
function CreateAccessTokenRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return { ...ApiCredentialsFromJSONTyped(json, true), ...UserCredentialsFromJSONTyped(json, true) };
}
function CreateAccessTokenRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  if (instanceOfApiCredentials(value)) {
    return ApiCredentialsToJSON(value);
  }
  if (instanceOfUserCredentials(value)) {
    return UserCredentialsToJSON(value);
  }
  return {};
}

// build/models/CreateFileRequest.ts
function instanceOfCreateFileRequest(value) {
  let isInstance = true;
  return isInstance;
}
function CreateFileRequestFromJSON(json) {
  return CreateFileRequestFromJSONTyped(json, false);
}
function CreateFileRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "spaceId": !exists(json, "spaceId") ? void 0 : json["spaceId"],
    "environmentId": !exists(json, "environmentId") ? void 0 : json["environmentId"],
    "file": !exists(json, "file") ? void 0 : json["file"]
  };
}
function CreateFileRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "spaceId": value.spaceId,
    "environmentId": value.environmentId,
    "file": value.file
  };
}

// build/models/DatePropertyAllOf.ts
var DatePropertyAllOfTypeEnum = {
  Date: "date"
};
function instanceOfDatePropertyAllOf(value) {
  let isInstance = true;
  return isInstance;
}
function DatePropertyAllOfFromJSON(json) {
  return DatePropertyAllOfFromJSONTyped(json, false);
}
function DatePropertyAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"]
  };
}
function DatePropertyAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type
  };
}

// build/models/Filter.ts
var Filter = {
  Valid: "valid",
  Error: "error",
  All: "all",
  None: "none"
};
function FilterFromJSON(json) {
  return FilterFromJSONTyped(json, false);
}
function FilterFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function FilterToJSON(value) {
  return value;
}

// build/models/DeleteJobConfig.ts
function instanceOfDeleteJobConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "sheet" in value;
  return isInstance;
}
function DeleteJobConfigFromJSON(json) {
  return DeleteJobConfigFromJSONTyped(json, false);
}
function DeleteJobConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "filter": !exists(json, "filter") ? void 0 : FilterFromJSON(json["filter"]),
    "filterField": !exists(json, "filterField") ? void 0 : json["filterField"],
    "searchValue": !exists(json, "searchValue") ? void 0 : json["searchValue"],
    "searchField": !exists(json, "searchField") ? void 0 : json["searchField"],
    "sheet": json["sheet"],
    "exceptions": !exists(json, "exceptions") ? void 0 : json["exceptions"]
  };
}
function DeleteJobConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "filter": FilterToJSON(value.filter),
    "filterField": value.filterField,
    "searchValue": value.searchValue,
    "searchField": value.searchField,
    "sheet": value.sheet,
    "exceptions": value.exceptions
  };
}

// build/models/EnumMappingField1.ts
function instanceOfEnumMappingField1(value) {
  let isInstance = true;
  return isInstance;
}
function EnumMappingField1FromJSON(json) {
  return EnumMappingField1FromJSONTyped(json, false);
}
function EnumMappingField1FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "sourceValue": !exists(json, "sourceValue") ? void 0 : json["sourceValue"],
    "destinationValue": !exists(json, "destinationValue") ? void 0 : json["destinationValue"]
  };
}
function EnumMappingField1ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "sourceValue": value.sourceValue,
    "destinationValue": value.destinationValue
  };
}

// build/models/EnumDetails1.ts
function instanceOfEnumDetails1(value) {
  let isInstance = true;
  return isInstance;
}
function EnumDetails1FromJSON(json) {
  return EnumDetails1FromJSONTyped(json, false);
}
function EnumDetails1FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "mapping": !exists(json, "mapping") ? void 0 : json["mapping"].map(EnumMappingField1FromJSON),
    "unusedSourceValues": !exists(json, "unusedSourceValues") ? void 0 : json["unusedSourceValues"],
    "unusedDestinationValues": !exists(json, "unusedDestinationValues") ? void 0 : json["unusedDestinationValues"]
  };
}
function EnumDetails1ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "mapping": value.mapping === void 0 ? void 0 : value.mapping.map(EnumMappingField1ToJSON),
    "unusedSourceValues": value.unusedSourceValues,
    "unusedDestinationValues": value.unusedDestinationValues
  };
}

// build/models/FieldConfig.ts
function FieldConfigFromJSON(json) {
  return FieldConfigFromJSONTyped(json, false);
}
function FieldConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  switch (json["type"]) {
    case "boolean":
      return { ...BooleanPropertyFromJSONTyped(json, true), type: "boolean" };
    case "date":
      return { ...DatePropertyFromJSONTyped(json, true), type: "date" };
    case "enum":
      return { ...EnumPropertyFromJSONTyped(json, true), type: "enum" };
    case "number":
      return { ...NumberPropertyFromJSONTyped(json, true), type: "number" };
    case "reference":
      return { ...ReferencePropertyFromJSONTyped(json, true), type: "reference" };
    case "string":
      return { ...StringPropertyFromJSONTyped(json, true), type: "string" };
    default:
      throw new Error(`No variant of FieldConfig exists with 'type=${json["type"]}'`);
  }
}
function FieldConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  switch (value["type"]) {
    case "boolean":
      return BooleanPropertyToJSON(value);
    case "date":
      return DatePropertyToJSON(value);
    case "enum":
      return EnumPropertyToJSON(value);
    case "number":
      return NumberPropertyToJSON(value);
    case "reference":
      return ReferencePropertyToJSON(value);
    case "string":
      return StringPropertyToJSON(value);
    default:
      throw new Error(`No variant of FieldConfig exists with 'type=${value["type"]}'`);
  }
}

// build/models/DestinationField.ts
function instanceOfDestinationField(value) {
  let isInstance = true;
  isInstance = isInstance && "destinationField" in value;
  return isInstance;
}
function DestinationFieldFromJSON(json) {
  return DestinationFieldFromJSONTyped(json, false);
}
function DestinationFieldFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "enumDetails": !exists(json, "enumDetails") ? void 0 : EnumDetails1FromJSON(json["enumDetails"]),
    "destinationField": FieldConfigFromJSON(json["destinationField"]),
    "preview": !exists(json, "preview") ? void 0 : json["preview"]
  };
}
function DestinationFieldToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "enumDetails": EnumDetails1ToJSON(value.enumDetails),
    "destinationField": FieldConfigToJSON(value.destinationField),
    "preview": value.preview
  };
}

// build/models/Document.ts
function instanceOfDocument(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "title" in value;
  isInstance = isInstance && "body" in value;
  return isInstance;
}
function DocumentFromJSON(json) {
  return DocumentFromJSONTyped(json, false);
}
function DocumentFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "spaceId": !exists(json, "spaceId") ? void 0 : json["spaceId"],
    "title": json["title"],
    "body": json["body"]
  };
}
function DocumentToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "spaceId": value.spaceId,
    "title": value.title,
    "body": value.body
  };
}

// build/models/DocumentConfig.ts
function instanceOfDocumentConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "title" in value;
  isInstance = isInstance && "body" in value;
  return isInstance;
}
function DocumentConfigFromJSON(json) {
  return DocumentConfigFromJSONTyped(json, false);
}
function DocumentConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "title": json["title"],
    "body": json["body"]
  };
}
function DocumentConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "title": value.title,
    "body": value.body
  };
}

// build/models/DocumentResponse.ts
function instanceOfDocumentResponse(value) {
  let isInstance = true;
  return isInstance;
}
function DocumentResponseFromJSON(json) {
  return DocumentResponseFromJSONTyped(json, false);
}
function DocumentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : DocumentFromJSON(json["data"])
  };
}
function DocumentResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": DocumentToJSON(value.data)
  };
}

// build/models/DocumentSidebarConfig.ts
var DocumentSidebarConfigTypeEnum = {
  Workbook: "workbook",
  Document: "document",
  Link: "link"
};
function instanceOfDocumentSidebarConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "documentId" in value;
  return isInstance;
}
function DocumentSidebarConfigFromJSON(json) {
  return DocumentSidebarConfigFromJSONTyped(json, false);
}
function DocumentSidebarConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"],
    "documentId": json["documentId"]
  };
}
function DocumentSidebarConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "documentId": value.documentId
  };
}

// build/models/DocumentSidebarConfigAllOf.ts
function instanceOfDocumentSidebarConfigAllOf(value) {
  let isInstance = true;
  isInstance = isInstance && "documentId" in value;
  return isInstance;
}
function DocumentSidebarConfigAllOfFromJSON(json) {
  return DocumentSidebarConfigAllOfFromJSONTyped(json, false);
}
function DocumentSidebarConfigAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "documentId": json["documentId"]
  };
}
function DocumentSidebarConfigAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "documentId": value.documentId
  };
}

// build/models/DocumentsResponse.ts
function instanceOfDocumentsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function DocumentsResponseFromJSON(json) {
  return DocumentsResponseFromJSONTyped(json, false);
}
function DocumentsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(DocumentFromJSON)
  };
}
function DocumentsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(DocumentToJSON)
  };
}

// build/models/EdgeMetadata.ts
var EdgeMetadataCertaintyEnum = {
  Absolute: "absolute",
  Strong: "strong",
  Moderate: "moderate",
  Weak: "weak"
};
function instanceOfEdgeMetadata(value) {
  let isInstance = true;
  return isInstance;
}
function EdgeMetadataFromJSON(json) {
  return EdgeMetadataFromJSONTyped(json, false);
}
function EdgeMetadataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "certainty": !exists(json, "certainty") ? void 0 : json["certainty"],
    "source": !exists(json, "source") ? void 0 : json["source"]
  };
}
function EdgeMetadataToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "certainty": value.certainty,
    "source": value.source
  };
}

// build/models/EnumMappingField.ts
function instanceOfEnumMappingField(value) {
  let isInstance = true;
  return isInstance;
}
function EnumMappingFieldFromJSON(json) {
  return EnumMappingFieldFromJSONTyped(json, false);
}
function EnumMappingFieldFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "sourceValue": !exists(json, "sourceValue") ? void 0 : json["sourceValue"],
    "destinationValue": !exists(json, "destinationValue") ? void 0 : json["destinationValue"]
  };
}
function EnumMappingFieldToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "sourceValue": value.sourceValue,
    "destinationValue": value.destinationValue
  };
}

// build/models/EnumDetails.ts
function instanceOfEnumDetails(value) {
  let isInstance = true;
  return isInstance;
}
function EnumDetailsFromJSON(json) {
  return EnumDetailsFromJSONTyped(json, false);
}
function EnumDetailsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "mapping": !exists(json, "mapping") ? void 0 : json["mapping"].map(EnumMappingFieldFromJSON),
    "unusedSourceValues": !exists(json, "unusedSourceValues") ? void 0 : json["unusedSourceValues"],
    "unusedDestinationValues": !exists(json, "unusedDestinationValues") ? void 0 : json["unusedDestinationValues"]
  };
}
function EnumDetailsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "mapping": value.mapping === void 0 ? void 0 : value.mapping.map(EnumMappingFieldToJSON),
    "unusedSourceValues": value.unusedSourceValues,
    "unusedDestinationValues": value.unusedDestinationValues
  };
}

// build/models/Edge.ts
function instanceOfEdge(value) {
  let isInstance = true;
  isInstance = isInstance && "sourceField" in value;
  isInstance = isInstance && "destinationField" in value;
  return isInstance;
}
function EdgeFromJSON(json) {
  return EdgeFromJSONTyped(json, false);
}
function EdgeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "sourceField": FieldConfigFromJSON(json["sourceField"]),
    "destinationField": FieldConfigFromJSON(json["destinationField"]),
    "preview": !exists(json, "preview") ? void 0 : json["preview"],
    "enumDetails": !exists(json, "enumDetails") ? void 0 : EnumDetailsFromJSON(json["enumDetails"]),
    "metadata": !exists(json, "metadata") ? void 0 : EdgeMetadataFromJSON(json["metadata"])
  };
}
function EdgeToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "sourceField": FieldConfigToJSON(value.sourceField),
    "destinationField": FieldConfigToJSON(value.destinationField),
    "preview": value.preview,
    "enumDetails": EnumDetailsToJSON(value.enumDetails),
    "metadata": EdgeMetadataToJSON(value.metadata)
  };
}

// build/models/EnumPropertyAllOf.ts
var EnumPropertyAllOfTypeEnum = {
  Enum: "enum"
};
function instanceOfEnumPropertyAllOf(value) {
  let isInstance = true;
  isInstance = isInstance && "config" in value;
  return isInstance;
}
function EnumPropertyAllOfFromJSON(json) {
  return EnumPropertyAllOfFromJSONTyped(json, false);
}
function EnumPropertyAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"],
    "config": EnumPropertyAllOfConfigFromJSON(json["config"])
  };
}
function EnumPropertyAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "config": EnumPropertyAllOfConfigToJSON(value.config)
  };
}

// build/models/GuestAuthenticationEnum.ts
var GuestAuthenticationEnum = {
  SharedLink: "shared_link",
  MagicLink: "magic_link"
};
function GuestAuthenticationEnumFromJSON(json) {
  return GuestAuthenticationEnumFromJSONTyped(json, false);
}
function GuestAuthenticationEnumFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function GuestAuthenticationEnumToJSON(value) {
  return value;
}

// build/models/Environment.ts
function instanceOfEnvironment(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "isProd" in value;
  return isInstance;
}
function EnvironmentFromJSON(json) {
  return EnvironmentFromJSONTyped(json, false);
}
function EnvironmentFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "accountId": !exists(json, "accountId") ? void 0 : json["accountId"],
    "name": json["name"],
    "isProd": json["isProd"],
    "guestAuthentication": !exists(json, "guestAuthentication") ? void 0 : json["guestAuthentication"].map(GuestAuthenticationEnumFromJSON),
    "features": !exists(json, "features") ? void 0 : json["features"]
  };
}
function EnvironmentToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "accountId": value.accountId,
    "name": value.name,
    "isProd": value.isProd,
    "guestAuthentication": value.guestAuthentication === void 0 ? void 0 : value.guestAuthentication.map(GuestAuthenticationEnumToJSON),
    "features": value.features
  };
}

// build/models/EnvironmentConfig.ts
function instanceOfEnvironmentConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "isProd" in value;
  return isInstance;
}
function EnvironmentConfigFromJSON(json) {
  return EnvironmentConfigFromJSONTyped(json, false);
}
function EnvironmentConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "name": json["name"],
    "isProd": json["isProd"],
    "guestAuthentication": !exists(json, "guestAuthentication") ? void 0 : json["guestAuthentication"].map(GuestAuthenticationEnumFromJSON),
    "features": !exists(json, "features") ? void 0 : json["features"]
  };
}
function EnvironmentConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "name": value.name,
    "isProd": value.isProd,
    "guestAuthentication": value.guestAuthentication === void 0 ? void 0 : value.guestAuthentication.map(GuestAuthenticationEnumToJSON),
    "features": value.features
  };
}

// build/models/EnvironmentResponse.ts
function instanceOfEnvironmentResponse(value) {
  let isInstance = true;
  return isInstance;
}
function EnvironmentResponseFromJSON(json) {
  return EnvironmentResponseFromJSONTyped(json, false);
}
function EnvironmentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : EnvironmentFromJSON(json["data"])
  };
}
function EnvironmentResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": EnvironmentToJSON(value.data)
  };
}

// build/models/EnvironmentStatsResponseData.ts
function instanceOfEnvironmentStatsResponseData(value) {
  let isInstance = true;
  return isInstance;
}
function EnvironmentStatsResponseDataFromJSON(json) {
  return EnvironmentStatsResponseDataFromJSONTyped(json, false);
}
function EnvironmentStatsResponseDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "agentExecutions": !exists(json, "agentExecutions") ? void 0 : AgentStatsFromJSON(json["agentExecutions"])
  };
}
function EnvironmentStatsResponseDataToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "agentExecutions": AgentStatsToJSON(value.agentExecutions)
  };
}

// build/models/EnvironmentStatsResponse.ts
function instanceOfEnvironmentStatsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function EnvironmentStatsResponseFromJSON(json) {
  return EnvironmentStatsResponseFromJSONTyped(json, false);
}
function EnvironmentStatsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : EnvironmentStatsResponseDataFromJSON(json["data"])
  };
}
function EnvironmentStatsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": EnvironmentStatsResponseDataToJSON(value.data)
  };
}

// build/models/EnvironmentsResponse.ts
function instanceOfEnvironmentsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function EnvironmentsResponseFromJSON(json) {
  return EnvironmentsResponseFromJSONTyped(json, false);
}
function EnvironmentsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(EnvironmentFromJSON),
    "pagination": !exists(json, "pagination") ? void 0 : PaginationFromJSON(json["pagination"])
  };
}
function EnvironmentsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(EnvironmentToJSON),
    "pagination": PaginationToJSON(value.pagination)
  };
}

// build/models/ErrorResponseErrorsInner.ts
function instanceOfErrorResponseErrorsInner(value) {
  let isInstance = true;
  isInstance = isInstance && "message" in value;
  return isInstance;
}
function ErrorResponseErrorsInnerFromJSON(json) {
  return ErrorResponseErrorsInnerFromJSONTyped(json, false);
}
function ErrorResponseErrorsInnerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "key": !exists(json, "key") ? void 0 : json["key"],
    "message": json["message"]
  };
}
function ErrorResponseErrorsInnerToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "key": value.key,
    "message": value.message
  };
}

// build/models/ErrorResponse.ts
function instanceOfErrorResponse(value) {
  let isInstance = true;
  return isInstance;
}
function ErrorResponseFromJSON(json) {
  return ErrorResponseFromJSONTyped(json, false);
}
function ErrorResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "errors": !exists(json, "errors") ? void 0 : json["errors"].map(ErrorResponseErrorsInnerFromJSON)
  };
}
function ErrorResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "errors": value.errors === void 0 ? void 0 : value.errors.map(ErrorResponseErrorsInnerToJSON)
  };
}

// build/models/EventConfigAttributesProgress.ts
function instanceOfEventConfigAttributesProgress(value) {
  let isInstance = true;
  return isInstance;
}
function EventConfigAttributesProgressFromJSON(json) {
  return EventConfigAttributesProgressFromJSONTyped(json, false);
}
function EventConfigAttributesProgressFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "current": !exists(json, "current") ? void 0 : json["current"],
    "total": !exists(json, "total") ? void 0 : json["total"],
    "percent": !exists(json, "percent") ? void 0 : json["percent"]
  };
}
function EventConfigAttributesProgressToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "current": value.current,
    "total": value.total,
    "percent": value.percent
  };
}

// build/models/EventConfigAttributes.ts
function instanceOfEventConfigAttributes(value) {
  let isInstance = true;
  return isInstance;
}
function EventConfigAttributesFromJSON(json) {
  return EventConfigAttributesFromJSONTyped(json, false);
}
function EventConfigAttributesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "progress": !exists(json, "progress") ? void 0 : EventConfigAttributesProgressFromJSON(json["progress"])
  };
}
function EventConfigAttributesToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "progress": EventConfigAttributesProgressToJSON(value.progress)
  };
}

// build/models/EventConfigContextActorId.ts
function instanceOfEventConfigContextActorId(value) {
  let isInstance = true;
  return isInstance;
}
function EventConfigContextActorIdFromJSON(json) {
  return EventConfigContextActorIdFromJSONTyped(json, false);
}
function EventConfigContextActorIdFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function EventConfigContextActorIdToJSON(value) {
  return value;
}

// build/models/EventConfigContext.ts
function instanceOfEventConfigContext(value) {
  let isInstance = true;
  isInstance = isInstance && "accountId" in value;
  isInstance = isInstance && "environmentId" in value;
  return isInstance;
}
function EventConfigContextFromJSON(json) {
  return EventConfigContextFromJSONTyped(json, false);
}
function EventConfigContextFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "actionName": !exists(json, "actionName") ? void 0 : json["actionName"],
    "accountId": json["accountId"],
    "environmentId": json["environmentId"],
    "spaceId": !exists(json, "spaceId") ? void 0 : json["spaceId"],
    "workbookId": !exists(json, "workbookId") ? void 0 : json["workbookId"],
    "sheetId": !exists(json, "sheetId") ? void 0 : json["sheetId"],
    "sheetSlug": !exists(json, "sheetSlug") ? void 0 : json["sheetSlug"],
    "versionId": !exists(json, "versionId") ? void 0 : json["versionId"],
    "jobId": !exists(json, "jobId") ? void 0 : json["jobId"],
    "fileId": !exists(json, "fileId") ? void 0 : json["fileId"],
    "precedingEventId": !exists(json, "precedingEventId") ? void 0 : json["precedingEventId"],
    "actorId": !exists(json, "actorId") ? void 0 : EventConfigContextActorIdFromJSON(json["actorId"])
  };
}
function EventConfigContextToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "actionName": value.actionName,
    "accountId": value.accountId,
    "environmentId": value.environmentId,
    "spaceId": value.spaceId,
    "workbookId": value.workbookId,
    "sheetId": value.sheetId,
    "sheetSlug": value.sheetSlug,
    "versionId": value.versionId,
    "jobId": value.jobId,
    "fileId": value.fileId,
    "precedingEventId": value.precedingEventId,
    "actorId": EventConfigContextActorIdToJSON(value.actorId)
  };
}

// build/models/Event.ts
var EventDomainEnum = {
  File: "file",
  Space: "space",
  Workbook: "workbook",
  Job: "job"
};
function instanceOfEvent(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "domain" in value;
  isInstance = isInstance && "topic" in value;
  isInstance = isInstance && "context" in value;
  isInstance = isInstance && "payload" in value;
  return isInstance;
}
function EventFromJSON(json) {
  return EventFromJSONTyped(json, false);
}
function EventFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "domain": json["domain"],
    "topic": EventTopicFromJSON(json["topic"]),
    "context": EventConfigContextFromJSON(json["context"]),
    "attributes": !exists(json, "attributes") ? void 0 : EventConfigAttributesFromJSON(json["attributes"]),
    "payload": json["payload"],
    "callbackUrl": !exists(json, "callbackUrl") ? void 0 : json["callbackUrl"],
    "dataUrl": !exists(json, "dataUrl") ? void 0 : json["dataUrl"],
    "createdAt": !exists(json, "createdAt") ? void 0 : new Date(json["createdAt"]),
    "acknowledgedAt": !exists(json, "acknowledgedAt") ? void 0 : new Date(json["acknowledgedAt"]),
    "acknowledgedBy": !exists(json, "acknowledgedBy") ? void 0 : json["acknowledgedBy"],
    "target": !exists(json, "target") ? void 0 : json["target"]
  };
}
function EventToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "domain": value.domain,
    "topic": EventTopicToJSON(value.topic),
    "context": EventConfigContextToJSON(value.context),
    "attributes": EventConfigAttributesToJSON(value.attributes),
    "payload": value.payload,
    "callbackUrl": value.callbackUrl,
    "dataUrl": value.dataUrl,
    "createdAt": value.createdAt === void 0 ? void 0 : value.createdAt.toISOString(),
    "acknowledgedAt": value.acknowledgedAt === void 0 ? void 0 : value.acknowledgedAt.toISOString(),
    "acknowledgedBy": value.acknowledgedBy,
    "target": value.target
  };
}

// build/models/EventConfig.ts
var EventConfigDomainEnum = {
  File: "file",
  Space: "space",
  Workbook: "workbook",
  Job: "job"
};
function instanceOfEventConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "domain" in value;
  isInstance = isInstance && "topic" in value;
  isInstance = isInstance && "context" in value;
  isInstance = isInstance && "payload" in value;
  return isInstance;
}
function EventConfigFromJSON(json) {
  return EventConfigFromJSONTyped(json, false);
}
function EventConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "domain": json["domain"],
    "topic": EventTopicFromJSON(json["topic"]),
    "context": EventConfigContextFromJSON(json["context"]),
    "attributes": !exists(json, "attributes") ? void 0 : EventConfigAttributesFromJSON(json["attributes"]),
    "payload": json["payload"],
    "callbackUrl": !exists(json, "callbackUrl") ? void 0 : json["callbackUrl"],
    "dataUrl": !exists(json, "dataUrl") ? void 0 : json["dataUrl"],
    "createdAt": !exists(json, "createdAt") ? void 0 : new Date(json["createdAt"]),
    "acknowledgedAt": !exists(json, "acknowledgedAt") ? void 0 : new Date(json["acknowledgedAt"]),
    "acknowledgedBy": !exists(json, "acknowledgedBy") ? void 0 : json["acknowledgedBy"],
    "target": !exists(json, "target") ? void 0 : json["target"]
  };
}
function EventConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "domain": value.domain,
    "topic": EventTopicToJSON(value.topic),
    "context": EventConfigContextToJSON(value.context),
    "attributes": EventConfigAttributesToJSON(value.attributes),
    "payload": value.payload,
    "callbackUrl": value.callbackUrl,
    "dataUrl": value.dataUrl,
    "createdAt": value.createdAt === void 0 ? void 0 : value.createdAt.toISOString(),
    "acknowledgedAt": value.acknowledgedAt === void 0 ? void 0 : value.acknowledgedAt.toISOString(),
    "acknowledgedBy": value.acknowledgedBy,
    "target": value.target
  };
}

// build/models/EventResponse.ts
function instanceOfEventResponse(value) {
  let isInstance = true;
  return isInstance;
}
function EventResponseFromJSON(json) {
  return EventResponseFromJSONTyped(json, false);
}
function EventResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : EventFromJSON(json["data"])
  };
}
function EventResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": EventToJSON(value.data)
  };
}

// build/models/EventToken.ts
function instanceOfEventToken(value) {
  let isInstance = true;
  return isInstance;
}
function EventTokenFromJSON(json) {
  return EventTokenFromJSONTyped(json, false);
}
function EventTokenFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "accountId": !exists(json, "accountId") ? void 0 : json["accountId"],
    "subscribeKey": !exists(json, "subscribeKey") ? void 0 : json["subscribeKey"],
    "ttl": !exists(json, "ttl") ? void 0 : json["ttl"],
    "token": !exists(json, "token") ? void 0 : json["token"]
  };
}
function EventTokenToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "accountId": value.accountId,
    "subscribeKey": value.subscribeKey,
    "ttl": value.ttl,
    "token": value.token
  };
}

// build/models/EventTokenResponse.ts
function instanceOfEventTokenResponse(value) {
  let isInstance = true;
  return isInstance;
}
function EventTokenResponseFromJSON(json) {
  return EventTokenResponseFromJSONTyped(json, false);
}
function EventTokenResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : EventTokenFromJSON(json["data"])
  };
}
function EventTokenResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": EventTokenToJSON(value.data)
  };
}

// build/models/EventsResponse.ts
function instanceOfEventsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function EventsResponseFromJSON(json) {
  return EventsResponseFromJSONTyped(json, false);
}
function EventsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(EventFromJSON)
  };
}
function EventsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(EventToJSON)
  };
}

// build/models/ExchangeInvitationRequest.ts
function instanceOfExchangeInvitationRequest(value) {
  let isInstance = true;
  return isInstance;
}
function ExchangeInvitationRequestFromJSON(json) {
  return ExchangeInvitationRequestFromJSONTyped(json, false);
}
function ExchangeInvitationRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "token": !exists(json, "token") ? void 0 : json["token"],
    "email": !exists(json, "email") ? void 0 : json["email"],
    "spaceId": !exists(json, "spaceId") ? void 0 : json["spaceId"]
  };
}
function ExchangeInvitationRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "token": value.token,
    "email": value.email,
    "spaceId": value.spaceId
  };
}

// build/models/ExchangeTokenResponseData.ts
function instanceOfExchangeTokenResponseData(value) {
  let isInstance = true;
  isInstance = isInstance && "valid" in value;
  return isInstance;
}
function ExchangeTokenResponseDataFromJSON(json) {
  return ExchangeTokenResponseDataFromJSONTyped(json, false);
}
function ExchangeTokenResponseDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "valid": json["valid"],
    "token": !exists(json, "token") ? void 0 : json["token"],
    "sentTo": !exists(json, "sentTo") ? void 0 : json["sentTo"]
  };
}
function ExchangeTokenResponseDataToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "valid": value.valid,
    "token": value.token,
    "sentTo": value.sentTo
  };
}

// build/models/ExchangeTokenResponse.ts
function instanceOfExchangeTokenResponse(value) {
  let isInstance = true;
  return isInstance;
}
function ExchangeTokenResponseFromJSON(json) {
  return ExchangeTokenResponseFromJSONTyped(json, false);
}
function ExchangeTokenResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : ExchangeTokenResponseDataFromJSON(json["data"])
  };
}
function ExchangeTokenResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": ExchangeTokenResponseDataToJSON(value.data)
  };
}

// build/models/SortDirection.ts
var SortDirection = {
  Asc: "asc",
  Desc: "desc"
};
function SortDirectionFromJSON(json) {
  return SortDirectionFromJSONTyped(json, false);
}
function SortDirectionFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function SortDirectionToJSON(value) {
  return value;
}

// build/models/ExportOptions.ts
function instanceOfExportOptions(value) {
  let isInstance = true;
  return isInstance;
}
function ExportOptionsFromJSON(json) {
  return ExportOptionsFromJSONTyped(json, false);
}
function ExportOptionsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "versionId": !exists(json, "versionId") ? void 0 : json["versionId"],
    "sortField": !exists(json, "sortField") ? void 0 : json["sortField"],
    "sortDirection": !exists(json, "sortDirection") ? void 0 : SortDirectionFromJSON(json["sortDirection"]),
    "filter": !exists(json, "filter") ? void 0 : FilterFromJSON(json["filter"]),
    "filterField": !exists(json, "filterField") ? void 0 : json["filterField"],
    "searchValue": !exists(json, "searchValue") ? void 0 : json["searchValue"],
    "searchField": !exists(json, "searchField") ? void 0 : json["searchField"],
    "ids": !exists(json, "ids") ? void 0 : json["ids"]
  };
}
function ExportOptionsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "versionId": value.versionId,
    "sortField": value.sortField,
    "sortDirection": SortDirectionToJSON(value.sortDirection),
    "filter": FilterToJSON(value.filter),
    "filterField": value.filterField,
    "searchValue": value.searchValue,
    "searchField": value.searchField,
    "ids": value.ids
  };
}

// build/models/ExportJobConfig.ts
function instanceOfExportJobConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "options" in value;
  return isInstance;
}
function ExportJobConfigFromJSON(json) {
  return ExportJobConfigFromJSONTyped(json, false);
}
function ExportJobConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "options": ExportOptionsFromJSON(json["options"])
  };
}
function ExportJobConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "options": ExportOptionsToJSON(value.options)
  };
}

// build/models/ModelFileStatusEnum.ts
var ModelFileStatusEnum = {
  Partial: "partial",
  Complete: "complete",
  Archived: "archived",
  Purged: "purged",
  Failed: "failed"
};
function ModelFileStatusEnumFromJSON(json) {
  return ModelFileStatusEnumFromJSONTyped(json, false);
}
function ModelFileStatusEnumFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ModelFileStatusEnumToJSON(value) {
  return value;
}

// build/models/FileConfig.ts
function instanceOfFileConfig(value) {
  let isInstance = true;
  return isInstance;
}
function FileConfigFromJSON(json) {
  return FileConfigFromJSONTyped(json, false);
}
function FileConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "workbookId": !exists(json, "workbookId") ? void 0 : json["workbookId"],
    "status": !exists(json, "status") ? void 0 : ModelFileStatusEnumFromJSON(json["status"])
  };
}
function FileConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "workbookId": value.workbookId,
    "status": ModelFileStatusEnumToJSON(value.status)
  };
}

// build/models/FileJobConfig.ts
var FileJobConfigDriverEnum = {
  Csv: "csv"
};
function instanceOfFileJobConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "driver" in value;
  return isInstance;
}
function FileJobConfigFromJSON(json) {
  return FileJobConfigFromJSONTyped(json, false);
}
function FileJobConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "driver": json["driver"]
  };
}
function FileJobConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "driver": value.driver
  };
}

// build/models/FileResponse.ts
function instanceOfFileResponse(value) {
  let isInstance = true;
  isInstance = isInstance && "data" in value;
  return isInstance;
}
function FileResponseFromJSON(json) {
  return FileResponseFromJSONTyped(json, false);
}
function FileResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": json["data"]
  };
}
function FileResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data
  };
}

// build/models/FilesResponse.ts
function instanceOfFilesResponse(value) {
  let isInstance = true;
  return isInstance;
}
function FilesResponseFromJSON(json) {
  return FilesResponseFromJSONTyped(json, false);
}
function FilesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "pagination": !exists(json, "pagination") ? void 0 : PaginationFromJSON(json["pagination"]),
    "data": !exists(json, "data") ? void 0 : json["data"]
  };
}
function FilesResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "pagination": PaginationToJSON(value.pagination),
    "data": value.data
  };
}

// build/models/FronteggUser.ts
function instanceOfFronteggUser(value) {
  let isInstance = true;
  return isInstance;
}
function FronteggUserFromJSON(json) {
  return FronteggUserFromJSONTyped(json, false);
}
function FronteggUserFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "email": !exists(json, "email") ? void 0 : json["email"],
    "name": !exists(json, "name") ? void 0 : json["name"],
    "tenantId": !exists(json, "tenantId") ? void 0 : json["tenantId"]
  };
}
function FronteggUserToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "email": value.email,
    "name": value.name,
    "tenantId": value.tenantId
  };
}

// build/models/GetSpacesSortField.ts
var GetSpacesSortField = {
  Name: "name",
  WorkbooksCount: "workbooksCount",
  FilesCount: "filesCount",
  EnvironmentId: "environmentId",
  CreatedByUserName: "createdByUserName",
  CreatedAt: "createdAt"
};
function GetSpacesSortFieldFromJSON(json) {
  return GetSpacesSortFieldFromJSONTyped(json, false);
}
function GetSpacesSortFieldFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function GetSpacesSortFieldToJSON(value) {
  return value;
}

// build/models/GuestConfigSpacesInnerWorkbooksInner.ts
function instanceOfGuestConfigSpacesInnerWorkbooksInner(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  return isInstance;
}
function GuestConfigSpacesInnerWorkbooksInnerFromJSON(json) {
  return GuestConfigSpacesInnerWorkbooksInnerFromJSONTyped(json, false);
}
function GuestConfigSpacesInnerWorkbooksInnerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"]
  };
}
function GuestConfigSpacesInnerWorkbooksInnerToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id
  };
}

// build/models/GuestConfigSpacesInner.ts
function instanceOfGuestConfigSpacesInner(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  return isInstance;
}
function GuestConfigSpacesInnerFromJSON(json) {
  return GuestConfigSpacesInnerFromJSONTyped(json, false);
}
function GuestConfigSpacesInnerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "workbooks": !exists(json, "workbooks") ? void 0 : json["workbooks"].map(GuestConfigSpacesInnerWorkbooksInnerFromJSON),
    "lastAccessed": !exists(json, "lastAccessed") ? void 0 : new Date(json["lastAccessed"])
  };
}
function GuestConfigSpacesInnerToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "workbooks": value.workbooks === void 0 ? void 0 : value.workbooks.map(GuestConfigSpacesInnerWorkbooksInnerToJSON),
    "lastAccessed": value.lastAccessed === void 0 ? void 0 : value.lastAccessed.toISOString()
  };
}

// build/models/Guest.ts
function instanceOfGuest(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "environmentId" in value;
  isInstance = isInstance && "email" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "spaces" in value;
  return isInstance;
}
function GuestFromJSON(json) {
  return GuestFromJSONTyped(json, false);
}
function GuestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "environmentId": json["environmentId"],
    "email": json["email"],
    "name": json["name"],
    "spaces": json["spaces"].map(GuestConfigSpacesInnerFromJSON)
  };
}
function GuestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "environmentId": value.environmentId,
    "email": value.email,
    "name": value.name,
    "spaces": value.spaces.map(GuestConfigSpacesInnerToJSON)
  };
}

// build/models/GuestConfig.ts
function instanceOfGuestConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "environmentId" in value;
  isInstance = isInstance && "email" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "spaces" in value;
  return isInstance;
}
function GuestConfigFromJSON(json) {
  return GuestConfigFromJSONTyped(json, false);
}
function GuestConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "environmentId": json["environmentId"],
    "email": json["email"],
    "name": json["name"],
    "spaces": json["spaces"].map(GuestConfigSpacesInnerFromJSON)
  };
}
function GuestConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "environmentId": value.environmentId,
    "email": value.email,
    "name": value.name,
    "spaces": value.spaces.map(GuestConfigSpacesInnerToJSON)
  };
}

// build/models/GuestResponse.ts
function instanceOfGuestResponse(value) {
  let isInstance = true;
  return isInstance;
}
function GuestResponseFromJSON(json) {
  return GuestResponseFromJSONTyped(json, false);
}
function GuestResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : GuestFromJSON(json["data"])
  };
}
function GuestResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": GuestToJSON(value.data)
  };
}

// build/models/GuestsResponse.ts
function instanceOfGuestsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function GuestsResponseFromJSON(json) {
  return GuestsResponseFromJSONTyped(json, false);
}
function GuestsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(GuestFromJSON)
  };
}
function GuestsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(GuestToJSON)
  };
}

// build/models/HealthResponse.ts
function instanceOfHealthResponse(value) {
  let isInstance = true;
  return isInstance;
}
function HealthResponseFromJSON(json) {
  return HealthResponseFromJSONTyped(json, false);
}
function HealthResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "status": !exists(json, "status") ? void 0 : json["status"]
  };
}
function HealthResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "status": value.status
  };
}

// build/models/InviteGuestsRequestInner.ts
function instanceOfInviteGuestsRequestInner(value) {
  let isInstance = true;
  isInstance = isInstance && "guestId" in value;
  isInstance = isInstance && "spaceId" in value;
  return isInstance;
}
function InviteGuestsRequestInnerFromJSON(json) {
  return InviteGuestsRequestInnerFromJSONTyped(json, false);
}
function InviteGuestsRequestInnerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "guestId": json["guestId"],
    "spaceId": json["spaceId"],
    "message": !exists(json, "message") ? void 0 : json["message"]
  };
}
function InviteGuestsRequestInnerToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "guestId": value.guestId,
    "spaceId": value.spaceId,
    "message": value.message
  };
}

// build/models/PipelineJobConfig.ts
function instanceOfPipelineJobConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "sourceSheetId" in value;
  isInstance = isInstance && "destinationSheetId" in value;
  return isInstance;
}
function PipelineJobConfigFromJSON(json) {
  return PipelineJobConfigFromJSONTyped(json, false);
}
function PipelineJobConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "sourceSheetId": json["sourceSheetId"],
    "destinationSheetId": json["destinationSheetId"]
  };
}
function PipelineJobConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "sourceSheetId": value.sourceSheetId,
    "destinationSheetId": value.destinationSheetId
  };
}

// build/models/JobUpdateConfig.ts
function JobUpdateConfigFromJSON(json) {
  return JobUpdateConfigFromJSONTyped(json, false);
}
function JobUpdateConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return { ...DeleteJobConfigFromJSONTyped(json, true), ...ExportJobConfigFromJSONTyped(json, true), ...FileJobConfigFromJSONTyped(json, true), ...PipelineJobConfigFromJSONTyped(json, true) };
}
function JobUpdateConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  if (instanceOfDeleteJobConfig(value)) {
    return DeleteJobConfigToJSON(value);
  }
  if (instanceOfExportJobConfig(value)) {
    return ExportJobConfigToJSON(value);
  }
  if (instanceOfFileJobConfig(value)) {
    return FileJobConfigToJSON(value);
  }
  if (instanceOfPipelineJobConfig(value)) {
    return PipelineJobConfigToJSON(value);
  }
  return {};
}

// build/models/Job.ts
var JobTypeEnum = {
  File: "file",
  Workbook: "workbook",
  Sheet: "sheet"
};
var JobTriggerEnum = {
  Manual: "manual",
  Immediate: "immediate"
};
var JobStatusEnum = {
  Planning: "planning",
  Ready: "ready",
  Executing: "executing",
  Complete: "complete",
  Failed: "failed"
};
function instanceOfJob(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "type" in value;
  isInstance = isInstance && "source" in value;
  return isInstance;
}
function JobFromJSON(json) {
  return JobFromJSONTyped(json, false);
}
function JobFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "startedAt": !exists(json, "startedAt") ? void 0 : json["startedAt"] === null ? null : new Date(json["startedAt"]),
    "finishedAt": !exists(json, "finishedAt") ? void 0 : json["finishedAt"] === null ? null : new Date(json["finishedAt"]),
    "type": json["type"],
    "operation": !exists(json, "operation") ? void 0 : json["operation"],
    "source": json["source"],
    "destination": !exists(json, "destination") ? void 0 : json["destination"],
    "config": !exists(json, "config") ? void 0 : JobUpdateConfigFromJSON(json["config"]),
    "trigger": !exists(json, "trigger") ? void 0 : json["trigger"],
    "status": !exists(json, "status") ? void 0 : json["status"],
    "progress": !exists(json, "progress") ? void 0 : json["progress"]
  };
}
function JobToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "startedAt": value.startedAt === void 0 ? void 0 : value.startedAt === null ? null : value.startedAt.toISOString(),
    "finishedAt": value.finishedAt === void 0 ? void 0 : value.finishedAt === null ? null : value.finishedAt.toISOString(),
    "type": value.type,
    "operation": value.operation,
    "source": value.source,
    "destination": value.destination,
    "config": JobUpdateConfigToJSON(value.config),
    "trigger": value.trigger,
    "status": value.status,
    "progress": value.progress
  };
}

// build/models/JobConfig.ts
var JobConfigTypeEnum = {
  File: "file",
  Workbook: "workbook",
  Sheet: "sheet"
};
var JobConfigTriggerEnum = {
  Manual: "manual",
  Immediate: "immediate"
};
var JobConfigStatusEnum = {
  Planning: "planning",
  Ready: "ready",
  Executing: "executing",
  Complete: "complete",
  Failed: "failed"
};
function instanceOfJobConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "type" in value;
  isInstance = isInstance && "source" in value;
  return isInstance;
}
function JobConfigFromJSON(json) {
  return JobConfigFromJSONTyped(json, false);
}
function JobConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": json["type"],
    "operation": !exists(json, "operation") ? void 0 : json["operation"],
    "source": json["source"],
    "destination": !exists(json, "destination") ? void 0 : json["destination"],
    "config": !exists(json, "config") ? void 0 : JobUpdateConfigFromJSON(json["config"]),
    "trigger": !exists(json, "trigger") ? void 0 : json["trigger"],
    "status": !exists(json, "status") ? void 0 : json["status"],
    "progress": !exists(json, "progress") ? void 0 : json["progress"]
  };
}
function JobConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "operation": value.operation,
    "source": value.source,
    "destination": value.destination,
    "config": JobUpdateConfigToJSON(value.config),
    "trigger": value.trigger,
    "status": value.status,
    "progress": value.progress
  };
}

// build/models/SourceField.ts
function instanceOfSourceField(value) {
  let isInstance = true;
  isInstance = isInstance && "sourceField" in value;
  return isInstance;
}
function SourceFieldFromJSON(json) {
  return SourceFieldFromJSONTyped(json, false);
}
function SourceFieldFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "sourceField": FieldConfigFromJSON(json["sourceField"]),
    "preview": !exists(json, "preview") ? void 0 : json["preview"]
  };
}
function SourceFieldToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "sourceField": FieldConfigToJSON(value.sourceField),
    "preview": value.preview
  };
}

// build/models/Plan.ts
function instanceOfPlan(value) {
  let isInstance = true;
  return isInstance;
}
function PlanFromJSON(json) {
  return PlanFromJSONTyped(json, false);
}
function PlanFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "fieldMapping": !exists(json, "fieldMapping") ? void 0 : json["fieldMapping"].map(EdgeFromJSON),
    "unmappedSourceFields": !exists(json, "unmappedSourceFields") ? void 0 : json["unmappedSourceFields"].map(SourceFieldFromJSON),
    "unmappedDestinationFields": !exists(json, "unmappedDestinationFields") ? void 0 : json["unmappedDestinationFields"].map(DestinationFieldFromJSON),
    "headerRowCount": !exists(json, "headerRowCount") ? void 0 : json["headerRowCount"]
  };
}
function PlanToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "fieldMapping": value.fieldMapping === void 0 ? void 0 : value.fieldMapping.map(EdgeToJSON),
    "unmappedSourceFields": value.unmappedSourceFields === void 0 ? void 0 : value.unmappedSourceFields.map(SourceFieldToJSON),
    "unmappedDestinationFields": value.unmappedDestinationFields === void 0 ? void 0 : value.unmappedDestinationFields.map(DestinationFieldToJSON),
    "headerRowCount": value.headerRowCount
  };
}

// build/models/JobPlan.ts
function instanceOfJobPlan(value) {
  let isInstance = true;
  return isInstance;
}
function JobPlanFromJSON(json) {
  return JobPlanFromJSONTyped(json, false);
}
function JobPlanFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "job": !exists(json, "job") ? void 0 : JobFromJSON(json["job"]),
    "plan": !exists(json, "plan") ? void 0 : PlanFromJSON(json["plan"])
  };
}
function JobPlanToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "job": JobToJSON(value.job),
    "plan": PlanToJSON(value.plan)
  };
}

// build/models/JobPlanResponse.ts
function instanceOfJobPlanResponse(value) {
  let isInstance = true;
  return isInstance;
}
function JobPlanResponseFromJSON(json) {
  return JobPlanResponseFromJSONTyped(json, false);
}
function JobPlanResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : JobPlanFromJSON(json["data"])
  };
}
function JobPlanResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": JobPlanToJSON(value.data)
  };
}

// build/models/JobResponse.ts
function instanceOfJobResponse(value) {
  let isInstance = true;
  return isInstance;
}
function JobResponseFromJSON(json) {
  return JobResponseFromJSONTyped(json, false);
}
function JobResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : JobFromJSON(json["data"])
  };
}
function JobResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": JobToJSON(value.data)
  };
}

// build/models/JobStatsAccounts.ts
function instanceOfJobStatsAccounts(value) {
  let isInstance = true;
  return isInstance;
}
function JobStatsAccountsFromJSON(json) {
  return JobStatsAccountsFromJSONTyped(json, false);
}
function JobStatsAccountsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "fewestAbandonedJobs": !exists(json, "fewestAbandonedJobs") ? void 0 : json["fewestAbandonedJobs"],
    "mostAbandonedJobs": !exists(json, "mostAbandonedJobs") ? void 0 : json["mostAbandonedJobs"]
  };
}
function JobStatsAccountsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "fewestAbandonedJobs": value.fewestAbandonedJobs,
    "mostAbandonedJobs": value.mostAbandonedJobs
  };
}

// build/models/JobStatsJobsMap.ts
function instanceOfJobStatsJobsMap(value) {
  let isInstance = true;
  return isInstance;
}
function JobStatsJobsMapFromJSON(json) {
  return JobStatsJobsMapFromJSONTyped(json, false);
}
function JobStatsJobsMapFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "created": !exists(json, "created") ? void 0 : json["created"],
    "completed": !exists(json, "completed") ? void 0 : json["completed"],
    "automated": !exists(json, "automated") ? void 0 : json["automated"],
    "failed": !exists(json, "failed") ? void 0 : json["failed"],
    "correctionsAverage": !exists(json, "correctionsAverage") ? void 0 : json["correctionsAverage"]
  };
}
function JobStatsJobsMapToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "created": value.created,
    "completed": value.completed,
    "automated": value.automated,
    "failed": value.failed,
    "correctionsAverage": value.correctionsAverage
  };
}

// build/models/JobStatsJobs.ts
function instanceOfJobStatsJobs(value) {
  let isInstance = true;
  return isInstance;
}
function JobStatsJobsFromJSON(json) {
  return JobStatsJobsFromJSONTyped(json, false);
}
function JobStatsJobsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "map": !exists(json, "map") ? void 0 : JobStatsJobsMapFromJSON(json["map"])
  };
}
function JobStatsJobsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "map": JobStatsJobsMapToJSON(value.map)
  };
}

// build/models/JobStats.ts
function instanceOfJobStats(value) {
  let isInstance = true;
  return isInstance;
}
function JobStatsFromJSON(json) {
  return JobStatsFromJSONTyped(json, false);
}
function JobStatsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "start": !exists(json, "start") ? void 0 : new Date(json["start"]),
    "end": !exists(json, "end") ? void 0 : new Date(json["end"]),
    "jobs": !exists(json, "jobs") ? void 0 : JobStatsJobsFromJSON(json["jobs"]),
    "accounts": !exists(json, "accounts") ? void 0 : JobStatsAccountsFromJSON(json["accounts"])
  };
}
function JobStatsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "start": value.start === void 0 ? void 0 : value.start.toISOString(),
    "end": value.end === void 0 ? void 0 : value.end.toISOString(),
    "jobs": JobStatsJobsToJSON(value.jobs),
    "accounts": JobStatsAccountsToJSON(value.accounts)
  };
}

// build/models/JobStatsResponse.ts
function instanceOfJobStatsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function JobStatsResponseFromJSON(json) {
  return JobStatsResponseFromJSONTyped(json, false);
}
function JobStatsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : JobStatsFromJSON(json["data"])
  };
}
function JobStatsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": JobStatsToJSON(value.data)
  };
}

// build/models/JobUpdate.ts
var JobUpdateStatusEnum = {
  Planning: "planning",
  Ready: "ready",
  Executing: "executing",
  Complete: "complete",
  Failed: "failed"
};
function instanceOfJobUpdate(value) {
  let isInstance = true;
  return isInstance;
}
function JobUpdateFromJSON(json) {
  return JobUpdateFromJSONTyped(json, false);
}
function JobUpdateFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "config": !exists(json, "config") ? void 0 : JobUpdateConfigFromJSON(json["config"]),
    "status": !exists(json, "status") ? void 0 : json["status"],
    "progress": !exists(json, "progress") ? void 0 : json["progress"]
  };
}
function JobUpdateToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "config": JobUpdateConfigToJSON(value.config),
    "status": value.status,
    "progress": value.progress
  };
}

// build/models/JobsResponse.ts
function instanceOfJobsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function JobsResponseFromJSON(json) {
  return JobsResponseFromJSONTyped(json, false);
}
function JobsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "pagination": !exists(json, "pagination") ? void 0 : PaginationFromJSON(json["pagination"]),
    "data": !exists(json, "data") ? void 0 : json["data"].map(JobFromJSON)
  };
}
function JobsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "pagination": PaginationToJSON(value.pagination),
    "data": value.data === void 0 ? void 0 : value.data.map(JobToJSON)
  };
}

// build/models/LinkSidebarConfig.ts
var LinkSidebarConfigTypeEnum = {
  Workbook: "workbook",
  Document: "document",
  Link: "link"
};
function instanceOfLinkSidebarConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "href" in value;
  isInstance = isInstance && "title" in value;
  return isInstance;
}
function LinkSidebarConfigFromJSON(json) {
  return LinkSidebarConfigFromJSONTyped(json, false);
}
function LinkSidebarConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"],
    "href": json["href"],
    "title": json["title"]
  };
}
function LinkSidebarConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "href": value.href,
    "title": value.title
  };
}

// build/models/LinkSidebarConfigAllOf.ts
function instanceOfLinkSidebarConfigAllOf(value) {
  let isInstance = true;
  isInstance = isInstance && "href" in value;
  isInstance = isInstance && "title" in value;
  return isInstance;
}
function LinkSidebarConfigAllOfFromJSON(json) {
  return LinkSidebarConfigAllOfFromJSONTyped(json, false);
}
function LinkSidebarConfigAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "href": json["href"],
    "title": json["title"]
  };
}
function LinkSidebarConfigAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "href": value.href,
    "title": value.title
  };
}

// build/models/ModelFile.ts
function instanceOfModelFile(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "ext" in value;
  isInstance = isInstance && "mimetype" in value;
  isInstance = isInstance && "encoding" in value;
  isInstance = isInstance && "status" in value;
  isInstance = isInstance && "size" in value;
  isInstance = isInstance && "bytesReceived" in value;
  isInstance = isInstance && "spaceId" in value;
  return isInstance;
}
function ModelFileFromJSON(json) {
  return ModelFileFromJSONTyped(json, false);
}
function ModelFileFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "name": json["name"],
    "ext": json["ext"],
    "mimetype": json["mimetype"],
    "encoding": json["encoding"],
    "status": ModelFileStatusEnumFromJSON(json["status"]),
    "size": json["size"],
    "bytesReceived": json["bytesReceived"],
    "spaceId": json["spaceId"],
    "workbookId": !exists(json, "workbookId") ? void 0 : json["workbookId"],
    "createdAt": !exists(json, "createdAt") ? void 0 : json["createdAt"],
    "updatedAt": !exists(json, "updatedAt") ? void 0 : json["updatedAt"]
  };
}
function ModelFileToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "name": value.name,
    "ext": value.ext,
    "mimetype": value.mimetype,
    "encoding": value.encoding,
    "status": ModelFileStatusEnumToJSON(value.status),
    "size": value.size,
    "bytesReceived": value.bytesReceived,
    "spaceId": value.spaceId,
    "workbookId": value.workbookId,
    "createdAt": value.createdAt,
    "updatedAt": value.updatedAt
  };
}

// build/models/NumberPropertyAllOf.ts
var NumberPropertyAllOfTypeEnum = {
  Number: "number"
};
function instanceOfNumberPropertyAllOf(value) {
  let isInstance = true;
  return isInstance;
}
function NumberPropertyAllOfFromJSON(json) {
  return NumberPropertyAllOfFromJSONTyped(json, false);
}
function NumberPropertyAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"],
    "config": !exists(json, "config") ? void 0 : NumberPropertyAllOfConfigFromJSON(json["config"])
  };
}
function NumberPropertyAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "config": NumberPropertyAllOfConfigToJSON(value.config)
  };
}

// build/models/RecordData.ts
function instanceOfRecordData(value) {
  let isInstance = true;
  return isInstance;
}
function RecordDataFromJSON(json) {
  return RecordDataFromJSONTyped(json, false);
}
function RecordDataFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function RecordDataToJSON(value) {
  return value;
}

// build/models/Record.ts
function instanceOfRecord(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "values" in value;
  return isInstance;
}
function RecordFromJSON(json) {
  return RecordFromJSONTyped(json, false);
}
function RecordFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "values": RecordDataFromJSON(json["values"]),
    "valid": !exists(json, "valid") ? void 0 : json["valid"],
    "messages": !exists(json, "messages") ? void 0 : json["messages"].map(ValidationMessageFromJSON),
    "metadata": !exists(json, "metadata") ? void 0 : json["metadata"]
  };
}
function RecordToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "values": RecordDataToJSON(value.values),
    "valid": value.valid,
    "messages": value.messages === void 0 ? void 0 : value.messages.map(ValidationMessageToJSON),
    "metadata": value.metadata
  };
}

// build/models/RecordCountsResponseData.ts
function instanceOfRecordCountsResponseData(value) {
  let isInstance = true;
  isInstance = isInstance && "success" in value;
  return isInstance;
}
function RecordCountsResponseDataFromJSON(json) {
  return RecordCountsResponseDataFromJSONTyped(json, false);
}
function RecordCountsResponseDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "success": json["success"],
    "counts": !exists(json, "counts") ? void 0 : RecordCountsFromJSON(json["counts"])
  };
}
function RecordCountsResponseDataToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "success": value.success,
    "counts": RecordCountsToJSON(value.counts)
  };
}

// build/models/RecordCountsResponse.ts
function instanceOfRecordCountsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function RecordCountsResponseFromJSON(json) {
  return RecordCountsResponseFromJSONTyped(json, false);
}
function RecordCountsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : RecordCountsResponseDataFromJSON(json["data"])
  };
}
function RecordCountsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": RecordCountsResponseDataToJSON(value.data)
  };
}

// build/models/RecordCountsResponseDataAllOf.ts
function instanceOfRecordCountsResponseDataAllOf(value) {
  let isInstance = true;
  return isInstance;
}
function RecordCountsResponseDataAllOfFromJSON(json) {
  return RecordCountsResponseDataAllOfFromJSONTyped(json, false);
}
function RecordCountsResponseDataAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "counts": !exists(json, "counts") ? void 0 : RecordCountsFromJSON(json["counts"])
  };
}
function RecordCountsResponseDataAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "counts": RecordCountsToJSON(value.counts)
  };
}

// build/models/RecordDataWithLinks.ts
function instanceOfRecordDataWithLinks(value) {
  let isInstance = true;
  return isInstance;
}
function RecordDataWithLinksFromJSON(json) {
  return RecordDataWithLinksFromJSONTyped(json, false);
}
function RecordDataWithLinksFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function RecordDataWithLinksToJSON(value) {
  return value;
}

// build/models/RecordUpdates.ts
function instanceOfRecordUpdates(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "values" in value;
  return isInstance;
}
function RecordUpdatesFromJSON(json) {
  return RecordUpdatesFromJSONTyped(json, false);
}
function RecordUpdatesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "versionId": !exists(json, "versionId") ? void 0 : json["versionId"],
    "id": json["id"],
    "values": RecordDataFromJSON(json["values"]),
    "valid": !exists(json, "valid") ? void 0 : json["valid"],
    "messages": !exists(json, "messages") ? void 0 : json["messages"].map(ValidationMessageFromJSON),
    "metadata": !exists(json, "metadata") ? void 0 : json["metadata"]
  };
}
function RecordUpdatesToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "versionId": value.versionId,
    "id": value.id,
    "values": RecordDataToJSON(value.values),
    "valid": value.valid,
    "messages": value.messages === void 0 ? void 0 : value.messages.map(ValidationMessageToJSON),
    "metadata": value.metadata
  };
}

// build/models/RecordUpdatesAllOf.ts
function instanceOfRecordUpdatesAllOf(value) {
  let isInstance = true;
  return isInstance;
}
function RecordUpdatesAllOfFromJSON(json) {
  return RecordUpdatesAllOfFromJSONTyped(json, false);
}
function RecordUpdatesAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "versionId": !exists(json, "versionId") ? void 0 : json["versionId"]
  };
}
function RecordUpdatesAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "versionId": value.versionId
  };
}

// build/models/RecordWithLinks.ts
function instanceOfRecordWithLinks(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "values" in value;
  return isInstance;
}
function RecordWithLinksFromJSON(json) {
  return RecordWithLinksFromJSONTyped(json, false);
}
function RecordWithLinksFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "values": RecordDataWithLinksFromJSON(json["values"]),
    "valid": !exists(json, "valid") ? void 0 : json["valid"],
    "messages": !exists(json, "messages") ? void 0 : json["messages"].map(ValidationMessageFromJSON),
    "metadata": !exists(json, "metadata") ? void 0 : json["metadata"]
  };
}
function RecordWithLinksToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "values": RecordDataWithLinksToJSON(value.values),
    "valid": value.valid,
    "messages": value.messages === void 0 ? void 0 : value.messages.map(ValidationMessageToJSON),
    "metadata": value.metadata
  };
}

// build/models/RecordsData.ts
function instanceOfRecordsData(value) {
  let isInstance = true;
  return isInstance;
}
function RecordsDataFromJSON(json) {
  return RecordsDataFromJSONTyped(json, false);
}
function RecordsDataFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function RecordsDataToJSON(value) {
  return value;
}

// build/models/RecordsWithLinks.ts
function instanceOfRecordsWithLinks(value) {
  let isInstance = true;
  return isInstance;
}
function RecordsWithLinksFromJSON(json) {
  return RecordsWithLinksFromJSONTyped(json, false);
}
function RecordsWithLinksFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function RecordsWithLinksToJSON(value) {
  return value;
}

// build/models/RecordsResponseData.ts
function instanceOfRecordsResponseData(value) {
  let isInstance = true;
  isInstance = isInstance && "success" in value;
  return isInstance;
}
function RecordsResponseDataFromJSON(json) {
  return RecordsResponseDataFromJSONTyped(json, false);
}
function RecordsResponseDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "success": json["success"],
    "records": !exists(json, "records") ? void 0 : RecordsWithLinksFromJSON(json["records"]),
    "counts": !exists(json, "counts") ? void 0 : RecordCountsFromJSON(json["counts"]),
    "versionId": !exists(json, "versionId") ? void 0 : json["versionId"]
  };
}
function RecordsResponseDataToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "success": value.success,
    "records": RecordsWithLinksToJSON(value.records),
    "counts": RecordCountsToJSON(value.counts),
    "versionId": value.versionId
  };
}

// build/models/RecordsResponse.ts
function instanceOfRecordsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function RecordsResponseFromJSON(json) {
  return RecordsResponseFromJSONTyped(json, false);
}
function RecordsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : RecordsResponseDataFromJSON(json["data"])
  };
}
function RecordsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": RecordsResponseDataToJSON(value.data)
  };
}

// build/models/RecordsResponseDataAllOf.ts
function instanceOfRecordsResponseDataAllOf(value) {
  let isInstance = true;
  return isInstance;
}
function RecordsResponseDataAllOfFromJSON(json) {
  return RecordsResponseDataAllOfFromJSONTyped(json, false);
}
function RecordsResponseDataAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "records": !exists(json, "records") ? void 0 : RecordsWithLinksFromJSON(json["records"]),
    "counts": !exists(json, "counts") ? void 0 : RecordCountsFromJSON(json["counts"]),
    "versionId": !exists(json, "versionId") ? void 0 : json["versionId"]
  };
}
function RecordsResponseDataAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "records": RecordsWithLinksToJSON(value.records),
    "counts": RecordCountsToJSON(value.counts),
    "versionId": value.versionId
  };
}

// build/models/RecordsUpdates.ts
function instanceOfRecordsUpdates(value) {
  let isInstance = true;
  return isInstance;
}
function RecordsUpdatesFromJSON(json) {
  return RecordsUpdatesFromJSONTyped(json, false);
}
function RecordsUpdatesFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function RecordsUpdatesToJSON(value) {
  return value;
}

// build/models/ReferencePropertyAllOf.ts
var ReferencePropertyAllOfTypeEnum = {
  Reference: "reference"
};
function instanceOfReferencePropertyAllOf(value) {
  let isInstance = true;
  isInstance = isInstance && "config" in value;
  return isInstance;
}
function ReferencePropertyAllOfFromJSON(json) {
  return ReferencePropertyAllOfFromJSONTyped(json, false);
}
function ReferencePropertyAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"],
    "config": ReferencePropertyAllOfConfigFromJSON(json["config"])
  };
}
function ReferencePropertyAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "config": ReferencePropertyAllOfConfigToJSON(value.config)
  };
}

// build/models/ReplaceRequestReplaceValue.ts
function instanceOfReplaceRequestReplaceValue(value) {
  let isInstance = true;
  return isInstance;
}
function ReplaceRequestReplaceValueFromJSON(json) {
  return ReplaceRequestReplaceValueFromJSONTyped(json, false);
}
function ReplaceRequestReplaceValueFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ReplaceRequestReplaceValueToJSON(value) {
  return value;
}

// build/models/ReplaceRequest.ts
function instanceOfReplaceRequest(value) {
  let isInstance = true;
  return isInstance;
}
function ReplaceRequestFromJSON(json) {
  return ReplaceRequestFromJSONTyped(json, false);
}
function ReplaceRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "replaceValue": !exists(json, "replaceValue") ? void 0 : ReplaceRequestReplaceValueFromJSON(json["replaceValue"])
  };
}
function ReplaceRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "replaceValue": ReplaceRequestReplaceValueToJSON(value.replaceValue)
  };
}

// build/models/RequiredConstraintAllOf.ts
var RequiredConstraintAllOfTypeEnum = {
  Required: "required"
};
function instanceOfRequiredConstraintAllOf(value) {
  let isInstance = true;
  return isInstance;
}
function RequiredConstraintAllOfFromJSON(json) {
  return RequiredConstraintAllOfFromJSONTyped(json, false);
}
function RequiredConstraintAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"]
  };
}
function RequiredConstraintAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type
  };
}

// build/models/Sheet.ts
function instanceOfSheet(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "name" in value;
  return isInstance;
}
function SheetFromJSON(json) {
  return SheetFromJSONTyped(json, false);
}
function SheetFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "workbookId": !exists(json, "workbookId") ? void 0 : json["workbookId"],
    "name": json["name"],
    "config": !exists(json, "config") ? void 0 : SheetConfigFromJSON(json["config"]),
    "countRecords": !exists(json, "countRecords") ? void 0 : RecordCountsFromJSON(json["countRecords"])
  };
}
function SheetToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "workbookId": value.workbookId,
    "name": value.name,
    "config": SheetConfigToJSON(value.config),
    "countRecords": RecordCountsToJSON(value.countRecords)
  };
}

// build/models/SheetResponse.ts
function instanceOfSheetResponse(value) {
  let isInstance = true;
  return isInstance;
}
function SheetResponseFromJSON(json) {
  return SheetResponseFromJSONTyped(json, false);
}
function SheetResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : SheetFromJSON(json["data"])
  };
}
function SheetResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": SheetToJSON(value.data)
  };
}

// build/models/SheetsResponse.ts
function instanceOfSheetsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function SheetsResponseFromJSON(json) {
  return SheetsResponseFromJSONTyped(json, false);
}
function SheetsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(SheetFromJSON)
  };
}
function SheetsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(SheetToJSON)
  };
}

// build/models/WorkbookSidebarConfig.ts
var WorkbookSidebarConfigTypeEnum = {
  Workbook: "workbook",
  Document: "document",
  Link: "link"
};
function instanceOfWorkbookSidebarConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "workbookId" in value;
  return isInstance;
}
function WorkbookSidebarConfigFromJSON(json) {
  return WorkbookSidebarConfigFromJSONTyped(json, false);
}
function WorkbookSidebarConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"],
    "workbookId": json["workbookId"]
  };
}
function WorkbookSidebarConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "workbookId": value.workbookId
  };
}

// build/models/SidebarConfig.ts
function SidebarConfigFromJSON(json) {
  return SidebarConfigFromJSONTyped(json, false);
}
function SidebarConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  switch (json["type"]) {
    case "document":
      return { ...DocumentSidebarConfigFromJSONTyped(json, true), type: "document" };
    case "link":
      return { ...LinkSidebarConfigFromJSONTyped(json, true), type: "link" };
    case "workbook":
      return { ...WorkbookSidebarConfigFromJSONTyped(json, true), type: "workbook" };
    default:
      throw new Error(`No variant of SidebarConfig exists with 'type=${json["type"]}'`);
  }
}
function SidebarConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  switch (value["type"]) {
    case "document":
      return DocumentSidebarConfigToJSON(value);
    case "link":
      return LinkSidebarConfigToJSON(value);
    case "workbook":
      return WorkbookSidebarConfigToJSON(value);
    default:
      throw new Error(`No variant of SidebarConfig exists with 'type=${value["type"]}'`);
  }
}

// build/models/SpaceAccess.ts
var SpaceAccess = {
  Star: "*",
  Upload: "upload"
};
function SpaceAccessFromJSON(json) {
  return SpaceAccessFromJSONTyped(json, false);
}
function SpaceAccessFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function SpaceAccessToJSON(value) {
  return value;
}

// build/models/Space.ts
function instanceOfSpace(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "environmentId" in value;
  return isInstance;
}
function SpaceFromJSON(json) {
  return SpaceFromJSONTyped(json, false);
}
function SpaceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "workbooksCount": !exists(json, "workbooksCount") ? void 0 : json["workbooksCount"],
    "filesCount": !exists(json, "filesCount") ? void 0 : json["filesCount"],
    "createdByUserId": !exists(json, "createdByUserId") ? void 0 : json["createdByUserId"],
    "createdByUserName": !exists(json, "createdByUserName") ? void 0 : json["createdByUserName"],
    "createdAt": !exists(json, "createdAt") ? void 0 : json["createdAt"],
    "guestLink": !exists(json, "guestLink") ? void 0 : json["guestLink"],
    "accessToken": !exists(json, "accessToken") ? void 0 : json["accessToken"],
    "spaceConfigId": !exists(json, "spaceConfigId") ? void 0 : json["spaceConfigId"],
    "environmentId": json["environmentId"],
    "primaryWorkbookId": !exists(json, "primaryWorkbookId") ? void 0 : json["primaryWorkbookId"],
    "name": !exists(json, "name") ? void 0 : json["name"],
    "displayOrder": !exists(json, "displayOrder") ? void 0 : json["displayOrder"],
    "metadata": !exists(json, "metadata") ? void 0 : json["metadata"],
    "actions": !exists(json, "actions") ? void 0 : json["actions"].map(ActionFromJSON),
    "guestAuthentication": !exists(json, "guestAuthentication") ? void 0 : json["guestAuthentication"].map(GuestAuthenticationEnumFromJSON),
    "access": !exists(json, "access") ? void 0 : json["access"].map(SpaceAccessFromJSON)
  };
}
function SpaceToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "workbooksCount": value.workbooksCount,
    "filesCount": value.filesCount,
    "createdByUserId": value.createdByUserId,
    "createdByUserName": value.createdByUserName,
    "createdAt": value.createdAt,
    "guestLink": value.guestLink,
    "accessToken": value.accessToken,
    "spaceConfigId": value.spaceConfigId,
    "environmentId": value.environmentId,
    "primaryWorkbookId": value.primaryWorkbookId,
    "name": value.name,
    "displayOrder": value.displayOrder,
    "metadata": value.metadata,
    "actions": value.actions === void 0 ? void 0 : value.actions.map(ActionToJSON),
    "guestAuthentication": value.guestAuthentication === void 0 ? void 0 : value.guestAuthentication.map(GuestAuthenticationEnumToJSON),
    "access": value.access === void 0 ? void 0 : value.access.map(SpaceAccessToJSON)
  };
}

// build/models/SpaceConfig.ts
function instanceOfSpaceConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "environmentId" in value;
  return isInstance;
}
function SpaceConfigFromJSON(json) {
  return SpaceConfigFromJSONTyped(json, false);
}
function SpaceConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "spaceConfigId": !exists(json, "spaceConfigId") ? void 0 : json["spaceConfigId"],
    "environmentId": json["environmentId"],
    "primaryWorkbookId": !exists(json, "primaryWorkbookId") ? void 0 : json["primaryWorkbookId"],
    "name": !exists(json, "name") ? void 0 : json["name"],
    "displayOrder": !exists(json, "displayOrder") ? void 0 : json["displayOrder"],
    "metadata": !exists(json, "metadata") ? void 0 : json["metadata"],
    "actions": !exists(json, "actions") ? void 0 : json["actions"].map(ActionFromJSON),
    "guestAuthentication": !exists(json, "guestAuthentication") ? void 0 : json["guestAuthentication"].map(GuestAuthenticationEnumFromJSON),
    "access": !exists(json, "access") ? void 0 : json["access"].map(SpaceAccessFromJSON)
  };
}
function SpaceConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "spaceConfigId": value.spaceConfigId,
    "environmentId": value.environmentId,
    "primaryWorkbookId": value.primaryWorkbookId,
    "name": value.name,
    "displayOrder": value.displayOrder,
    "metadata": value.metadata,
    "actions": value.actions === void 0 ? void 0 : value.actions.map(ActionToJSON),
    "guestAuthentication": value.guestAuthentication === void 0 ? void 0 : value.guestAuthentication.map(GuestAuthenticationEnumToJSON),
    "access": value.access === void 0 ? void 0 : value.access.map(SpaceAccessToJSON)
  };
}

// build/models/SpacePattern.ts
function instanceOfSpacePattern(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "slug" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "blueprints" in value;
  return isInstance;
}
function SpacePatternFromJSON(json) {
  return SpacePatternFromJSONTyped(json, false);
}
function SpacePatternFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "slug": json["slug"],
    "name": json["name"],
    "blueprints": json["blueprints"].map(BlueprintFromJSON),
    "actions": !exists(json, "actions") ? void 0 : json["actions"].map(ActionFromJSON)
  };
}
function SpacePatternToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "slug": value.slug,
    "name": value.name,
    "blueprints": value.blueprints.map(BlueprintToJSON),
    "actions": value.actions === void 0 ? void 0 : value.actions.map(ActionToJSON)
  };
}

// build/models/SpaceConfigResponse.ts
function instanceOfSpaceConfigResponse(value) {
  let isInstance = true;
  return isInstance;
}
function SpaceConfigResponseFromJSON(json) {
  return SpaceConfigResponseFromJSONTyped(json, false);
}
function SpaceConfigResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : SpacePatternFromJSON(json["data"])
  };
}
function SpaceConfigResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": SpacePatternToJSON(value.data)
  };
}

// build/models/SpaceConfigsResponse.ts
function instanceOfSpaceConfigsResponse(value) {
  let isInstance = true;
  return isInstance;
}
function SpaceConfigsResponseFromJSON(json) {
  return SpaceConfigsResponseFromJSONTyped(json, false);
}
function SpaceConfigsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(SpacePatternFromJSON)
  };
}
function SpaceConfigsResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(SpacePatternToJSON)
  };
}

// build/models/SpacePatternConfig.ts
function instanceOfSpacePatternConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "slug" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "blueprints" in value;
  return isInstance;
}
function SpacePatternConfigFromJSON(json) {
  return SpacePatternConfigFromJSONTyped(json, false);
}
function SpacePatternConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "slug": json["slug"],
    "name": json["name"],
    "blueprints": json["blueprints"].map(BlueprintFromJSON),
    "actions": !exists(json, "actions") ? void 0 : json["actions"].map(ActionFromJSON)
  };
}
function SpacePatternConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "slug": value.slug,
    "name": value.name,
    "blueprints": value.blueprints.map(BlueprintToJSON),
    "actions": value.actions === void 0 ? void 0 : value.actions.map(ActionToJSON)
  };
}

// build/models/SpaceResponse.ts
function instanceOfSpaceResponse(value) {
  let isInstance = true;
  return isInstance;
}
function SpaceResponseFromJSON(json) {
  return SpaceResponseFromJSONTyped(json, false);
}
function SpaceResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : SpaceFromJSON(json["data"])
  };
}
function SpaceResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": SpaceToJSON(value.data)
  };
}

// build/models/SpacesResponse.ts
function instanceOfSpacesResponse(value) {
  let isInstance = true;
  return isInstance;
}
function SpacesResponseFromJSON(json) {
  return SpacesResponseFromJSONTyped(json, false);
}
function SpacesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "pagination": !exists(json, "pagination") ? void 0 : PaginationFromJSON(json["pagination"]),
    "data": !exists(json, "data") ? void 0 : json["data"].map(SpaceFromJSON)
  };
}
function SpacesResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "pagination": PaginationToJSON(value.pagination),
    "data": value.data === void 0 ? void 0 : value.data.map(SpaceToJSON)
  };
}

// build/models/StringPropertyAllOf.ts
var StringPropertyAllOfTypeEnum = {
  String: "string"
};
function instanceOfStringPropertyAllOf(value) {
  let isInstance = true;
  return isInstance;
}
function StringPropertyAllOfFromJSON(json) {
  return StringPropertyAllOfFromJSONTyped(json, false);
}
function StringPropertyAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": !exists(json, "type") ? void 0 : json["type"]
  };
}
function StringPropertyAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type
  };
}

// build/models/Success.ts
function instanceOfSuccess(value) {
  let isInstance = true;
  isInstance = isInstance && "success" in value;
  return isInstance;
}
function SuccessFromJSON(json) {
  return SuccessFromJSONTyped(json, false);
}
function SuccessFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "success": json["success"]
  };
}
function SuccessToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "success": value.success
  };
}

// build/models/SuccessResponse.ts
function instanceOfSuccessResponse(value) {
  let isInstance = true;
  return isInstance;
}
function SuccessResponseFromJSON(json) {
  return SuccessResponseFromJSONTyped(json, false);
}
function SuccessResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : SuccessFromJSON(json["data"])
  };
}
function SuccessResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": SuccessToJSON(value.data)
  };
}

// build/models/UniqueConstraintAllOf.ts
var UniqueConstraintAllOfTypeEnum = {
  Unique: "unique"
};
function instanceOfUniqueConstraintAllOf(value) {
  let isInstance = true;
  isInstance = isInstance && "type" in value;
  return isInstance;
}
function UniqueConstraintAllOfFromJSON(json) {
  return UniqueConstraintAllOfFromJSONTyped(json, false);
}
function UniqueConstraintAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "type": json["type"],
    "config": !exists(json, "config") ? void 0 : UniqueConstraintAllOfConfigFromJSON(json["config"])
  };
}
function UniqueConstraintAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "type": value.type,
    "config": UniqueConstraintAllOfConfigToJSON(value.config)
  };
}

// build/models/UpdateJobExecutionPlanByIdRequest.ts
function instanceOfUpdateJobExecutionPlanByIdRequest(value) {
  let isInstance = true;
  return isInstance;
}
function UpdateJobExecutionPlanByIdRequestFromJSON(json) {
  return UpdateJobExecutionPlanByIdRequestFromJSONTyped(json, false);
}
function UpdateJobExecutionPlanByIdRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "fileId": !exists(json, "fileId") ? void 0 : json["fileId"],
    "jobId": !exists(json, "jobId") ? void 0 : json["jobId"],
    "fieldMapping": !exists(json, "fieldMapping") ? void 0 : json["fieldMapping"].map(EdgeFromJSON),
    "unmappedSourceFields": !exists(json, "unmappedSourceFields") ? void 0 : json["unmappedSourceFields"].map(SourceFieldFromJSON),
    "unmappedDestinationFields": !exists(json, "unmappedDestinationFields") ? void 0 : json["unmappedDestinationFields"].map(DestinationFieldFromJSON),
    "headerRowCount": !exists(json, "headerRowCount") ? void 0 : json["headerRowCount"]
  };
}
function UpdateJobExecutionPlanByIdRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "fileId": value.fileId,
    "jobId": value.jobId,
    "fieldMapping": value.fieldMapping === void 0 ? void 0 : value.fieldMapping.map(EdgeToJSON),
    "unmappedSourceFields": value.unmappedSourceFields === void 0 ? void 0 : value.unmappedSourceFields.map(SourceFieldToJSON),
    "unmappedDestinationFields": value.unmappedDestinationFields === void 0 ? void 0 : value.unmappedDestinationFields.map(DestinationFieldToJSON),
    "headerRowCount": value.headerRowCount
  };
}

// build/models/User.ts
function instanceOfUser(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "email" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "accountId" in value;
  return isInstance;
}
function UserFromJSON(json) {
  return UserFromJSONTyped(json, false);
}
function UserFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "email": json["email"],
    "name": json["name"],
    "accountId": json["accountId"]
  };
}
function UserToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "email": value.email,
    "name": value.name,
    "accountId": value.accountId
  };
}

// build/models/UserConfig.ts
function instanceOfUserConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "email" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "accountId" in value;
  return isInstance;
}
function UserConfigFromJSON(json) {
  return UserConfigFromJSONTyped(json, false);
}
function UserConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "email": json["email"],
    "name": json["name"],
    "accountId": json["accountId"]
  };
}
function UserConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "email": value.email,
    "name": value.name,
    "accountId": value.accountId
  };
}

// build/models/UserResponse.ts
function instanceOfUserResponse(value) {
  let isInstance = true;
  return isInstance;
}
function UserResponseFromJSON(json) {
  return UserResponseFromJSONTyped(json, false);
}
function UserResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : UserFromJSON(json["data"])
  };
}
function UserResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": UserToJSON(value.data)
  };
}

// build/models/UsersResponse.ts
function instanceOfUsersResponse(value) {
  let isInstance = true;
  return isInstance;
}
function UsersResponseFromJSON(json) {
  return UsersResponseFromJSONTyped(json, false);
}
function UsersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(UserFromJSON)
  };
}
function UsersResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(UserToJSON)
  };
}

// build/models/Validation.ts
function instanceOfValidation(value) {
  let isInstance = true;
  isInstance = isInstance && "success" in value;
  return isInstance;
}
function ValidationFromJSON(json) {
  return ValidationFromJSONTyped(json, false);
}
function ValidationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "success": json["success"],
    "errors": !exists(json, "errors") ? void 0 : json["errors"]
  };
}
function ValidationToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "success": value.success,
    "errors": value.errors
  };
}

// build/models/VersionResponseData.ts
function instanceOfVersionResponseData(value) {
  let isInstance = true;
  return isInstance;
}
function VersionResponseDataFromJSON(json) {
  return VersionResponseDataFromJSONTyped(json, false);
}
function VersionResponseDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "versionId": !exists(json, "versionId") ? void 0 : json["versionId"]
  };
}
function VersionResponseDataToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "versionId": value.versionId
  };
}

// build/models/VersionResponse.ts
function instanceOfVersionResponse(value) {
  let isInstance = true;
  return isInstance;
}
function VersionResponseFromJSON(json) {
  return VersionResponseFromJSONTyped(json, false);
}
function VersionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : VersionResponseDataFromJSON(json["data"])
  };
}
function VersionResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": VersionResponseDataToJSON(value.data)
  };
}

// build/models/WorkbookConfig.ts
function instanceOfWorkbookConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "spaceId" in value;
  isInstance = isInstance && "environmentId" in value;
  return isInstance;
}
function WorkbookConfigFromJSON(json) {
  return WorkbookConfigFromJSONTyped(json, false);
}
function WorkbookConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "name": json["name"],
    "labels": !exists(json, "labels") ? void 0 : json["labels"],
    "spaceId": json["spaceId"],
    "environmentId": json["environmentId"],
    "sheets": !exists(json, "sheets") ? void 0 : json["sheets"].map(SheetConfigFromJSON),
    "actions": !exists(json, "actions") ? void 0 : json["actions"].map(ActionFromJSON)
  };
}
function WorkbookConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "name": value.name,
    "labels": value.labels,
    "spaceId": value.spaceId,
    "environmentId": value.environmentId,
    "sheets": value.sheets === void 0 ? void 0 : value.sheets.map(SheetConfigToJSON),
    "actions": value.actions === void 0 ? void 0 : value.actions.map(ActionToJSON)
  };
}

// build/models/Workbook.ts
function instanceOfWorkbook(value) {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "spaceId" in value;
  return isInstance;
}
function WorkbookFromJSON(json) {
  return WorkbookFromJSONTyped(json, false);
}
function WorkbookFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": json["id"],
    "name": !exists(json, "name") ? void 0 : json["name"],
    "spaceId": json["spaceId"],
    "environmentId": !exists(json, "environmentId") ? void 0 : json["environmentId"],
    "sheets": !exists(json, "sheets") ? void 0 : json["sheets"].map(SheetFromJSON),
    "config": !exists(json, "config") ? void 0 : WorkbookConfigFromJSON(json["config"]),
    "labels": !exists(json, "labels") ? void 0 : json["labels"],
    "updatedAt": !exists(json, "updatedAt") ? void 0 : new Date(json["updatedAt"])
  };
}
function WorkbookToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "name": value.name,
    "spaceId": value.spaceId,
    "environmentId": value.environmentId,
    "sheets": value.sheets === void 0 ? void 0 : value.sheets.map(SheetToJSON),
    "config": WorkbookConfigToJSON(value.config),
    "labels": value.labels,
    "updatedAt": value.updatedAt === void 0 ? void 0 : value.updatedAt.toISOString()
  };
}

// build/models/WorkbookResponse.ts
function instanceOfWorkbookResponse(value) {
  let isInstance = true;
  return isInstance;
}
function WorkbookResponseFromJSON(json) {
  return WorkbookResponseFromJSONTyped(json, false);
}
function WorkbookResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : WorkbookFromJSON(json["data"])
  };
}
function WorkbookResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": WorkbookToJSON(value.data)
  };
}

// build/models/WorkbookSidebarConfigAllOf.ts
function instanceOfWorkbookSidebarConfigAllOf(value) {
  let isInstance = true;
  isInstance = isInstance && "workbookId" in value;
  return isInstance;
}
function WorkbookSidebarConfigAllOfFromJSON(json) {
  return WorkbookSidebarConfigAllOfFromJSONTyped(json, false);
}
function WorkbookSidebarConfigAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "workbookId": json["workbookId"]
  };
}
function WorkbookSidebarConfigAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "workbookId": value.workbookId
  };
}

// build/models/WorkbooksResponse.ts
function instanceOfWorkbooksResponse(value) {
  let isInstance = true;
  return isInstance;
}
function WorkbooksResponseFromJSON(json) {
  return WorkbooksResponseFromJSONTyped(json, false);
}
function WorkbooksResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(WorkbookFromJSON)
  };
}
function WorkbooksResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(WorkbookToJSON)
  };
}

// build/apis/DefaultApi.ts
var DefaultApi = class extends BaseAPI {
  async ackEventRaw(requestParameters, initOverrides) {
    if (requestParameters.eventId === null || requestParameters.eventId === void 0) {
      throw new RequiredError("eventId", "Required parameter requestParameters.eventId was null or undefined when calling ackEvent.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/events/{eventId}/ack`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async ackEvent(requestParameters, initOverrides) {
    const response = await this.ackEventRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async ackEventDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling ackEventDeprecated.");
    }
    if (requestParameters.eventId === null || requestParameters.eventId === void 0) {
      throw new RequiredError("eventId", "Required parameter requestParameters.eventId was null or undefined when calling ackEventDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/events/{eventId}/ack`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async ackEventDeprecated(requestParameters, initOverrides) {
    const response = await this.ackEventDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async addDocumentToSpaceRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling addDocumentToSpace.");
    }
    if (requestParameters.documentConfig === null || requestParameters.documentConfig === void 0) {
      throw new RequiredError("documentConfig", "Required parameter requestParameters.documentConfig was null or undefined when calling addDocumentToSpace.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/{spaceId}/documents`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters.spaceId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: DocumentConfigToJSON(requestParameters.documentConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => DocumentResponseFromJSON(jsonValue));
  }
  async addDocumentToSpace(requestParameters, initOverrides) {
    const response = await this.addDocumentToSpaceRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async addGuestToSpaceRaw(requestParameters, initOverrides) {
    if (requestParameters.guestConfig === null || requestParameters.guestConfig === void 0) {
      throw new RequiredError("guestConfig", "Required parameter requestParameters.guestConfig was null or undefined when calling addGuestToSpace.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/guests`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.guestConfig.map(GuestConfigToJSON)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => GuestsResponseFromJSON(jsonValue));
  }
  async addGuestToSpace(requestParameters, initOverrides) {
    const response = await this.addGuestToSpaceRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async addRecordsRaw(requestParameters, initOverrides) {
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling addRecords.");
    }
    if (requestParameters.recordsData === null || requestParameters.recordsData === void 0) {
      throw new RequiredError("recordsData", "Required parameter requestParameters.recordsData was null or undefined when calling addRecords.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}/records`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: RecordsDataToJSON(requestParameters.recordsData)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => RecordsResponseFromJSON(jsonValue));
  }
  async addRecords(requestParameters, initOverrides) {
    const response = await this.addRecordsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async addRecordsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling addRecordsDeprecated.");
    }
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling addRecordsDeprecated.");
    }
    if (requestParameters.recordsData === null || requestParameters.recordsData === void 0) {
      throw new RequiredError("recordsData", "Required parameter requestParameters.recordsData was null or undefined when calling addRecordsDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}/sheets/{sheetId}/records`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))).replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: RecordsDataToJSON(requestParameters.recordsData)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => RecordsResponseFromJSON(jsonValue));
  }
  async addRecordsDeprecated(requestParameters, initOverrides) {
    const response = await this.addRecordsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async addSpaceRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceConfig === null || requestParameters.spaceConfig === void 0) {
      throw new RequiredError("spaceConfig", "Required parameter requestParameters.spaceConfig was null or undefined when calling addSpace.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SpaceConfigToJSON(requestParameters.spaceConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpaceResponseFromJSON(jsonValue));
  }
  async addSpace(requestParameters, initOverrides) {
    const response = await this.addSpaceRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async addSpaceConfigRaw(requestParameters, initOverrides) {
    if (requestParameters.spacePatternConfig === null || requestParameters.spacePatternConfig === void 0) {
      throw new RequiredError("spacePatternConfig", "Required parameter requestParameters.spacePatternConfig was null or undefined when calling addSpaceConfig.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/space-configs`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SpacePatternConfigToJSON(requestParameters.spacePatternConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpaceConfigResponseFromJSON(jsonValue));
  }
  async addSpaceConfig(requestParameters, initOverrides) {
    const response = await this.addSpaceConfigRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async addSpaceConfigDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.spacePatternConfig === null || requestParameters.spacePatternConfig === void 0) {
      throw new RequiredError("spacePatternConfig", "Required parameter requestParameters.spacePatternConfig was null or undefined when calling addSpaceConfigDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/configs`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SpacePatternConfigToJSON(requestParameters.spacePatternConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpaceConfigResponseFromJSON(jsonValue));
  }
  async addSpaceConfigDeprecated(requestParameters, initOverrides) {
    const response = await this.addSpaceConfigDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async addWorkbookRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookConfig === null || requestParameters.workbookConfig === void 0) {
      throw new RequiredError("workbookConfig", "Required parameter requestParameters.workbookConfig was null or undefined when calling addWorkbook.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: WorkbookConfigToJSON(requestParameters.workbookConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => WorkbookResponseFromJSON(jsonValue));
  }
  async addWorkbook(requestParameters, initOverrides) {
    const response = await this.addWorkbookRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createAccessTokenRaw(requestParameters, initOverrides) {
    if (requestParameters.createAccessTokenRequest === null || requestParameters.createAccessTokenRequest === void 0) {
      throw new RequiredError("createAccessTokenRequest", "Required parameter requestParameters.createAccessTokenRequest was null or undefined when calling createAccessToken.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    const response = await this.request({
      path: `/auth`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateAccessTokenRequestToJSON(requestParameters.createAccessTokenRequest)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
  }
  async createAccessToken(requestParameters, initOverrides) {
    const response = await this.createAccessTokenRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createAgentRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling createAgent.");
    }
    if (requestParameters.agentConfig === null || requestParameters.agentConfig === void 0) {
      throw new RequiredError("agentConfig", "Required parameter requestParameters.agentConfig was null or undefined when calling createAgent.");
    }
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/agents`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: AgentConfigToJSON(requestParameters.agentConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
  }
  async createAgent(requestParameters, initOverrides) {
    const response = await this.createAgentRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createAgentDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling createAgentDeprecated.");
    }
    if (requestParameters.agentConfig === null || requestParameters.agentConfig === void 0) {
      throw new RequiredError("agentConfig", "Required parameter requestParameters.agentConfig was null or undefined when calling createAgentDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/agents`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: AgentConfigToJSON(requestParameters.agentConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
  }
  async createAgentDeprecated(requestParameters, initOverrides) {
    const response = await this.createAgentDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createApiTokenRaw(requestParameters, initOverrides) {
    if (requestParameters.userId === null || requestParameters.userId === void 0) {
      throw new RequiredError("userId", "Required parameter requestParameters.userId was null or undefined when calling createApiToken.");
    }
    if (requestParameters.tenantId === null || requestParameters.tenantId === void 0) {
      throw new RequiredError("tenantId", "Required parameter requestParameters.tenantId was null or undefined when calling createApiToken.");
    }
    const queryParameters = {};
    if (requestParameters.tenantId !== void 0) {
      queryParameters["tenantId"] = requestParameters.tenantId;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/users/{userId}/api-token`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => ApiTokenResponseFromJSON(jsonValue));
  }
  async createApiToken(requestParameters, initOverrides) {
    const response = await this.createApiTokenRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createEnvironmentRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentConfig === null || requestParameters.environmentConfig === void 0) {
      throw new RequiredError("environmentConfig", "Required parameter requestParameters.environmentConfig was null or undefined when calling createEnvironment.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: EnvironmentConfigToJSON(requestParameters.environmentConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EnvironmentResponseFromJSON(jsonValue));
  }
  async createEnvironment(requestParameters, initOverrides) {
    const response = await this.createEnvironmentRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createEventRaw(requestParameters, initOverrides) {
    if (requestParameters.eventConfig === null || requestParameters.eventConfig === void 0) {
      throw new RequiredError("eventConfig", "Required parameter requestParameters.eventConfig was null or undefined when calling createEvent.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/events`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: EventConfigToJSON(requestParameters.eventConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EventResponseFromJSON(jsonValue));
  }
  async createEvent(requestParameters, initOverrides) {
    const response = await this.createEventRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createEventDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling createEventDeprecated.");
    }
    if (requestParameters.eventConfig === null || requestParameters.eventConfig === void 0) {
      throw new RequiredError("eventConfig", "Required parameter requestParameters.eventConfig was null or undefined when calling createEventDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/events`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: EventConfigToJSON(requestParameters.eventConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EventResponseFromJSON(jsonValue));
  }
  async createEventDeprecated(requestParameters, initOverrides) {
    const response = await this.createEventDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createFileRaw(requestParameters, initOverrides) {
    if (requestParameters.createFileRequest === null || requestParameters.createFileRequest === void 0) {
      throw new RequiredError("createFileRequest", "Required parameter requestParameters.createFileRequest was null or undefined when calling createFile.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/files`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateFileRequestToJSON(requestParameters.createFileRequest)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => FileResponseFromJSON(jsonValue));
  }
  async createFile(requestParameters, initOverrides) {
    const response = await this.createFileRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createJobRaw(requestParameters, initOverrides) {
    if (requestParameters.jobConfig === null || requestParameters.jobConfig === void 0) {
      throw new RequiredError("jobConfig", "Required parameter requestParameters.jobConfig was null or undefined when calling createJob.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: JobConfigToJSON(requestParameters.jobConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => JobResponseFromJSON(jsonValue));
  }
  async createJob(requestParameters, initOverrides) {
    const response = await this.createJobRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createUserRaw(requestParameters, initOverrides) {
    if (requestParameters.userConfig === null || requestParameters.userConfig === void 0) {
      throw new RequiredError("userConfig", "Required parameter requestParameters.userConfig was null or undefined when calling createUser.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/users`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: UserConfigToJSON(requestParameters.userConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
  }
  async createUser(requestParameters, initOverrides) {
    const response = await this.createUserRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createVersionDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling createVersionDeprecated.");
    }
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling createVersionDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}/sheets/{sheetId}/versions`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))).replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => VersionResponseFromJSON(jsonValue));
  }
  async createVersionDeprecated(requestParameters, initOverrides) {
    const response = await this.createVersionDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async createVersionIdRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/versions`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => VersionResponseFromJSON(jsonValue));
  }
  async createVersionId(initOverrides) {
    const response = await this.createVersionIdRaw(initOverrides);
    return await response.value();
  }
  async deleteFileRaw(requestParameters, initOverrides) {
    if (requestParameters.fileId === null || requestParameters.fileId === void 0) {
      throw new RequiredError("fileId", "Required parameter requestParameters.fileId was null or undefined when calling deleteFile.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/files/{fileId}`.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters.fileId))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async deleteFile(requestParameters, initOverrides) {
    const response = await this.deleteFileRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async deleteGuestRaw(requestParameters, initOverrides) {
    if (requestParameters.guestId === null || requestParameters.guestId === void 0) {
      throw new RequiredError("guestId", "Required parameter requestParameters.guestId was null or undefined when calling deleteGuest.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/guests/{guestId}`.replace(`{${"guestId"}}`, encodeURIComponent(String(requestParameters.guestId))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async deleteGuest(requestParameters, initOverrides) {
    const response = await this.deleteGuestRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async deleteJobRaw(requestParameters, initOverrides) {
    if (requestParameters.jobId === null || requestParameters.jobId === void 0) {
      throw new RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling deleteJob.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs/{jobId}`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async deleteJob(requestParameters, initOverrides) {
    const response = await this.deleteJobRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async deleteRecordsRaw(requestParameters, initOverrides) {
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling deleteRecords.");
    }
    const queryParameters = {};
    if (requestParameters.ids) {
      queryParameters["ids"] = requestParameters.ids;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}/records`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async deleteRecords(requestParameters, initOverrides) {
    const response = await this.deleteRecordsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async deleteRecordsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling deleteRecordsDeprecated.");
    }
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling deleteRecordsDeprecated.");
    }
    const queryParameters = {};
    if (requestParameters.ids) {
      queryParameters["ids"] = requestParameters.ids;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}/sheets/{sheetId}/records`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))).replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async deleteRecordsDeprecated(requestParameters, initOverrides) {
    const response = await this.deleteRecordsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async deleteSpaceByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling deleteSpaceById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/{spaceId}`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters.spaceId))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async deleteSpaceById(requestParameters, initOverrides) {
    const response = await this.deleteSpaceByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async deleteWorkbookByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling deleteWorkbookById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async deleteWorkbookById(requestParameters, initOverrides) {
    const response = await this.deleteWorkbookByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async downloadFileRaw(requestParameters, initOverrides) {
    if (requestParameters.fileId === null || requestParameters.fileId === void 0) {
      throw new RequiredError("fileId", "Required parameter requestParameters.fileId was null or undefined when calling downloadFile.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/files/{fileId}/download`.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters.fileId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new BlobApiResponse(response);
  }
  async downloadFile(requestParameters, initOverrides) {
    const response = await this.downloadFileRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async exchangeInvitationRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    const response = await this.request({
      path: `/invitations/exchange`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ExchangeInvitationRequestToJSON(requestParameters.exchangeInvitationRequest)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => ExchangeTokenResponseFromJSON(jsonValue));
  }
  async exchangeInvitation(requestParameters = {}, initOverrides) {
    const response = await this.exchangeInvitationRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async executeJobRaw(requestParameters, initOverrides) {
    if (requestParameters.jobId === null || requestParameters.jobId === void 0) {
      throw new RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling executeJob.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs/{jobId}/execute`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async executeJob(requestParameters, initOverrides) {
    const response = await this.executeJobRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAccessTokenRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    const response = await this.request({
      path: `/auth/access-token`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ApiCredentialsToJSON(requestParameters.apiCredentials)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
  }
  async getAccessToken(requestParameters = {}, initOverrides) {
    const response = await this.getAccessTokenRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAgentRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getAgent.");
    }
    if (requestParameters.agentId === null || requestParameters.agentId === void 0) {
      throw new RequiredError("agentId", "Required parameter requestParameters.agentId was null or undefined when calling getAgent.");
    }
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/agents/{agentId}`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters.agentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
  }
  async getAgent(requestParameters, initOverrides) {
    const response = await this.getAgentRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAgentDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getAgentDeprecated.");
    }
    if (requestParameters.agentId === null || requestParameters.agentId === void 0) {
      throw new RequiredError("agentId", "Required parameter requestParameters.agentId was null or undefined when calling getAgentDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/agents/{agentId}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters.agentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
  }
  async getAgentDeprecated(requestParameters, initOverrides) {
    const response = await this.getAgentDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAgentLogsRaw(requestParameters, initOverrides) {
    if (requestParameters.agentId === null || requestParameters.agentId === void 0) {
      throw new RequiredError("agentId", "Required parameter requestParameters.agentId was null or undefined when calling getAgentLogs.");
    }
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getAgentLogs.");
    }
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/agents/{agentId}/logs`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters.agentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentLogsResponseFromJSON(jsonValue));
  }
  async getAgentLogs(requestParameters, initOverrides) {
    const response = await this.getAgentLogsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAgentLogsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getAgentLogsDeprecated.");
    }
    if (requestParameters.agentId === null || requestParameters.agentId === void 0) {
      throw new RequiredError("agentId", "Required parameter requestParameters.agentId was null or undefined when calling getAgentLogsDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/agents/{agentId}/logs`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters.agentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentLogsResponseFromJSON(jsonValue));
  }
  async getAgentLogsDeprecated(requestParameters, initOverrides) {
    const response = await this.getAgentLogsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAgentsRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getAgents.");
    }
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/agents`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentsResponseFromJSON(jsonValue));
  }
  async getAgents(requestParameters, initOverrides) {
    const response = await this.getAgentsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAgentsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getAgentsDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/agents`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentsResponseFromJSON(jsonValue));
  }
  async getAgentsDeprecated(requestParameters, initOverrides) {
    const response = await this.getAgentsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAllSpaceConfigsRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/space-configs`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpaceConfigsResponseFromJSON(jsonValue));
  }
  async getAllSpaceConfigs(initOverrides) {
    const response = await this.getAllSpaceConfigsRaw(initOverrides);
    return await response.value();
  }
  async getAllSpaceConfigsDeprecatedRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/configs`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpaceConfigsResponseFromJSON(jsonValue));
  }
  async getAllSpaceConfigsDeprecated(requestParameters = {}, initOverrides) {
    const response = await this.getAllSpaceConfigsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAllSpacesRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    if (requestParameters.search !== void 0) {
      queryParameters["search"] = requestParameters.search;
    }
    if (requestParameters.sortField !== void 0) {
      queryParameters["sortField"] = requestParameters.sortField;
    }
    if (requestParameters.sortDirection !== void 0) {
      queryParameters["sortDirection"] = requestParameters.sortDirection;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpacesResponseFromJSON(jsonValue));
  }
  async getAllSpaces(requestParameters = {}, initOverrides) {
    const response = await this.getAllSpacesRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getAllWorkbooksRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.spaceId !== void 0) {
      queryParameters["spaceId"] = requestParameters.spaceId;
    }
    if (requestParameters.includeCounts !== void 0) {
      queryParameters["includeCounts"] = requestParameters.includeCounts;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => WorkbooksResponseFromJSON(jsonValue));
  }
  async getAllWorkbooks(requestParameters = {}, initOverrides) {
    const response = await this.getAllWorkbooksRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getApiKeysRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getApiKeys.");
    }
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    const headerParameters = {};
    const response = await this.request({
      path: `/auth/api-keys`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => ApiKeysResponseFromJSON(jsonValue));
  }
  async getApiKeys(requestParameters, initOverrides) {
    const response = await this.getApiKeysRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getApiTokensRaw(requestParameters, initOverrides) {
    if (requestParameters.userId === null || requestParameters.userId === void 0) {
      throw new RequiredError("userId", "Required parameter requestParameters.userId was null or undefined when calling getApiTokens.");
    }
    if (requestParameters.tenantId === null || requestParameters.tenantId === void 0) {
      throw new RequiredError("tenantId", "Required parameter requestParameters.tenantId was null or undefined when calling getApiTokens.");
    }
    const queryParameters = {};
    if (requestParameters.tenantId !== void 0) {
      queryParameters["tenantId"] = requestParameters.tenantId;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/users/{userId}/api-token`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => ApiTokensResponseFromJSON(jsonValue));
  }
  async getApiTokens(requestParameters, initOverrides) {
    const response = await this.getApiTokensRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getCellValuesRaw(requestParameters, initOverrides) {
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling getCellValues.");
    }
    const queryParameters = {};
    if (requestParameters.fieldKey !== void 0) {
      queryParameters["fieldKey"] = requestParameters.fieldKey;
    }
    if (requestParameters.sortField !== void 0) {
      queryParameters["sortField"] = requestParameters.sortField;
    }
    if (requestParameters.sortDirection !== void 0) {
      queryParameters["sortDirection"] = requestParameters.sortDirection;
    }
    if (requestParameters.filter !== void 0) {
      queryParameters["filter"] = requestParameters.filter;
    }
    if (requestParameters.filterField !== void 0) {
      queryParameters["filterField"] = requestParameters.filterField;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    if (requestParameters.distinct !== void 0) {
      queryParameters["distinct"] = requestParameters.distinct;
    }
    if (requestParameters.searchValue !== void 0) {
      queryParameters["searchValue"] = requestParameters.searchValue;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}/cells`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => CellsResponseFromJSON(jsonValue));
  }
  async getCellValues(requestParameters, initOverrides) {
    const response = await this.getCellValuesRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getCountsRaw(requestParameters, initOverrides) {
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling getCounts.");
    }
    const queryParameters = {};
    if (requestParameters.versionId !== void 0) {
      queryParameters["versionId"] = requestParameters.versionId;
    }
    if (requestParameters.sinceVersionId !== void 0) {
      queryParameters["sinceVersionId"] = requestParameters.sinceVersionId;
    }
    if (requestParameters.filter !== void 0) {
      queryParameters["filter"] = requestParameters.filter;
    }
    if (requestParameters.filterField !== void 0) {
      queryParameters["filterField"] = requestParameters.filterField;
    }
    if (requestParameters.searchValue !== void 0) {
      queryParameters["searchValue"] = requestParameters.searchValue;
    }
    if (requestParameters.searchField !== void 0) {
      queryParameters["searchField"] = requestParameters.searchField;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}/counts`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => RecordCountsResponseFromJSON(jsonValue));
  }
  async getCounts(requestParameters, initOverrides) {
    const response = await this.getCountsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEnvironmentAgentLogsRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEnvironmentAgentLogs.");
    }
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/agents/logs`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentLogsResponseFromJSON(jsonValue));
  }
  async getEnvironmentAgentLogs(requestParameters, initOverrides) {
    const response = await this.getEnvironmentAgentLogsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEnvironmentAgentLogsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEnvironmentAgentLogsDeprecated.");
    }
    const queryParameters = {};
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/logs`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AgentLogsResponseFromJSON(jsonValue));
  }
  async getEnvironmentAgentLogsDeprecated(requestParameters, initOverrides) {
    const response = await this.getEnvironmentAgentLogsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEnvironmentByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEnvironmentById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EnvironmentResponseFromJSON(jsonValue));
  }
  async getEnvironmentById(requestParameters, initOverrides) {
    const response = await this.getEnvironmentByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEnvironmentStatsRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEnvironmentStats.");
    }
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    if (requestParameters.start !== void 0) {
      queryParameters["start"] = requestParameters.start.toISOString();
    }
    if (requestParameters.end !== void 0) {
      queryParameters["end"] = requestParameters.end.toISOString();
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/agents/stats`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EnvironmentStatsResponseFromJSON(jsonValue));
  }
  async getEnvironmentStats(requestParameters, initOverrides) {
    const response = await this.getEnvironmentStatsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEnvironmentStatsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEnvironmentStatsDeprecated.");
    }
    const queryParameters = {};
    if (requestParameters.start !== void 0) {
      queryParameters["start"] = requestParameters.start.toISOString();
    }
    if (requestParameters.end !== void 0) {
      queryParameters["end"] = requestParameters.end.toISOString();
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/stats`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EnvironmentStatsResponseFromJSON(jsonValue));
  }
  async getEnvironmentStatsDeprecated(requestParameters, initOverrides) {
    const response = await this.getEnvironmentStatsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEnvironmentsRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EnvironmentsResponseFromJSON(jsonValue));
  }
  async getEnvironments(requestParameters = {}, initOverrides) {
    const response = await this.getEnvironmentsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEventRaw(requestParameters, initOverrides) {
    if (requestParameters.eventId === null || requestParameters.eventId === void 0) {
      throw new RequiredError("eventId", "Required parameter requestParameters.eventId was null or undefined when calling getEvent.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EventResponseFromJSON(jsonValue));
  }
  async getEvent(requestParameters, initOverrides) {
    const response = await this.getEventRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEventDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEventDeprecated.");
    }
    if (requestParameters.eventId === null || requestParameters.eventId === void 0) {
      throw new RequiredError("eventId", "Required parameter requestParameters.eventId was null or undefined when calling getEventDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/events/{eventId}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EventResponseFromJSON(jsonValue));
  }
  async getEventDeprecated(requestParameters, initOverrides) {
    const response = await this.getEventDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEventTokenRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling getEventToken.");
    }
    const queryParameters = {};
    if (requestParameters.spaceId !== void 0) {
      queryParameters["spaceId"] = requestParameters.spaceId;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/subscription`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EventTokenResponseFromJSON(jsonValue));
  }
  async getEventToken(requestParameters, initOverrides) {
    const response = await this.getEventTokenRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEventTokenDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling getEventTokenDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/{spaceId}/subscription`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters.spaceId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EventTokenResponseFromJSON(jsonValue));
  }
  async getEventTokenDeprecated(requestParameters, initOverrides) {
    const response = await this.getEventTokenDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEventsRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    if (requestParameters.spaceId !== void 0) {
      queryParameters["spaceId"] = requestParameters.spaceId;
    }
    if (requestParameters.domain !== void 0) {
      queryParameters["domain"] = requestParameters.domain;
    }
    if (requestParameters.topic !== void 0) {
      queryParameters["topic"] = requestParameters.topic;
    }
    if (requestParameters.since !== void 0) {
      queryParameters["since"] = requestParameters.since.toISOString();
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    if (requestParameters.includeAcknowledged !== void 0) {
      queryParameters["includeAcknowledged"] = requestParameters.includeAcknowledged;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/events`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EventsResponseFromJSON(jsonValue));
  }
  async getEvents(requestParameters = {}, initOverrides) {
    const response = await this.getEventsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getEventsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEventsDeprecated.");
    }
    const queryParameters = {};
    if (requestParameters.spaceId !== void 0) {
      queryParameters["spaceId"] = requestParameters.spaceId;
    }
    if (requestParameters.domain !== void 0) {
      queryParameters["domain"] = requestParameters.domain;
    }
    if (requestParameters.topic !== void 0) {
      queryParameters["topic"] = requestParameters.topic;
    }
    if (requestParameters.since !== void 0) {
      queryParameters["since"] = requestParameters.since.toISOString();
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    if (requestParameters.includeAcknowledged !== void 0) {
      queryParameters["includeAcknowledged"] = requestParameters.includeAcknowledged;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}/events`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EventsResponseFromJSON(jsonValue));
  }
  async getEventsDeprecated(requestParameters, initOverrides) {
    const response = await this.getEventsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getFileRaw(requestParameters, initOverrides) {
    if (requestParameters.fileId === null || requestParameters.fileId === void 0) {
      throw new RequiredError("fileId", "Required parameter requestParameters.fileId was null or undefined when calling getFile.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/files/{fileId}`.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters.fileId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => FileResponseFromJSON(jsonValue));
  }
  async getFile(requestParameters, initOverrides) {
    const response = await this.getFileRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getFilesRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.spaceId !== void 0) {
      queryParameters["spaceId"] = requestParameters.spaceId;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    if (requestParameters.mode !== void 0) {
      queryParameters["mode"] = requestParameters.mode;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/files`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => FilesResponseFromJSON(jsonValue));
  }
  async getFiles(requestParameters = {}, initOverrides) {
    const response = await this.getFilesRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getGuestsRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling getGuests.");
    }
    const queryParameters = {};
    if (requestParameters.spaceId !== void 0) {
      queryParameters["spaceId"] = requestParameters.spaceId;
    }
    if (requestParameters.email !== void 0) {
      queryParameters["email"] = requestParameters.email;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/guests`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => GuestsResponseFromJSON(jsonValue));
  }
  async getGuests(requestParameters, initOverrides) {
    const response = await this.getGuestsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getJobRaw(requestParameters, initOverrides) {
    if (requestParameters.jobId === null || requestParameters.jobId === void 0) {
      throw new RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling getJob.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs/{jobId}`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => JobResponseFromJSON(jsonValue));
  }
  async getJob(requestParameters, initOverrides) {
    const response = await this.getJobRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getJobExecutionPlanRaw(requestParameters, initOverrides) {
    if (requestParameters.jobId === null || requestParameters.jobId === void 0) {
      throw new RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling getJobExecutionPlan.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs/{jobId}/plan`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => JobPlanResponseFromJSON(jsonValue));
  }
  async getJobExecutionPlan(requestParameters, initOverrides) {
    const response = await this.getJobExecutionPlanRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getJobPerformanceReportRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs/report`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new TextApiResponse(response);
  }
  async getJobPerformanceReport(initOverrides) {
    const response = await this.getJobPerformanceReportRaw(initOverrides);
    return await response.value();
  }
  async getJobsRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.environmentId !== void 0) {
      queryParameters["environmentId"] = requestParameters.environmentId;
    }
    if (requestParameters.spaceId !== void 0) {
      queryParameters["spaceId"] = requestParameters.spaceId;
    }
    if (requestParameters.workbookId !== void 0) {
      queryParameters["workbookId"] = requestParameters.workbookId;
    }
    if (requestParameters.fileId !== void 0) {
      queryParameters["fileId"] = requestParameters.fileId;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    if (requestParameters.sortDirection !== void 0) {
      queryParameters["sortDirection"] = requestParameters.sortDirection;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => JobsResponseFromJSON(jsonValue));
  }
  async getJobs(requestParameters = {}, initOverrides) {
    const response = await this.getJobsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getJobsStatsRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.start !== void 0) {
      queryParameters["start"] = requestParameters.start.toISOString();
    }
    if (requestParameters.end !== void 0) {
      queryParameters["end"] = requestParameters.end.toISOString();
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs/stats`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => JobStatsResponseFromJSON(jsonValue));
  }
  async getJobsStats(requestParameters = {}, initOverrides) {
    const response = await this.getJobsStatsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getRecordsRaw(requestParameters, initOverrides) {
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling getRecords.");
    }
    const queryParameters = {};
    if (requestParameters.versionId !== void 0) {
      queryParameters["versionId"] = requestParameters.versionId;
    }
    if (requestParameters.sinceVersionId !== void 0) {
      queryParameters["sinceVersionId"] = requestParameters.sinceVersionId;
    }
    if (requestParameters.sortField !== void 0) {
      queryParameters["sortField"] = requestParameters.sortField;
    }
    if (requestParameters.sortDirection !== void 0) {
      queryParameters["sortDirection"] = requestParameters.sortDirection;
    }
    if (requestParameters.filter !== void 0) {
      queryParameters["filter"] = requestParameters.filter;
    }
    if (requestParameters.filterField !== void 0) {
      queryParameters["filterField"] = requestParameters.filterField;
    }
    if (requestParameters.searchValue !== void 0) {
      queryParameters["searchValue"] = requestParameters.searchValue;
    }
    if (requestParameters.searchField !== void 0) {
      queryParameters["searchField"] = requestParameters.searchField;
    }
    if (requestParameters.ids) {
      queryParameters["ids"] = requestParameters.ids;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    if (requestParameters.includeCounts !== void 0) {
      queryParameters["includeCounts"] = requestParameters.includeCounts;
    }
    if (requestParameters.includeLinks !== void 0) {
      queryParameters["includeLinks"] = requestParameters.includeLinks;
    }
    if (requestParameters.includeMessages !== void 0) {
      queryParameters["includeMessages"] = requestParameters.includeMessages;
    }
    if (requestParameters._for !== void 0) {
      queryParameters["for"] = requestParameters._for;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}/records`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => RecordsResponseFromJSON(jsonValue));
  }
  async getRecords(requestParameters, initOverrides) {
    const response = await this.getRecordsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getRecordsCsvRaw(requestParameters, initOverrides) {
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling getRecordsCsv.");
    }
    const queryParameters = {};
    if (requestParameters.versionId !== void 0) {
      queryParameters["versionId"] = requestParameters.versionId;
    }
    if (requestParameters.sinceVersionId !== void 0) {
      queryParameters["sinceVersionId"] = requestParameters.sinceVersionId;
    }
    if (requestParameters.sortField !== void 0) {
      queryParameters["sortField"] = requestParameters.sortField;
    }
    if (requestParameters.sortDirection !== void 0) {
      queryParameters["sortDirection"] = requestParameters.sortDirection;
    }
    if (requestParameters.filter !== void 0) {
      queryParameters["filter"] = requestParameters.filter;
    }
    if (requestParameters.filterField !== void 0) {
      queryParameters["filterField"] = requestParameters.filterField;
    }
    if (requestParameters.searchValue !== void 0) {
      queryParameters["searchValue"] = requestParameters.searchValue;
    }
    if (requestParameters.searchField !== void 0) {
      queryParameters["searchField"] = requestParameters.searchField;
    }
    if (requestParameters.ids) {
      queryParameters["ids"] = requestParameters.ids;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}/download`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new BlobApiResponse(response);
  }
  async getRecordsCsv(requestParameters, initOverrides) {
    const response = await this.getRecordsCsvRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getRecordsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling getRecordsDeprecated.");
    }
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling getRecordsDeprecated.");
    }
    const queryParameters = {};
    if (requestParameters.versionId !== void 0) {
      queryParameters["versionId"] = requestParameters.versionId;
    }
    if (requestParameters.sinceVersionId !== void 0) {
      queryParameters["sinceVersionId"] = requestParameters.sinceVersionId;
    }
    if (requestParameters.sortField !== void 0) {
      queryParameters["sortField"] = requestParameters.sortField;
    }
    if (requestParameters.sortDirection !== void 0) {
      queryParameters["sortDirection"] = requestParameters.sortDirection;
    }
    if (requestParameters.filter !== void 0) {
      queryParameters["filter"] = requestParameters.filter;
    }
    if (requestParameters.filterField !== void 0) {
      queryParameters["filterField"] = requestParameters.filterField;
    }
    if (requestParameters.searchValue !== void 0) {
      queryParameters["searchValue"] = requestParameters.searchValue;
    }
    if (requestParameters.searchField !== void 0) {
      queryParameters["searchField"] = requestParameters.searchField;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    if (requestParameters.includeCounts !== void 0) {
      queryParameters["includeCounts"] = requestParameters.includeCounts;
    }
    if (requestParameters.includeLinks !== void 0) {
      queryParameters["includeLinks"] = requestParameters.includeLinks;
    }
    if (requestParameters.includeMessages !== void 0) {
      queryParameters["includeMessages"] = requestParameters.includeMessages;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}/sheets/{sheetId}/records`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))).replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => RecordsResponseFromJSON(jsonValue));
  }
  async getRecordsDeprecated(requestParameters, initOverrides) {
    const response = await this.getRecordsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getSheetRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling getSheet.");
    }
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling getSheet.");
    }
    const queryParameters = {};
    if (requestParameters.workbookId !== void 0) {
      queryParameters["workbookId"] = requestParameters.workbookId;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SheetResponseFromJSON(jsonValue));
  }
  async getSheet(requestParameters, initOverrides) {
    const response = await this.getSheetRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getSheetsRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling getSheets.");
    }
    const queryParameters = {};
    if (requestParameters.workbookId !== void 0) {
      queryParameters["workbookId"] = requestParameters.workbookId;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SheetsResponseFromJSON(jsonValue));
  }
  async getSheets(requestParameters, initOverrides) {
    const response = await this.getSheetsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getSheetsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling getSheetsDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}/sheets`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SheetsResponseFromJSON(jsonValue));
  }
  async getSheetsDeprecated(requestParameters, initOverrides) {
    const response = await this.getSheetsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getSpaceAuthRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling getSpaceAuth.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/{spaceId}/auth`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters.spaceId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
  }
  async getSpaceAuth(requestParameters, initOverrides) {
    const response = await this.getSpaceAuthRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getSpaceByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling getSpaceById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/{spaceId}`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters.spaceId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpaceResponseFromJSON(jsonValue));
  }
  async getSpaceById(requestParameters, initOverrides) {
    const response = await this.getSpaceByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getSpaceDocumentByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling getSpaceDocumentById.");
    }
    if (requestParameters.documentId === null || requestParameters.documentId === void 0) {
      throw new RequiredError("documentId", "Required parameter requestParameters.documentId was null or undefined when calling getSpaceDocumentById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/{spaceId}/documents/{documentId}`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters.spaceId))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => DocumentResponseFromJSON(jsonValue));
  }
  async getSpaceDocumentById(requestParameters, initOverrides) {
    const response = await this.getSpaceDocumentByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getSpaceDocumentsRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling getSpaceDocuments.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/{spaceId}/documents`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters.spaceId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => DocumentsResponseFromJSON(jsonValue));
  }
  async getSpaceDocuments(requestParameters, initOverrides) {
    const response = await this.getSpaceDocumentsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getSpaceGuestByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.guestId === null || requestParameters.guestId === void 0) {
      throw new RequiredError("guestId", "Required parameter requestParameters.guestId was null or undefined when calling getSpaceGuestById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/guests/{guestId}`.replace(`{${"guestId"}}`, encodeURIComponent(String(requestParameters.guestId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => GuestResponseFromJSON(jsonValue));
  }
  async getSpaceGuestById(requestParameters, initOverrides) {
    const response = await this.getSpaceGuestByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getUserRaw(requestParameters, initOverrides) {
    if (requestParameters.userId === null || requestParameters.userId === void 0) {
      throw new RequiredError("userId", "Required parameter requestParameters.userId was null or undefined when calling getUser.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
  }
  async getUser(requestParameters, initOverrides) {
    const response = await this.getUserRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getUsersRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.email !== void 0) {
      queryParameters["email"] = requestParameters.email;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/users`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => UsersResponseFromJSON(jsonValue));
  }
  async getUsers(requestParameters = {}, initOverrides) {
    const response = await this.getUsersRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getWorkbookByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling getWorkbookById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => WorkbookResponseFromJSON(jsonValue));
  }
  async getWorkbookById(requestParameters, initOverrides) {
    const response = await this.getWorkbookByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async handleUserInviteRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    const response = await this.request({
      path: `/frontegg/invite`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: FronteggUserToJSON(requestParameters.fronteggUser)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
  }
  async handleUserInvite(requestParameters = {}, initOverrides) {
    const response = await this.handleUserInviteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async handleUserSignUpRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    const response = await this.request({
      path: `/frontegg/sign-up`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: FronteggUserToJSON(requestParameters.fronteggUser)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
  }
  async handleUserSignUp(requestParameters = {}, initOverrides) {
    const response = await this.handleUserSignUpRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async healthGetRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    const response = await this.request({
      path: `/health`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => HealthResponseFromJSON(jsonValue));
  }
  async healthGet(initOverrides) {
    const response = await this.healthGetRaw(initOverrides);
    return await response.value();
  }
  async inviteGuestsRaw(requestParameters, initOverrides) {
    if (requestParameters.inviteGuestsRequestInner === null || requestParameters.inviteGuestsRequestInner === void 0) {
      throw new RequiredError("inviteGuestsRequestInner", "Required parameter requestParameters.inviteGuestsRequestInner was null or undefined when calling inviteGuests.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/invitations`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.inviteGuestsRequestInner.map(InviteGuestsRequestInnerToJSON)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async inviteGuests(requestParameters, initOverrides) {
    const response = await this.inviteGuestsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async rebuildWorkbookRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling rebuildWorkbook.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}/rebuild`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async rebuildWorkbook(requestParameters, initOverrides) {
    const response = await this.rebuildWorkbookRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async replaceRaw(requestParameters, initOverrides) {
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling replace.");
    }
    if (requestParameters.fieldKey === null || requestParameters.fieldKey === void 0) {
      throw new RequiredError("fieldKey", "Required parameter requestParameters.fieldKey was null or undefined when calling replace.");
    }
    if (requestParameters.searchValue === null || requestParameters.searchValue === void 0) {
      throw new RequiredError("searchValue", "Required parameter requestParameters.searchValue was null or undefined when calling replace.");
    }
    if (requestParameters.replaceRequest === null || requestParameters.replaceRequest === void 0) {
      throw new RequiredError("replaceRequest", "Required parameter requestParameters.replaceRequest was null or undefined when calling replace.");
    }
    const queryParameters = {};
    if (requestParameters.fieldKey !== void 0) {
      queryParameters["fieldKey"] = requestParameters.fieldKey;
    }
    if (requestParameters.searchValue !== void 0) {
      queryParameters["searchValue"] = requestParameters.searchValue;
    }
    if (requestParameters.pageSize !== void 0) {
      queryParameters["pageSize"] = requestParameters.pageSize;
    }
    if (requestParameters.pageNumber !== void 0) {
      queryParameters["pageNumber"] = requestParameters.pageNumber;
    }
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}/replace`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "PUT",
      headers: headerParameters,
      query: queryParameters,
      body: ReplaceRequestToJSON(requestParameters.replaceRequest)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => RecordsResponseFromJSON(jsonValue));
  }
  async replace(requestParameters, initOverrides) {
    const response = await this.replaceRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async replaceSpaceConfigDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.spacePatternConfig === null || requestParameters.spacePatternConfig === void 0) {
      throw new RequiredError("spacePatternConfig", "Required parameter requestParameters.spacePatternConfig was null or undefined when calling replaceSpaceConfigDeprecated.");
    }
    const queryParameters = {};
    if (requestParameters.migrate !== void 0) {
      queryParameters["migrate"] = requestParameters.migrate;
    }
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/configs`,
      method: "PUT",
      headers: headerParameters,
      query: queryParameters,
      body: SpacePatternConfigToJSON(requestParameters.spacePatternConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpaceConfigResponseFromJSON(jsonValue));
  }
  async replaceSpaceConfigDeprecated(requestParameters, initOverrides) {
    const response = await this.replaceSpaceConfigDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateDocumentRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling updateDocument.");
    }
    if (requestParameters.documentId === null || requestParameters.documentId === void 0) {
      throw new RequiredError("documentId", "Required parameter requestParameters.documentId was null or undefined when calling updateDocument.");
    }
    if (requestParameters.documentConfig === null || requestParameters.documentConfig === void 0) {
      throw new RequiredError("documentConfig", "Required parameter requestParameters.documentConfig was null or undefined when calling updateDocument.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/{spaceId}/documents/{documentId}`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters.spaceId))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: DocumentConfigToJSON(requestParameters.documentConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => DocumentResponseFromJSON(jsonValue));
  }
  async updateDocument(requestParameters, initOverrides) {
    const response = await this.updateDocumentRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateEnvironmentByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.environmentId === null || requestParameters.environmentId === void 0) {
      throw new RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling updateEnvironmentById.");
    }
    if (requestParameters.environmentConfig === null || requestParameters.environmentConfig === void 0) {
      throw new RequiredError("environmentConfig", "Required parameter requestParameters.environmentConfig was null or undefined when calling updateEnvironmentById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/environments/{environmentId}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: EnvironmentConfigToJSON(requestParameters.environmentConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => EnvironmentResponseFromJSON(jsonValue));
  }
  async updateEnvironmentById(requestParameters, initOverrides) {
    const response = await this.updateEnvironmentByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateFileByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.fileId === null || requestParameters.fileId === void 0) {
      throw new RequiredError("fileId", "Required parameter requestParameters.fileId was null or undefined when calling updateFileById.");
    }
    if (requestParameters.fileConfig === null || requestParameters.fileConfig === void 0) {
      throw new RequiredError("fileConfig", "Required parameter requestParameters.fileConfig was null or undefined when calling updateFileById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/files/{fileId}`.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters.fileId))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: FileConfigToJSON(requestParameters.fileConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => FileResponseFromJSON(jsonValue));
  }
  async updateFileById(requestParameters, initOverrides) {
    const response = await this.updateFileByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateGuestRaw(requestParameters, initOverrides) {
    if (requestParameters.guestId === null || requestParameters.guestId === void 0) {
      throw new RequiredError("guestId", "Required parameter requestParameters.guestId was null or undefined when calling updateGuest.");
    }
    if (requestParameters.guestConfig === null || requestParameters.guestConfig === void 0) {
      throw new RequiredError("guestConfig", "Required parameter requestParameters.guestConfig was null or undefined when calling updateGuest.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/guests/{guestId}`.replace(`{${"guestId"}}`, encodeURIComponent(String(requestParameters.guestId))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: GuestConfigToJSON(requestParameters.guestConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => GuestResponseFromJSON(jsonValue));
  }
  async updateGuest(requestParameters, initOverrides) {
    const response = await this.updateGuestRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateJobRaw(requestParameters, initOverrides) {
    if (requestParameters.jobId === null || requestParameters.jobId === void 0) {
      throw new RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling updateJob.");
    }
    if (requestParameters.jobUpdate === null || requestParameters.jobUpdate === void 0) {
      throw new RequiredError("jobUpdate", "Required parameter requestParameters.jobUpdate was null or undefined when calling updateJob.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs/{jobId}`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: JobUpdateToJSON(requestParameters.jobUpdate)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => JobResponseFromJSON(jsonValue));
  }
  async updateJob(requestParameters, initOverrides) {
    const response = await this.updateJobRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateJobExecutionPlanByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.jobId === null || requestParameters.jobId === void 0) {
      throw new RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling updateJobExecutionPlanById.");
    }
    if (requestParameters.updateJobExecutionPlanByIdRequest === null || requestParameters.updateJobExecutionPlanByIdRequest === void 0) {
      throw new RequiredError("updateJobExecutionPlanByIdRequest", "Required parameter requestParameters.updateJobExecutionPlanByIdRequest was null or undefined when calling updateJobExecutionPlanById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs/{jobId}/plan`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
      method: "PUT",
      headers: headerParameters,
      query: queryParameters,
      body: UpdateJobExecutionPlanByIdRequestToJSON(requestParameters.updateJobExecutionPlanByIdRequest)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => JobPlanResponseFromJSON(jsonValue));
  }
  async updateJobExecutionPlanById(requestParameters, initOverrides) {
    const response = await this.updateJobExecutionPlanByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateJobExecutionPlanFieldsRaw(requestParameters, initOverrides) {
    if (requestParameters.jobId === null || requestParameters.jobId === void 0) {
      throw new RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling updateJobExecutionPlanFields.");
    }
    if (requestParameters.updateJobExecutionPlanByIdRequest === null || requestParameters.updateJobExecutionPlanByIdRequest === void 0) {
      throw new RequiredError("updateJobExecutionPlanByIdRequest", "Required parameter requestParameters.updateJobExecutionPlanByIdRequest was null or undefined when calling updateJobExecutionPlanFields.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/jobs/{jobId}/plan`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: UpdateJobExecutionPlanByIdRequestToJSON(requestParameters.updateJobExecutionPlanByIdRequest)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => JobPlanResponseFromJSON(jsonValue));
  }
  async updateJobExecutionPlanFields(requestParameters, initOverrides) {
    const response = await this.updateJobExecutionPlanFieldsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateRecordsRaw(requestParameters, initOverrides) {
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling updateRecords.");
    }
    if (requestParameters.recordsUpdates === null || requestParameters.recordsUpdates === void 0) {
      throw new RequiredError("recordsUpdates", "Required parameter requestParameters.recordsUpdates was null or undefined when calling updateRecords.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}/records`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "PUT",
      headers: headerParameters,
      query: queryParameters,
      body: RecordsUpdatesToJSON(requestParameters.recordsUpdates)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => VersionResponseFromJSON(jsonValue));
  }
  async updateRecords(requestParameters, initOverrides) {
    const response = await this.updateRecordsRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateRecordsDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling updateRecordsDeprecated.");
    }
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling updateRecordsDeprecated.");
    }
    if (requestParameters.recordsUpdates === null || requestParameters.recordsUpdates === void 0) {
      throw new RequiredError("recordsUpdates", "Required parameter requestParameters.recordsUpdates was null or undefined when calling updateRecordsDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}/sheets/{sheetId}/records`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))).replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "PUT",
      headers: headerParameters,
      query: queryParameters,
      body: RecordsUpdatesToJSON(requestParameters.recordsUpdates)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => VersionResponseFromJSON(jsonValue));
  }
  async updateRecordsDeprecated(requestParameters, initOverrides) {
    const response = await this.updateRecordsDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateSpaceByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.spaceId === null || requestParameters.spaceId === void 0) {
      throw new RequiredError("spaceId", "Required parameter requestParameters.spaceId was null or undefined when calling updateSpaceById.");
    }
    if (requestParameters.spaceConfig === null || requestParameters.spaceConfig === void 0) {
      throw new RequiredError("spaceConfig", "Required parameter requestParameters.spaceConfig was null or undefined when calling updateSpaceById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/spaces/{spaceId}`.replace(`{${"spaceId"}}`, encodeURIComponent(String(requestParameters.spaceId))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: SpaceConfigToJSON(requestParameters.spaceConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpaceResponseFromJSON(jsonValue));
  }
  async updateSpaceById(requestParameters, initOverrides) {
    const response = await this.updateSpaceByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateSpaceConfigRaw(requestParameters, initOverrides) {
    if (requestParameters.spacePatternConfig === null || requestParameters.spacePatternConfig === void 0) {
      throw new RequiredError("spacePatternConfig", "Required parameter requestParameters.spacePatternConfig was null or undefined when calling updateSpaceConfig.");
    }
    const queryParameters = {};
    if (requestParameters.migrate !== void 0) {
      queryParameters["migrate"] = requestParameters.migrate;
    }
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/space-configs`,
      method: "PUT",
      headers: headerParameters,
      query: queryParameters,
      body: SpacePatternConfigToJSON(requestParameters.spacePatternConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SpaceConfigResponseFromJSON(jsonValue));
  }
  async updateSpaceConfig(requestParameters, initOverrides) {
    const response = await this.updateSpaceConfigRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async updateWorkbookByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling updateWorkbookById.");
    }
    if (requestParameters.workbookConfig === null || requestParameters.workbookConfig === void 0) {
      throw new RequiredError("workbookConfig", "Required parameter requestParameters.workbookConfig was null or undefined when calling updateWorkbookById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: WorkbookConfigToJSON(requestParameters.workbookConfig)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => WorkbookResponseFromJSON(jsonValue));
  }
  async updateWorkbookById(requestParameters, initOverrides) {
    const response = await this.updateWorkbookByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async validateSheetRaw(requestParameters, initOverrides) {
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling validateSheet.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/sheets/{sheetId}/validate`.replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async validateSheet(requestParameters, initOverrides) {
    const response = await this.validateSheetRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async validateSheetDeprecatedRaw(requestParameters, initOverrides) {
    if (requestParameters.workbookId === null || requestParameters.workbookId === void 0) {
      throw new RequiredError("workbookId", "Required parameter requestParameters.workbookId was null or undefined when calling validateSheetDeprecated.");
    }
    if (requestParameters.sheetId === null || requestParameters.sheetId === void 0) {
      throw new RequiredError("sheetId", "Required parameter requestParameters.sheetId was null or undefined when calling validateSheetDeprecated.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuth", []);
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/workbooks/{workbookId}/sheets/{sheetId}/validate`.replace(`{${"workbookId"}}`, encodeURIComponent(String(requestParameters.workbookId))).replace(`{${"sheetId"}}`, encodeURIComponent(String(requestParameters.sheetId))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
  }
  async validateSheetDeprecated(requestParameters, initOverrides) {
    const response = await this.validateSheetDeprecatedRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async versionGetRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    const response = await this.request({
      path: `/version`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AppVersionResponseFromJSON(jsonValue));
  }
  async versionGet(initOverrides) {
    const response = await this.versionGetRaw(initOverrides);
    return await response.value();
  }
};
var GetFilesModeEnum = {
  Import: "import",
  Export: "export"
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AccessTokenFromJSON,
  AccessTokenFromJSONTyped,
  AccessTokenResponseFromJSON,
  AccessTokenResponseFromJSONTyped,
  AccessTokenResponseToJSON,
  AccessTokenToJSON,
  ActionFromJSON,
  ActionFromJSONTyped,
  ActionToJSON,
  AgentCompilerEnum,
  AgentConfigCompilerEnum,
  AgentConfigFromJSON,
  AgentConfigFromJSONTyped,
  AgentConfigToJSON,
  AgentFromJSON,
  AgentFromJSONTyped,
  AgentLogFromJSON,
  AgentLogFromJSONTyped,
  AgentLogToJSON,
  AgentLogsResponseFromJSON,
  AgentLogsResponseFromJSONTyped,
  AgentLogsResponseToJSON,
  AgentResponseFromJSON,
  AgentResponseFromJSONTyped,
  AgentResponseToJSON,
  AgentStatsFromJSON,
  AgentStatsFromJSONTyped,
  AgentStatsToJSON,
  AgentToJSON,
  AgentsResponseFromJSON,
  AgentsResponseFromJSONTyped,
  AgentsResponseToJSON,
  ApiCredentialsFromJSON,
  ApiCredentialsFromJSONTyped,
  ApiCredentialsToJSON,
  ApiKeyFromJSON,
  ApiKeyFromJSONTyped,
  ApiKeyOperationsInnerFromJSON,
  ApiKeyOperationsInnerFromJSONTyped,
  ApiKeyOperationsInnerToJSON,
  ApiKeyToJSON,
  ApiKeyTypeEnum,
  ApiKeysResponseFromJSON,
  ApiKeysResponseFromJSONTyped,
  ApiKeysResponseToJSON,
  ApiTokenFromJSON,
  ApiTokenFromJSONTyped,
  ApiTokenResponseFromJSON,
  ApiTokenResponseFromJSONTyped,
  ApiTokenResponseToJSON,
  ApiTokenToJSON,
  ApiTokensResponseFromJSON,
  ApiTokensResponseFromJSONTyped,
  ApiTokensResponseToJSON,
  AppVersionResponseFromJSON,
  AppVersionResponseFromJSONTyped,
  AppVersionResponseToJSON,
  ArrayablePropertyFromJSON,
  ArrayablePropertyFromJSONTyped,
  ArrayablePropertyToJSON,
  BASE_PATH,
  BaseAPI,
  BaseConstraintFromJSON,
  BaseConstraintFromJSONTyped,
  BaseConstraintToJSON,
  BaseConstraintTypeEnum,
  BasePropertyFromJSON,
  BasePropertyFromJSONTyped,
  BasePropertyToJSON,
  BasePropertyTypeEnum,
  BaseSideBarConfigFromJSON,
  BaseSideBarConfigFromJSONTyped,
  BaseSideBarConfigToJSON,
  BaseSideBarConfigTypeEnum,
  BlobApiResponse,
  BlueprintFromJSON,
  BlueprintFromJSONTyped,
  BlueprintToJSON,
  BooleanPropertyAllOfConfigFromJSON,
  BooleanPropertyAllOfConfigFromJSONTyped,
  BooleanPropertyAllOfConfigToJSON,
  BooleanPropertyAllOfFromJSON,
  BooleanPropertyAllOfFromJSONTyped,
  BooleanPropertyAllOfToJSON,
  BooleanPropertyAllOfTypeEnum,
  BooleanPropertyFromJSON,
  BooleanPropertyFromJSONTyped,
  BooleanPropertyToJSON,
  BooleanPropertyTypeEnum,
  COLLECTION_FORMATS,
  CellValueFromJSON,
  CellValueFromJSONTyped,
  CellValueToJSON,
  CellValueValueFromJSON,
  CellValueValueFromJSONTyped,
  CellValueValueToJSON,
  CellValueWithCountsFromJSON,
  CellValueWithCountsFromJSONTyped,
  CellValueWithCountsToJSON,
  CellValueWithLinksFromJSON,
  CellValueWithLinksFromJSONTyped,
  CellValueWithLinksToJSON,
  CellsResponseDataFromJSON,
  CellsResponseDataFromJSONTyped,
  CellsResponseDataToJSON,
  CellsResponseFromJSON,
  CellsResponseFromJSONTyped,
  CellsResponseToJSON,
  ComputedConstraintAllOfFromJSON,
  ComputedConstraintAllOfFromJSONTyped,
  ComputedConstraintAllOfToJSON,
  ComputedConstraintAllOfTypeEnum,
  ComputedConstraintFromJSON,
  ComputedConstraintFromJSONTyped,
  ComputedConstraintToJSON,
  ComputedConstraintTypeEnum,
  Configuration,
  ConstraintFromJSON,
  ConstraintFromJSONTyped,
  ConstraintToJSON,
  CreateAccessTokenRequestFromJSON,
  CreateAccessTokenRequestFromJSONTyped,
  CreateAccessTokenRequestToJSON,
  CreateFileRequestFromJSON,
  CreateFileRequestFromJSONTyped,
  CreateFileRequestToJSON,
  DatePropertyAllOfFromJSON,
  DatePropertyAllOfFromJSONTyped,
  DatePropertyAllOfToJSON,
  DatePropertyAllOfTypeEnum,
  DatePropertyFromJSON,
  DatePropertyFromJSONTyped,
  DatePropertyToJSON,
  DatePropertyTypeEnum,
  DefaultApi,
  DefaultConfig,
  DeleteJobConfigFromJSON,
  DeleteJobConfigFromJSONTyped,
  DeleteJobConfigToJSON,
  DestinationFieldFromJSON,
  DestinationFieldFromJSONTyped,
  DestinationFieldToJSON,
  DocumentConfigFromJSON,
  DocumentConfigFromJSONTyped,
  DocumentConfigToJSON,
  DocumentFromJSON,
  DocumentFromJSONTyped,
  DocumentResponseFromJSON,
  DocumentResponseFromJSONTyped,
  DocumentResponseToJSON,
  DocumentSidebarConfigAllOfFromJSON,
  DocumentSidebarConfigAllOfFromJSONTyped,
  DocumentSidebarConfigAllOfToJSON,
  DocumentSidebarConfigFromJSON,
  DocumentSidebarConfigFromJSONTyped,
  DocumentSidebarConfigToJSON,
  DocumentSidebarConfigTypeEnum,
  DocumentToJSON,
  DocumentsResponseFromJSON,
  DocumentsResponseFromJSONTyped,
  DocumentsResponseToJSON,
  EdgeFromJSON,
  EdgeFromJSONTyped,
  EdgeMetadataCertaintyEnum,
  EdgeMetadataFromJSON,
  EdgeMetadataFromJSONTyped,
  EdgeMetadataToJSON,
  EdgeToJSON,
  EnumDetails1FromJSON,
  EnumDetails1FromJSONTyped,
  EnumDetails1ToJSON,
  EnumDetailsFromJSON,
  EnumDetailsFromJSONTyped,
  EnumDetailsToJSON,
  EnumMappingField1FromJSON,
  EnumMappingField1FromJSONTyped,
  EnumMappingField1ToJSON,
  EnumMappingFieldFromJSON,
  EnumMappingFieldFromJSONTyped,
  EnumMappingFieldToJSON,
  EnumPropertyAllOfConfigFromJSON,
  EnumPropertyAllOfConfigFromJSONTyped,
  EnumPropertyAllOfConfigToJSON,
  EnumPropertyAllOfFromJSON,
  EnumPropertyAllOfFromJSONTyped,
  EnumPropertyAllOfToJSON,
  EnumPropertyAllOfTypeEnum,
  EnumPropertyFromJSON,
  EnumPropertyFromJSONTyped,
  EnumPropertyOptionFromJSON,
  EnumPropertyOptionFromJSONTyped,
  EnumPropertyOptionToJSON,
  EnumPropertyOptionValueFromJSON,
  EnumPropertyOptionValueFromJSONTyped,
  EnumPropertyOptionValueToJSON,
  EnumPropertyToJSON,
  EnumPropertyTypeEnum,
  EnvironmentConfigFromJSON,
  EnvironmentConfigFromJSONTyped,
  EnvironmentConfigToJSON,
  EnvironmentFromJSON,
  EnvironmentFromJSONTyped,
  EnvironmentResponseFromJSON,
  EnvironmentResponseFromJSONTyped,
  EnvironmentResponseToJSON,
  EnvironmentStatsResponseDataFromJSON,
  EnvironmentStatsResponseDataFromJSONTyped,
  EnvironmentStatsResponseDataToJSON,
  EnvironmentStatsResponseFromJSON,
  EnvironmentStatsResponseFromJSONTyped,
  EnvironmentStatsResponseToJSON,
  EnvironmentToJSON,
  EnvironmentsResponseFromJSON,
  EnvironmentsResponseFromJSONTyped,
  EnvironmentsResponseToJSON,
  ErrorResponseErrorsInnerFromJSON,
  ErrorResponseErrorsInnerFromJSONTyped,
  ErrorResponseErrorsInnerToJSON,
  ErrorResponseFromJSON,
  ErrorResponseFromJSONTyped,
  ErrorResponseToJSON,
  EventConfigAttributesFromJSON,
  EventConfigAttributesFromJSONTyped,
  EventConfigAttributesProgressFromJSON,
  EventConfigAttributesProgressFromJSONTyped,
  EventConfigAttributesProgressToJSON,
  EventConfigAttributesToJSON,
  EventConfigContextActorIdFromJSON,
  EventConfigContextActorIdFromJSONTyped,
  EventConfigContextActorIdToJSON,
  EventConfigContextFromJSON,
  EventConfigContextFromJSONTyped,
  EventConfigContextToJSON,
  EventConfigDomainEnum,
  EventConfigFromJSON,
  EventConfigFromJSONTyped,
  EventConfigToJSON,
  EventDomainEnum,
  EventFromJSON,
  EventFromJSONTyped,
  EventResponseFromJSON,
  EventResponseFromJSONTyped,
  EventResponseToJSON,
  EventToJSON,
  EventTokenFromJSON,
  EventTokenFromJSONTyped,
  EventTokenResponseFromJSON,
  EventTokenResponseFromJSONTyped,
  EventTokenResponseToJSON,
  EventTokenToJSON,
  EventTopic,
  EventTopicFromJSON,
  EventTopicFromJSONTyped,
  EventTopicToJSON,
  EventsResponseFromJSON,
  EventsResponseFromJSONTyped,
  EventsResponseToJSON,
  ExchangeInvitationRequestFromJSON,
  ExchangeInvitationRequestFromJSONTyped,
  ExchangeInvitationRequestToJSON,
  ExchangeTokenResponseDataFromJSON,
  ExchangeTokenResponseDataFromJSONTyped,
  ExchangeTokenResponseDataToJSON,
  ExchangeTokenResponseFromJSON,
  ExchangeTokenResponseFromJSONTyped,
  ExchangeTokenResponseToJSON,
  ExportJobConfigFromJSON,
  ExportJobConfigFromJSONTyped,
  ExportJobConfigToJSON,
  ExportOptionsFromJSON,
  ExportOptionsFromJSONTyped,
  ExportOptionsToJSON,
  FetchError,
  FieldConfigFromJSON,
  FieldConfigFromJSONTyped,
  FieldConfigToJSON,
  FileConfigFromJSON,
  FileConfigFromJSONTyped,
  FileConfigToJSON,
  FileJobConfigDriverEnum,
  FileJobConfigFromJSON,
  FileJobConfigFromJSONTyped,
  FileJobConfigToJSON,
  FileResponseFromJSON,
  FileResponseFromJSONTyped,
  FileResponseToJSON,
  FilesResponseFromJSON,
  FilesResponseFromJSONTyped,
  FilesResponseToJSON,
  Filter,
  FilterFromJSON,
  FilterFromJSONTyped,
  FilterToJSON,
  FronteggUserFromJSON,
  FronteggUserFromJSONTyped,
  FronteggUserToJSON,
  GetFilesModeEnum,
  GetSpacesSortField,
  GetSpacesSortFieldFromJSON,
  GetSpacesSortFieldFromJSONTyped,
  GetSpacesSortFieldToJSON,
  GuestAuthenticationEnum,
  GuestAuthenticationEnumFromJSON,
  GuestAuthenticationEnumFromJSONTyped,
  GuestAuthenticationEnumToJSON,
  GuestConfigFromJSON,
  GuestConfigFromJSONTyped,
  GuestConfigSpacesInnerFromJSON,
  GuestConfigSpacesInnerFromJSONTyped,
  GuestConfigSpacesInnerToJSON,
  GuestConfigSpacesInnerWorkbooksInnerFromJSON,
  GuestConfigSpacesInnerWorkbooksInnerFromJSONTyped,
  GuestConfigSpacesInnerWorkbooksInnerToJSON,
  GuestConfigToJSON,
  GuestFromJSON,
  GuestFromJSONTyped,
  GuestResponseFromJSON,
  GuestResponseFromJSONTyped,
  GuestResponseToJSON,
  GuestToJSON,
  GuestsResponseFromJSON,
  GuestsResponseFromJSONTyped,
  GuestsResponseToJSON,
  HealthResponseFromJSON,
  HealthResponseFromJSONTyped,
  HealthResponseToJSON,
  InviteGuestsRequestInnerFromJSON,
  InviteGuestsRequestInnerFromJSONTyped,
  InviteGuestsRequestInnerToJSON,
  JSONApiResponse,
  JobConfigFromJSON,
  JobConfigFromJSONTyped,
  JobConfigStatusEnum,
  JobConfigToJSON,
  JobConfigTriggerEnum,
  JobConfigTypeEnum,
  JobFromJSON,
  JobFromJSONTyped,
  JobPlanFromJSON,
  JobPlanFromJSONTyped,
  JobPlanResponseFromJSON,
  JobPlanResponseFromJSONTyped,
  JobPlanResponseToJSON,
  JobPlanToJSON,
  JobResponseFromJSON,
  JobResponseFromJSONTyped,
  JobResponseToJSON,
  JobStatsAccountsFromJSON,
  JobStatsAccountsFromJSONTyped,
  JobStatsAccountsToJSON,
  JobStatsFromJSON,
  JobStatsFromJSONTyped,
  JobStatsJobsFromJSON,
  JobStatsJobsFromJSONTyped,
  JobStatsJobsMapFromJSON,
  JobStatsJobsMapFromJSONTyped,
  JobStatsJobsMapToJSON,
  JobStatsJobsToJSON,
  JobStatsResponseFromJSON,
  JobStatsResponseFromJSONTyped,
  JobStatsResponseToJSON,
  JobStatsToJSON,
  JobStatusEnum,
  JobToJSON,
  JobTriggerEnum,
  JobTypeEnum,
  JobUpdateConfigFromJSON,
  JobUpdateConfigFromJSONTyped,
  JobUpdateConfigToJSON,
  JobUpdateFromJSON,
  JobUpdateFromJSONTyped,
  JobUpdateStatusEnum,
  JobUpdateToJSON,
  JobsResponseFromJSON,
  JobsResponseFromJSONTyped,
  JobsResponseToJSON,
  LinkSidebarConfigAllOfFromJSON,
  LinkSidebarConfigAllOfFromJSONTyped,
  LinkSidebarConfigAllOfToJSON,
  LinkSidebarConfigFromJSON,
  LinkSidebarConfigFromJSONTyped,
  LinkSidebarConfigToJSON,
  LinkSidebarConfigTypeEnum,
  ModelFileFromJSON,
  ModelFileFromJSONTyped,
  ModelFileStatusEnum,
  ModelFileStatusEnumFromJSON,
  ModelFileStatusEnumFromJSONTyped,
  ModelFileStatusEnumToJSON,
  ModelFileToJSON,
  NumberPropertyAllOfConfigFromJSON,
  NumberPropertyAllOfConfigFromJSONTyped,
  NumberPropertyAllOfConfigToJSON,
  NumberPropertyAllOfFromJSON,
  NumberPropertyAllOfFromJSONTyped,
  NumberPropertyAllOfToJSON,
  NumberPropertyAllOfTypeEnum,
  NumberPropertyFromJSON,
  NumberPropertyFromJSONTyped,
  NumberPropertyToJSON,
  NumberPropertyTypeEnum,
  PaginationFromJSON,
  PaginationFromJSONTyped,
  PaginationToJSON,
  PipelineJobConfigFromJSON,
  PipelineJobConfigFromJSONTyped,
  PipelineJobConfigToJSON,
  PlanFromJSON,
  PlanFromJSONTyped,
  PlanToJSON,
  PropertyFromJSON,
  PropertyFromJSONTyped,
  PropertyToJSON,
  RecordCountsFromJSON,
  RecordCountsFromJSONTyped,
  RecordCountsResponseDataAllOfFromJSON,
  RecordCountsResponseDataAllOfFromJSONTyped,
  RecordCountsResponseDataAllOfToJSON,
  RecordCountsResponseDataFromJSON,
  RecordCountsResponseDataFromJSONTyped,
  RecordCountsResponseDataToJSON,
  RecordCountsResponseFromJSON,
  RecordCountsResponseFromJSONTyped,
  RecordCountsResponseToJSON,
  RecordCountsToJSON,
  RecordDataFromJSON,
  RecordDataFromJSONTyped,
  RecordDataToJSON,
  RecordDataWithLinksFromJSON,
  RecordDataWithLinksFromJSONTyped,
  RecordDataWithLinksToJSON,
  RecordFromJSON,
  RecordFromJSONTyped,
  RecordToJSON,
  RecordUpdatesAllOfFromJSON,
  RecordUpdatesAllOfFromJSONTyped,
  RecordUpdatesAllOfToJSON,
  RecordUpdatesFromJSON,
  RecordUpdatesFromJSONTyped,
  RecordUpdatesToJSON,
  RecordWithLinksFromJSON,
  RecordWithLinksFromJSONTyped,
  RecordWithLinksToJSON,
  RecordsDataFromJSON,
  RecordsDataFromJSONTyped,
  RecordsDataToJSON,
  RecordsFromJSON,
  RecordsFromJSONTyped,
  RecordsResponseDataAllOfFromJSON,
  RecordsResponseDataAllOfFromJSONTyped,
  RecordsResponseDataAllOfToJSON,
  RecordsResponseDataFromJSON,
  RecordsResponseDataFromJSONTyped,
  RecordsResponseDataToJSON,
  RecordsResponseFromJSON,
  RecordsResponseFromJSONTyped,
  RecordsResponseToJSON,
  RecordsToJSON,
  RecordsUpdatesFromJSON,
  RecordsUpdatesFromJSONTyped,
  RecordsUpdatesToJSON,
  RecordsWithLinksFromJSON,
  RecordsWithLinksFromJSONTyped,
  RecordsWithLinksToJSON,
  ReferencePropertyAllOfConfigFromJSON,
  ReferencePropertyAllOfConfigFromJSONTyped,
  ReferencePropertyAllOfConfigRelationshipEnum,
  ReferencePropertyAllOfConfigToJSON,
  ReferencePropertyAllOfFromJSON,
  ReferencePropertyAllOfFromJSONTyped,
  ReferencePropertyAllOfToJSON,
  ReferencePropertyAllOfTypeEnum,
  ReferencePropertyFromJSON,
  ReferencePropertyFromJSONTyped,
  ReferencePropertyToJSON,
  ReferencePropertyTypeEnum,
  ReplaceRequestFromJSON,
  ReplaceRequestFromJSONTyped,
  ReplaceRequestReplaceValueFromJSON,
  ReplaceRequestReplaceValueFromJSONTyped,
  ReplaceRequestReplaceValueToJSON,
  ReplaceRequestToJSON,
  RequiredConstraintAllOfFromJSON,
  RequiredConstraintAllOfFromJSONTyped,
  RequiredConstraintAllOfToJSON,
  RequiredConstraintAllOfTypeEnum,
  RequiredConstraintFromJSON,
  RequiredConstraintFromJSONTyped,
  RequiredConstraintToJSON,
  RequiredConstraintTypeEnum,
  RequiredError,
  ResponseError,
  SheetAccess,
  SheetAccessFromJSON,
  SheetAccessFromJSONTyped,
  SheetAccessToJSON,
  SheetConfigFromJSON,
  SheetConfigFromJSONTyped,
  SheetConfigToJSON,
  SheetFromJSON,
  SheetFromJSONTyped,
  SheetResponseFromJSON,
  SheetResponseFromJSONTyped,
  SheetResponseToJSON,
  SheetToJSON,
  SheetsResponseFromJSON,
  SheetsResponseFromJSONTyped,
  SheetsResponseToJSON,
  SidebarConfigFromJSON,
  SidebarConfigFromJSONTyped,
  SidebarConfigToJSON,
  SortDirection,
  SortDirectionFromJSON,
  SortDirectionFromJSONTyped,
  SortDirectionToJSON,
  SourceFieldFromJSON,
  SourceFieldFromJSONTyped,
  SourceFieldToJSON,
  SpaceAccess,
  SpaceAccessFromJSON,
  SpaceAccessFromJSONTyped,
  SpaceAccessToJSON,
  SpaceConfigFromJSON,
  SpaceConfigFromJSONTyped,
  SpaceConfigResponseFromJSON,
  SpaceConfigResponseFromJSONTyped,
  SpaceConfigResponseToJSON,
  SpaceConfigToJSON,
  SpaceConfigsResponseFromJSON,
  SpaceConfigsResponseFromJSONTyped,
  SpaceConfigsResponseToJSON,
  SpaceFromJSON,
  SpaceFromJSONTyped,
  SpacePatternConfigFromJSON,
  SpacePatternConfigFromJSONTyped,
  SpacePatternConfigToJSON,
  SpacePatternFromJSON,
  SpacePatternFromJSONTyped,
  SpacePatternToJSON,
  SpaceResponseFromJSON,
  SpaceResponseFromJSONTyped,
  SpaceResponseToJSON,
  SpaceToJSON,
  SpacesResponseFromJSON,
  SpacesResponseFromJSONTyped,
  SpacesResponseToJSON,
  StringPropertyAllOfFromJSON,
  StringPropertyAllOfFromJSONTyped,
  StringPropertyAllOfToJSON,
  StringPropertyAllOfTypeEnum,
  StringPropertyFromJSON,
  StringPropertyFromJSONTyped,
  StringPropertyToJSON,
  StringPropertyTypeEnum,
  SuccessFromJSON,
  SuccessFromJSONTyped,
  SuccessResponseFromJSON,
  SuccessResponseFromJSONTyped,
  SuccessResponseToJSON,
  SuccessToJSON,
  TextApiResponse,
  UniqueConstraintAllOfConfigFromJSON,
  UniqueConstraintAllOfConfigFromJSONTyped,
  UniqueConstraintAllOfConfigToJSON,
  UniqueConstraintAllOfFromJSON,
  UniqueConstraintAllOfFromJSONTyped,
  UniqueConstraintAllOfToJSON,
  UniqueConstraintAllOfTypeEnum,
  UniqueConstraintFromJSON,
  UniqueConstraintFromJSONTyped,
  UniqueConstraintToJSON,
  UniqueConstraintTypeEnum,
  UpdateJobExecutionPlanByIdRequestFromJSON,
  UpdateJobExecutionPlanByIdRequestFromJSONTyped,
  UpdateJobExecutionPlanByIdRequestToJSON,
  UserConfigFromJSON,
  UserConfigFromJSONTyped,
  UserConfigToJSON,
  UserCredentialsFromJSON,
  UserCredentialsFromJSONTyped,
  UserCredentialsToJSON,
  UserFromJSON,
  UserFromJSONTyped,
  UserResponseFromJSON,
  UserResponseFromJSONTyped,
  UserResponseToJSON,
  UserToJSON,
  UsersResponseFromJSON,
  UsersResponseFromJSONTyped,
  UsersResponseToJSON,
  ValidationFromJSON,
  ValidationFromJSONTyped,
  ValidationMessageFromJSON,
  ValidationMessageFromJSONTyped,
  ValidationMessageSourceEnum,
  ValidationMessageToJSON,
  ValidationMessageTypeEnum,
  ValidationToJSON,
  VersionResponseDataFromJSON,
  VersionResponseDataFromJSONTyped,
  VersionResponseDataToJSON,
  VersionResponseFromJSON,
  VersionResponseFromJSONTyped,
  VersionResponseToJSON,
  VoidApiResponse,
  WorkbookConfigFromJSON,
  WorkbookConfigFromJSONTyped,
  WorkbookConfigToJSON,
  WorkbookFromJSON,
  WorkbookFromJSONTyped,
  WorkbookResponseFromJSON,
  WorkbookResponseFromJSONTyped,
  WorkbookResponseToJSON,
  WorkbookSidebarConfigAllOfFromJSON,
  WorkbookSidebarConfigAllOfFromJSONTyped,
  WorkbookSidebarConfigAllOfToJSON,
  WorkbookSidebarConfigFromJSON,
  WorkbookSidebarConfigFromJSONTyped,
  WorkbookSidebarConfigToJSON,
  WorkbookSidebarConfigTypeEnum,
  WorkbookToJSON,
  WorkbooksResponseFromJSON,
  WorkbooksResponseFromJSONTyped,
  WorkbooksResponseToJSON,
  canConsumeForm,
  exists,
  instanceOfAccessToken,
  instanceOfAccessTokenResponse,
  instanceOfAction,
  instanceOfAgent,
  instanceOfAgentConfig,
  instanceOfAgentLog,
  instanceOfAgentLogsResponse,
  instanceOfAgentResponse,
  instanceOfAgentStats,
  instanceOfAgentsResponse,
  instanceOfApiCredentials,
  instanceOfApiKey,
  instanceOfApiKeyOperationsInner,
  instanceOfApiKeysResponse,
  instanceOfApiToken,
  instanceOfApiTokenResponse,
  instanceOfApiTokensResponse,
  instanceOfAppVersionResponse,
  instanceOfArrayableProperty,
  instanceOfBaseConstraint,
  instanceOfBaseProperty,
  instanceOfBaseSideBarConfig,
  instanceOfBlueprint,
  instanceOfBooleanProperty,
  instanceOfBooleanPropertyAllOf,
  instanceOfBooleanPropertyAllOfConfig,
  instanceOfCellValue,
  instanceOfCellValueValue,
  instanceOfCellValueWithCounts,
  instanceOfCellValueWithLinks,
  instanceOfCellsResponse,
  instanceOfCellsResponseData,
  instanceOfComputedConstraint,
  instanceOfComputedConstraintAllOf,
  instanceOfCreateFileRequest,
  instanceOfDateProperty,
  instanceOfDatePropertyAllOf,
  instanceOfDeleteJobConfig,
  instanceOfDestinationField,
  instanceOfDocument,
  instanceOfDocumentConfig,
  instanceOfDocumentResponse,
  instanceOfDocumentSidebarConfig,
  instanceOfDocumentSidebarConfigAllOf,
  instanceOfDocumentsResponse,
  instanceOfEdge,
  instanceOfEdgeMetadata,
  instanceOfEnumDetails,
  instanceOfEnumDetails1,
  instanceOfEnumMappingField,
  instanceOfEnumMappingField1,
  instanceOfEnumProperty,
  instanceOfEnumPropertyAllOf,
  instanceOfEnumPropertyAllOfConfig,
  instanceOfEnumPropertyOption,
  instanceOfEnumPropertyOptionValue,
  instanceOfEnvironment,
  instanceOfEnvironmentConfig,
  instanceOfEnvironmentResponse,
  instanceOfEnvironmentStatsResponse,
  instanceOfEnvironmentStatsResponseData,
  instanceOfEnvironmentsResponse,
  instanceOfErrorResponse,
  instanceOfErrorResponseErrorsInner,
  instanceOfEvent,
  instanceOfEventConfig,
  instanceOfEventConfigAttributes,
  instanceOfEventConfigAttributesProgress,
  instanceOfEventConfigContext,
  instanceOfEventConfigContextActorId,
  instanceOfEventResponse,
  instanceOfEventToken,
  instanceOfEventTokenResponse,
  instanceOfEventsResponse,
  instanceOfExchangeInvitationRequest,
  instanceOfExchangeTokenResponse,
  instanceOfExchangeTokenResponseData,
  instanceOfExportJobConfig,
  instanceOfExportOptions,
  instanceOfFileConfig,
  instanceOfFileJobConfig,
  instanceOfFileResponse,
  instanceOfFilesResponse,
  instanceOfFronteggUser,
  instanceOfGuest,
  instanceOfGuestConfig,
  instanceOfGuestConfigSpacesInner,
  instanceOfGuestConfigSpacesInnerWorkbooksInner,
  instanceOfGuestResponse,
  instanceOfGuestsResponse,
  instanceOfHealthResponse,
  instanceOfInviteGuestsRequestInner,
  instanceOfJob,
  instanceOfJobConfig,
  instanceOfJobPlan,
  instanceOfJobPlanResponse,
  instanceOfJobResponse,
  instanceOfJobStats,
  instanceOfJobStatsAccounts,
  instanceOfJobStatsJobs,
  instanceOfJobStatsJobsMap,
  instanceOfJobStatsResponse,
  instanceOfJobUpdate,
  instanceOfJobsResponse,
  instanceOfLinkSidebarConfig,
  instanceOfLinkSidebarConfigAllOf,
  instanceOfModelFile,
  instanceOfNumberProperty,
  instanceOfNumberPropertyAllOf,
  instanceOfNumberPropertyAllOfConfig,
  instanceOfPagination,
  instanceOfPipelineJobConfig,
  instanceOfPlan,
  instanceOfRecord,
  instanceOfRecordCounts,
  instanceOfRecordCountsResponse,
  instanceOfRecordCountsResponseData,
  instanceOfRecordCountsResponseDataAllOf,
  instanceOfRecordData,
  instanceOfRecordDataWithLinks,
  instanceOfRecordUpdates,
  instanceOfRecordUpdatesAllOf,
  instanceOfRecordWithLinks,
  instanceOfRecords,
  instanceOfRecordsData,
  instanceOfRecordsResponse,
  instanceOfRecordsResponseData,
  instanceOfRecordsResponseDataAllOf,
  instanceOfRecordsUpdates,
  instanceOfRecordsWithLinks,
  instanceOfReferenceProperty,
  instanceOfReferencePropertyAllOf,
  instanceOfReferencePropertyAllOfConfig,
  instanceOfReplaceRequest,
  instanceOfReplaceRequestReplaceValue,
  instanceOfRequiredConstraint,
  instanceOfRequiredConstraintAllOf,
  instanceOfSheet,
  instanceOfSheetConfig,
  instanceOfSheetResponse,
  instanceOfSheetsResponse,
  instanceOfSourceField,
  instanceOfSpace,
  instanceOfSpaceConfig,
  instanceOfSpaceConfigResponse,
  instanceOfSpaceConfigsResponse,
  instanceOfSpacePattern,
  instanceOfSpacePatternConfig,
  instanceOfSpaceResponse,
  instanceOfSpacesResponse,
  instanceOfStringProperty,
  instanceOfStringPropertyAllOf,
  instanceOfSuccess,
  instanceOfSuccessResponse,
  instanceOfUniqueConstraint,
  instanceOfUniqueConstraintAllOf,
  instanceOfUniqueConstraintAllOfConfig,
  instanceOfUpdateJobExecutionPlanByIdRequest,
  instanceOfUser,
  instanceOfUserConfig,
  instanceOfUserCredentials,
  instanceOfUserResponse,
  instanceOfUsersResponse,
  instanceOfValidation,
  instanceOfValidationMessage,
  instanceOfVersionResponse,
  instanceOfVersionResponseData,
  instanceOfWorkbook,
  instanceOfWorkbookConfig,
  instanceOfWorkbookResponse,
  instanceOfWorkbookSidebarConfig,
  instanceOfWorkbookSidebarConfigAllOf,
  instanceOfWorkbooksResponse,
  mapValues,
  querystring
});
//# sourceMappingURL=index.js.map