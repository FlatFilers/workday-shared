declare type Action = {
    /**
     * @deprecated
     */
    slug?: string;
    label: string;
    description?: string;
    schedule?: 'weekly' | 'daily' | 'hourly';
    /**
     * This will be the job operation that is triggered
     */
    operation?: string;
    /**
     * Foreground actions will prevent interacting with the resource until complete
     */
    mode?: 'foreground' | 'background';
    primary?: boolean;
    /**
     * Whether to show a modal to confirm the action
     */
    confirm?: boolean;
    icon?: string;
};

declare type ArrayableProperty = {
    /**
     * Will allow multiple values and store as an array
     */
    is_array?: boolean;
};

declare type BaseConstraint = {
    type: 'required' | 'unique' | 'computed';
};

declare type ComputedConstraint = (BaseConstraint & {
    type?: 'computed';
});

declare type RequiredConstraint = (BaseConstraint & {
    type?: 'required';
});

declare type UniqueConstraint = (BaseConstraint & {
    type: 'unique';
    config?: {
        /**
         * Ignore casing when determining uniqueness
         */
        case_sensitive?: boolean;
        /**
         * Do not flag empty values as duplicate
         */
        ignore_empty?: boolean;
    };
});

declare type Constraint = (RequiredConstraint | UniqueConstraint | ComputedConstraint);

declare type BaseProperty = {
    key: string;
    type: 'string' | 'number' | 'boolean' | 'date' | 'enum' | 'reference';
    /**
     * User friendly field name
     */
    label?: string;
    description?: string;
    constraints?: Array<Constraint>;
    /**
     * Prevent user input into this field
     */
    readonly?: boolean;
    /**
     * Useful for any contextual metadata regarding the schema. Store any valid json here.
     */
    metadata?: Record<string, any>;
};

declare type BooleanProperty = (BaseProperty & {
    type?: 'boolean';
    config?: {
        /**
         * Allow a neither true or false state to be stored as `null`
         */
        allow_indeterminate?: boolean;
    };
});

declare type DateProperty = (BaseProperty & {
    type?: 'date';
});

declare type EnumPropertyOption = {
    /**
     * The value or ID of this option. This value will be sent in egress
     */
    value: (string | number | boolean);
    /**
     * A visual label for this option, defaults to value if not provided
     */
    label?: string;
    /**
     * An optional color to assign this option
     */
    color?: string;
    /**
     * A reference pointer to a previously registered icon
     */
    icon?: string;
    /**
     * An arbitrary JSON object to be associated with this option and made available to hooks
     */
    meta?: Record<string, any>;
};

declare type EnumProperty = (BaseProperty & ArrayableProperty & {
    type?: 'enum';
    config: {
        /**
         * Permit the user to create new options for this specific field.
         */
        allow_custom?: boolean;
        options: Array<EnumPropertyOption>;
    };
});

declare type NumberProperty = (BaseProperty & ArrayableProperty & {
    type?: 'number';
    /**
     * Optional configuration
     */
    config?: {
        /**
         * Number of decimal places to round data to
         */
        decimal_places?: number;
    };
});

declare type ReferenceProperty = (BaseProperty & ArrayableProperty & {
    type?: 'reference';
    config: {
        /**
         * Full path reference to a sheet configuration. Must be in the same workbook.
         */
        ref: string;
        /**
         * Key of the property to use as the reference key. Defaults to `id`
         */
        key?: string;
        /**
         * The type of relationship this defines
         */
        relationship: 'has-one' | 'has-many';
    };
});

declare type StringProperty = (BaseProperty & {
    type?: 'string';
});

declare type Property = (StringProperty | NumberProperty | BooleanProperty | DateProperty | EnumProperty | ReferenceProperty);

declare type PropertyList = Array<Property>;

declare type SheetAccess = '*' | 'add' | 'edit' | 'delete' | 'import';

/**
 * Describes shape of data as well as behavior
 */
declare type SheetConfig = {
    name: string;
    description?: string;
    slug?: string;
    /**
     * Prevent user input in this sheet
     */
    readonly?: boolean;
    access?: Array<SheetAccess>;
    fields: Array<Property>;
    actions?: Array<Action>;
};

export { Action, ArrayableProperty, BaseConstraint, BaseProperty, BooleanProperty, ComputedConstraint, Constraint, DateProperty, EnumProperty, EnumPropertyOption, NumberProperty, Property, PropertyList, ReferenceProperty, RequiredConstraint, SheetAccess, SheetConfig, StringProperty, UniqueConstraint };
