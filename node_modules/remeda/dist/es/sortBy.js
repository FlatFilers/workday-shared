var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { purry } from './purry';
export function sortBy(arrayOrSort) {
    var sorts = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sorts[_i - 1] = arguments[_i];
    }
    if (!isSortRule(arrayOrSort)) {
        return purry(_sortBy, [arrayOrSort, sorts]);
    }
    return purry(_sortBy, [__spreadArray([arrayOrSort], sorts, true)]);
}
function isSortRule(x) {
    if (typeof x == 'function')
        return true;
    if (x.length != 2)
        return false;
    return typeof x[0] == 'function' && (x[1] === 'asc' || x[1] === 'desc');
}
function _sortBy(array, sorts) {
    var sort = function (a, b, sortRule, sortRules) {
        var _a;
        var fn;
        var direction;
        if (Array.isArray(sortRule)) {
            _a = sortRule, fn = _a[0], direction = _a[1];
        }
        else {
            direction = 'asc';
            fn = sortRule;
        }
        var dir = direction !== 'desc' ? function (x, y) { return x > y; } : function (x, y) { return x < y; };
        if (!fn) {
            return 0;
        }
        if (dir(fn(a), fn(b))) {
            return 1;
        }
        if (dir(fn(b), fn(a))) {
            return -1;
        }
        return sort(a, b, sortRules[0], sortRules.slice(1));
    };
    var copied = __spreadArray([], array, true);
    return copied.sort(function (a, b) { return sort(a, b, sorts[0], sorts.slice(1)); });
}
(function (sortBy) {
    sortBy.strict = sortBy;
})(sortBy || (sortBy = {}));
